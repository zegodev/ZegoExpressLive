import { ZegoDataReport } from '../common/zego.datareport';
import { ZegoPreview } from './zego.preview';
import { MediaStreamConstraints, PlayOption, SignalInfo, ScreenConfig, ERRO, PublishOption } from '../common/zego.entity';
import { ZegoStreamCenter } from '../common/ZegoStreamCenter';
import { LoggerWeb } from './zego.logger.webrtc';
import { StateCenter } from '../common/clientBase/stateCenter';
export declare class ZegoStreamCenterWeb extends ZegoStreamCenter {
    logger: LoggerWeb;
    dataReport: ZegoDataReport;
    stateCenter: StateCenter;
    testEnvironment: boolean;
    heartbeatTimer: any;
    heartbeatInterval: number;
    qualityTimerInterval: number;
    maxRetryCount: number;
    previewVideoList: ZegoPreview[];
    signalList: {
        [index: string]: SignalInfo;
    };
    appid: number;
    userid: string;
    token: string;
    server: string;
    constructor(log: LoggerWeb, stateCenter: StateCenter);
    onSignalDisconnected(server: any): void;
    setQualityMonitorCycle(timeInMs: number): boolean;
    setSessionInfo(appid: number, userid: string, token: string, testEnvironment: boolean): void;
    onPlayStateUpdate(type: number, streamid: string, error: any): void;
    onPlayQualityUpdate(streamid: any, streamQuality: any): void;
    onPublishStateUpdate(type: number, streamid: string, error: number | ERRO | undefined): void;
    onPublishQualityUpdate(streamid: any, streamQuality: any): void;
    onUpdateHeartBeartIntervalHandle(interval: number): void;
    switchDevice(type: 'audio' | 'video', localStream: MediaStream, deviceId: string, success: Function, error: Function): void;
    enableMicrophone(localStream: MediaStream, enable: boolean): boolean;
    enableCamera(localStream: MediaStream, enable: boolean): boolean;
    startPreview(mediaStreamConstraints: MediaStreamConstraints, success: Function, error: (err: ERRO) => void): boolean;
    stopPreview(localStream: MediaStream): boolean;
    setPublishStateStart(streamid: string, localStream: MediaStream, publishOption: PublishOption): boolean;
    getTotalStreamId(streamid: string): string;
    startPublishingStream(streamid: string, serverUrls: string[], preferPublishSourceType?: number): boolean;
    updateWaitingList(signalInfo: SignalInfo, isPublish: boolean, streamId: string, success: Function, error: Function): void;
    publishStream(streamid: string): void;
    connectPublishServer(streamId: string, serverUrl: string): boolean;
    shouldRetry(stream: {
        serverUrls: string[];
        retryCount: number;
    }, errorCode: number): boolean;
    getTokenSuccess(): void;
    stopPublishingStream(streamid: string): void;
    setStreamAudioOutput(localVideo: any, audioOutput: string): boolean;
    connetWithReuseSignalServer(streamId: string, isPublish: boolean, serverUrl: string, success: Function, error: Function): void;
    setPlayStateStart(streamid: string, playOption?: PlayOption): boolean;
    startPlayingStream(streamid: string, serverUrls: string[], success: (stream: MediaStream) => void): boolean;
    private connectPlayServer;
    private playStream;
    private removeStreamFromSignal;
    private stopSignalHeartbeat;
    stopPlayingStream(streamid: string): void;
    reset(): void;
    checkMessageTimeout: () => void;
    getAllInUseUrl: () => string[];
    onDisconnectHandle: (server: string | number) => void;
    startSignalHeartbeat(): void;
    checkSignalHeartbeat(): void;
    checkPreview(localStream: MediaStream): ZegoPreview | null;
    removePreview(preview: ZegoPreview): void;
    onPlayerStreamUrlUpdate(streamid: string, url: string, type: string): void;
    getStats(callBack: (stats: any) => void): void;
    getScreenConstrains(screen: {
        audio?: boolean;
        videoQuality?: 1 | 2 | 3 | 4;
        width?: number;
        height?: number;
        bitRate?: number;
        frameRate?: number;
    } | MediaStreamConstraints | boolean): ScreenConfig;
    createScreenPreviewer(stream: MediaStream, screenConfig?: ScreenConfig): ZegoPreview;
}
