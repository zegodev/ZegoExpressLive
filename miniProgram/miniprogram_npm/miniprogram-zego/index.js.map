{"version":3,"sources":["jZego-wx.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./sdk/wechatMini/zego.client.wechat.ts\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./sdk/common/ZegoStreamCenter.ts\":\n/*!****************************************!*\\\n  !*** ./sdk/common/ZegoStreamCenter.ts ***!\n  \\****************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ZegoStreamCenter = /** @class */ (function () {\n    function ZegoStreamCenter(log, stateCenter) {\n        this.playerList = {};\n        this.publisherList = {};\n    }\n    ZegoStreamCenter.prototype.setSessionInfo = function (appid, userid, token, testEnvironment) { };\n    return ZegoStreamCenter;\n}());\nexports.ZegoStreamCenter = ZegoStreamCenter;\n\n\n/***/ }),\n\n/***/ \"./sdk/common/clientBase/common.ts\":\n/*!*****************************************!*\\\n  !*** ./sdk/common/clientBase/common.ts ***!\n  \\*****************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zego_entity_1 = __webpack_require__(/*! ../zego.entity */ \"./sdk/common/zego.entity.ts\");\nvar Common = /** @class */ (function () {\n    function Common() {\n    }\n    //重置流\n    Common.prototype.resetStreamCenter = function () {\n        this.stateCenter.customUrl && (this.stateCenter.customUrl = null);\n        this.streamCenter.reset();\n        if (!this.socketCenter.isDisConnect()) {\n            //send stream delete info\n            for (var streamid in this.stateCenter.publishStreamList) {\n                if (this.stateCenter.publishStreamList[streamid].state == zego_entity_1.ENUM_PUBLISH_STREAM_STATE.publishing) {\n                    this.streamHandler.updateStreamInfo(streamid, zego_entity_1.ENUM_STREAM_SUB_CMD.liveEnd, this.stateCenter.publishStreamList[streamid].extra_info);\n                }\n            }\n        }\n    };\n    /*\n     *    \"zb.cm.hfwur\": \"ZegoClient.base.Common.handleFetchWebRtcUrlRsp\",\n     */\n    Common.prototype.handleFetchWebRtcUrlRsp = function (msg, success) {\n        var streamId = msg.body.stream_id;\n        if (msg.body.ptype === 'push') {\n            if (this.stateCenter.publishStreamList[streamId]) {\n                this.streamCenter.startPublishingStream(streamId, msg.body.urls);\n            }\n            else {\n                this.logger.error('cb.cm.hfwur no streamid to publish');\n            }\n        }\n        else if (msg.body.ptype == 'pull') {\n            //check streamid exist\n            var found = false;\n            for (var i = 0; i < this.stateCenter.streamList.length; i++) {\n                if (this.stateCenter.streamList[i].stream_id === streamId) {\n                    // 根据传入的流id判断当前的流列表中是否存在该流\n                    found = true;\n                    break;\n                }\n            }\n            if (found == false) {\n                this.logger.warn('cb.cm.hfwur cannot find stream, continue to play');\n                // return;\n            }\n            this.streamCenter.startPlayingStream(streamId, msg.body.urls, success);\n        }\n    };\n    return Common;\n}());\nexports.Common = Common;\n\n\n/***/ }),\n\n/***/ \"./sdk/common/clientBase/heartBeatHandler.ts\":\n/*!***************************************************!*\\\n  !*** ./sdk/common/clientBase/heartBeatHandler.ts ***!\n  \\***************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zego_entity_1 = __webpack_require__(/*! ../zego.entity */ \"./sdk/common/zego.entity.ts\");\nvar client_util_1 = __webpack_require__(/*! ../../util/client-util */ \"./sdk/util/client-util.ts\");\nvar zego_error_1 = __webpack_require__(/*! ../zego.error */ \"./sdk/common/zego.error.ts\");\nvar MAX_TRY_HEARTBEAT_COUNT = 3; //最大心跳尝试次数\nvar HeartBeatHandler = /** @class */ (function () {\n    function HeartBeatHandler(logger, stateCenter, socketCenter) {\n        this.logger = logger;\n        this.socketCenter = socketCenter;\n        this.stateCenter = stateCenter;\n    }\n    HeartBeatHandler.prototype.resetHeartbeat = function () {\n        this.logger.debug('zb.hb.rht call');\n        clearTimeout(this.stateCenter.heartbeatTimer);\n        this.stateCenter.heartbeatTimer = null;\n        this.stateCenter.tryHeartbeatCount = 0;\n        this.logger.debug('zb.hb.rht call success');\n    };\n    //空实现 ，logincenter覆盖\n    HeartBeatHandler.prototype.hbLogout = function (err) { };\n    HeartBeatHandler.prototype.start = function (heartbeatInterval) {\n        var _this = this;\n        this.logger.debug('zb.hb.sht call');\n        // 若当前不是处于login登录状态，则返回不做心跳\n        if (!this.stateCenter.isLogin()) {\n            this.logger.error('zb.hb.sht state error');\n            return;\n        }\n        // 若尝试心跳次数大于最大尝试次数，则置为登出状态，清除状态数据\n        if (++this.stateCenter.tryHeartbeatCount > MAX_TRY_HEARTBEAT_COUNT) {\n            this.logger.error('zb.hb.sht come to try limit');\n            this.hbLogout(zego_error_1.liveRoomErrorList.HEARTBEAT_TIMEOUT);\n            return;\n        }\n        // 发送消息\n        this.logger.debug('zb.hb.sht send packet');\n        var bodyData = {\n            reserve: 0,\n        };\n        this.socketCenter.registerRouter('hb', function (msg) {\n            _this.handleHeartbeatRsp(msg);\n        });\n        this.socketCenter.sendMessage('hb', bodyData);\n        this.logger.debug('zb.hb.sht call success');\n        this.stateCenter.heartbeatInterval = heartbeatInterval;\n        // heartbeatInterval后再发\n        this.stateCenter.heartbeatTimer = setTimeout(function () {\n            _this.start(_this.stateCenter.heartbeatInterval);\n        }, this.stateCenter.heartbeatInterval);\n    };\n    /*\n     *    \"hhbr.0\": \"ZegoClient.handleHeartbeatRsp\",\n     */\n    HeartBeatHandler.prototype.handleHeartbeatRsp = function (msg) {\n        this.logger.debug('zb.hb.hhbr call');\n        if (msg.body.err_code !== 0) {\n            this.logger.error('zb.hb.hhbr call disconnect, server error=', msg.body.err_code);\n            this.hbLogout(client_util_1.ClientUtil.getServerError(msg.body.err_code));\n            return;\n        }\n        //reset heartbeat fail count\n        this.stateCenter.tryHeartbeatCount = 0;\n        this.stateCenter.heartbeatInterval = msg.body.hearbeat_interval;\n        if (this.stateCenter.heartbeatInterval < zego_entity_1.MINIUM_HEARTBEAT_INTERVAL) {\n            this.stateCenter.heartbeatInterval = zego_entity_1.MINIUM_HEARTBEAT_INTERVAL;\n        }\n        //update timewindow\n        if (msg.body.bigim_time_window && typeof msg.body.bigim_time_window == 'number') {\n            this.stateCenter.bigimTimeWindow = msg.body.bigim_time_window;\n        }\n        if (msg.body.dati_time_window && typeof msg.body.dati_time_window == 'number') {\n            this.stateCenter.datiTimeWindow = msg.body.dati_time_window;\n        }\n        this.ReliableMessageHandler(msg);\n        //update stream if diff/\n        this.fetchStreamList(msg);\n        //update user if diff\n        if (msg.body.server_user_seq !== this.stateCenter.userSeq && this.stateCenter.userStateUpdate) {\n            this.logger.info('zb.hb.hhbr call update user ' + msg.body.server_user_seq, this.stateCenter.userSeq);\n            this.fetchUserList();\n        }\n        //try updating stream info again\n        for (var streamid in this.stateCenter.publishStreamList) {\n            if (this.stateCenter.publishStreamList[streamid].state == zego_entity_1.ENUM_PUBLISH_STREAM_STATE.update_info) {\n                this.logger.info('zb.hb.hhbr try to update stream info');\n                this.updateStreamInfo(streamid, zego_entity_1.ENUM_STREAM_SUB_CMD.liveBegin, this.stateCenter.publishStreamList[streamid].extra_info);\n            }\n        }\n        //get online count\n        if (msg.body.online_count != undefined && msg.body.online_count != 0) {\n            this.onUpdateOnlineCount(this.stateCenter.roomid, msg.body.online_count);\n        }\n        this.logger.debug('zb.hb.hhbr call success');\n    };\n    HeartBeatHandler.prototype.ReliableMessageHandler = function (msg) {\n        var _this = this;\n        //check trans seq\n        if (msg.body.trans_seqs) {\n            for (var i = 0; i < msg.body.trans_seqs.length; i++) {\n                var trans_channel = msg.body.trans_seqs[i].trans_channel;\n                var trans_seq_array = msg.body.trans_seqs[i].trans_seq_array;\n                trans_seq_array = trans_seq_array.filter(function (item) {\n                    var type = item.trans_type, seq = item.trans_seq;\n                    if (!_this.stateCenter.transSeqMap[type] || _this.stateCenter.transSeqMap[type].seq !== seq) {\n                        return true;\n                    }\n                    else {\n                        return false;\n                    }\n                });\n                trans_seq_array.length > 0 && this.fetchReliableMessage(trans_channel, trans_seq_array);\n            }\n        }\n    };\n    /*\n     *    \"frm.0\": \"ZegoClient.fetchReliableMessage\",拉取可靠业务广播\n     */\n    HeartBeatHandler.prototype.fetchReliableMessage = function (trans_channel, fetch_array) {\n        var _this = this;\n        this.logger.debug('zb.hb.frm call');\n        var data = {\n            trans_channel: trans_channel,\n            fetch_array: fetch_array,\n        };\n        this.socketCenter.registerRouter('trans_fetch', function (msg) {\n            _this.handleFetchTransRsp(msg);\n        });\n        this.socketCenter.sendMessage('trans_fetch', data);\n        this.logger.debug('zb.hb.frm call success');\n    };\n    //fetch trans 回包\n    HeartBeatHandler.prototype.handleFetchTransRsp = function (msg) {\n        var _this = this;\n        if (!this.stateCenter.isLogin()) {\n            this.logger.error('zb.hb.hftr not login');\n            return;\n        }\n        if (msg.body.err_code != 0) {\n            this.logger.error('zb.hb.hftr trans send error ' + msg.body.err_code);\n            return;\n        }\n        var trans_fetch_results = msg.body.trans_fetch_results;\n        trans_fetch_results.forEach(function (trans_fetch_result) {\n            var type = trans_fetch_result.trans_type;\n            var seq = trans_fetch_result.trans_seq;\n            _this.stateCenter.transSeqMap[type] = {\n                seq: seq,\n            };\n            if (msg.body.trans_user_idname != _this.stateCenter.idName) {\n                _this.onRecvReliableMessage(type, seq, trans_fetch_result.trans_data);\n            }\n            _this.logger.debug('zb.hb.hftr trans ' + type + ' seq ' + seq);\n        });\n    };\n    /*\n     *    \"fsl.0\": \"ZegoClient.fetchStreamList\",拉取服务端流信息\n     */\n    HeartBeatHandler.prototype.fetchStreamList = function (msg) {\n        var _this = this;\n        //update stream if diff/\n        if (msg.body.stream_seq === this.stateCenter.streamSeq)\n            return;\n        this.logger.debug('zb.hb.fsl current seq ' + this.stateCenter.streamSeq + ' server Seq ' + msg.body.stream_seq);\n        this.logger.debug('zb.hb.fsl call');\n        // 不是处于登录状态，不让拉流\n        if (!this.stateCenter.isLogin()) {\n            this.logger.error('zb.hb.fsl state error');\n            return;\n        }\n        // 是否正处于拉流状态 false 为完成， true为正在拉流\n        if (this.stateCenter.streamQuerying) {\n            this.logger.warn('zb.hb.fsl already doing');\n            return;\n        }\n        this.stateCenter.streamQuerying = true;\n        this.logger.debug('zb.hb.fsl send fetch request');\n        // 发送消息\n        this.socketCenter.registerRouter('stream_info', function (msg) {\n            _this.handleFetchStreamListRsp(msg);\n        });\n        this.socketCenter.sendMessage('stream_info', {\n            reserve: 0,\n        });\n        this.logger.debug('zb.hb.fsl call success');\n    };\n    //空实现 被覆盖\n    HeartBeatHandler.prototype.handleFetchStreamListRsp = function (msg) { };\n    //空实现 被覆盖\n    HeartBeatHandler.prototype.fetchUserList = function () { };\n    //流更新信令  退出上次推的自己的流\n    HeartBeatHandler.prototype.updateStreamInfo = function (streamid, cmd, stream_extra_info, error) {\n        if (stream_extra_info === void 0) { stream_extra_info = ''; }\n    };\n    //空实现 被sdk覆盖\n    HeartBeatHandler.prototype.onUpdateOnlineCount = function (roomId, userCount) { };\n    //空实现 被sdk覆盖了\n    HeartBeatHandler.prototype.onRecvReliableMessage = function (type, seq, data) { };\n    HeartBeatHandler.prototype.resetCheckMessage = function () {\n        this.logger.debug('zb.hb.rcm call');\n        clearTimeout(this.stateCenter.sendDataCheckTimer);\n        this.stateCenter.sendDataCheckTimer = null;\n        this.checkSendMessageList(this.stateCenter.sendDataList);\n        this.checkSendMessageList(this.stateCenter.sendCommandList);\n        this.stateCenter.sendDataMap = {};\n        this.stateCenter.sendCommandMap = {};\n        this.logger.debug('zb.hb.rcm call success');\n    };\n    HeartBeatHandler.prototype.checkSendMessageList = function (messageList) {\n        var head = messageList.getFirst();\n        while (head != null) {\n            messageList.remove(head);\n            if (head._data.error) {\n                if (head._data.data.body.custom_msg) {\n                    head._data.error(zego_error_1.liveRoomErrorList.SEND_MSG_TIMEOUT, head._data.data.header.seq, head._data.data.body.custom_msg);\n                }\n                else {\n                    head._data.error(zego_error_1.liveRoomErrorList.SEND_MSG_TIMEOUT, head._data.data.header.seq);\n                }\n            }\n            head = messageList.getFirst();\n        }\n    };\n    HeartBeatHandler.prototype.checkMessageListTimeout = function (messageList, messageMap) {\n        var head = messageList.getFirst();\n        var timestamp = Date.parse(new Date() + '');\n        var checkCount = 0;\n        var timeoutMsgCount = 0;\n        var dropMsgCount = 0;\n        while (head != null) {\n            if (head._data.time + this.stateCenter.sendDataTimeout > timestamp) {\n                break;\n            }\n            delete messageMap[head._data.data.header.seq];\n            messageList.remove(head);\n            ++timeoutMsgCount;\n            if (head._data.error == null ||\n                (this.stateCenter.sendDataDropTimeout > 0 &&\n                    head._data.time + this.stateCenter.sendDataDropTimeout < timestamp)) {\n                ++dropMsgCount;\n            }\n            else {\n                if (head._data.data.body.custom_msg) {\n                    head._data.error(zego_error_1.liveRoomErrorList.SEND_MSG_TIMEOUT, head._data.data.header.seq, head._data.data.body.custom_msg);\n                }\n                else {\n                    head._data.error(zego_error_1.liveRoomErrorList.SEND_MSG_TIMEOUT, head._data.data.header.seq);\n                }\n            }\n            ++checkCount;\n            if (checkCount >= this.stateCenter.sendDataCheckOnceCount) {\n                break;\n            }\n            head = messageList.getFirst();\n        }\n        if (timeoutMsgCount != 0 || dropMsgCount != 0) {\n            this.logger.debug('zb.hb.cmt call success, stat: timeout=', timeoutMsgCount, 'drop=', dropMsgCount);\n        }\n    };\n    /*\n     *    \"scmt.0\": \"ZegoClient.startCheckMessageTimeout\",\n     */\n    //检查custommsg发送包是否超时\n    HeartBeatHandler.prototype.startCheckMessageTimeout = function () {\n        var _this = this;\n        //this.logger.debug(\"scmt.0 call\");\n        if (!this.stateCenter.isLogin()) {\n            this.logger.error('zb.hb.scmt state error');\n            return;\n        }\n        this.checkMessageListTimeout(this.stateCenter.sendDataList, this.stateCenter.sendDataMap);\n        this.checkMessageListTimeout(this.stateCenter.sendCommandList, this.stateCenter.sendCommandMap);\n        this.stateCenter.sendDataCheckTimer = setTimeout(function () {\n            _this.startCheckMessageTimeout();\n        }, this.stateCenter.sendDataCheckInterval);\n    };\n    return HeartBeatHandler;\n}());\nexports.HeartBeatHandler = HeartBeatHandler;\n\n\n/***/ }),\n\n/***/ \"./sdk/common/clientBase/index.ts\":\n/*!****************************************!*\\\n  !*** ./sdk/common/clientBase/index.ts ***!\n  \\****************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = __webpack_require__(/*! ./common */ \"./sdk/common/clientBase/common.ts\");\nvar zego_entity_1 = __webpack_require__(/*! ../zego.entity */ \"./sdk/common/zego.entity.ts\");\nvar socketCenter_1 = __webpack_require__(/*! ./socketCenter */ \"./sdk/common/clientBase/socketCenter.ts\");\nvar roomHandler_1 = __webpack_require__(/*! ./roomHandler */ \"./sdk/common/clientBase/roomHandler.ts\");\nvar streamHandler_1 = __webpack_require__(/*! ./streamHandler */ \"./sdk/common/clientBase/streamHandler.ts\");\nvar heartBeatHandler_1 = __webpack_require__(/*! ./heartBeatHandler */ \"./sdk/common/clientBase/heartBeatHandler.ts\");\nvar messageHandler_1 = __webpack_require__(/*! ./messageHandler */ \"./sdk/common/clientBase/messageHandler.ts\");\nvar liveHandler_1 = __webpack_require__(/*! ./liveHandler */ \"./sdk/common/clientBase/liveHandler.ts\");\nvar zego_error_1 = __webpack_require__(/*! ../zego.error */ \"./sdk/common/zego.error.ts\");\n// 对外开发接口，与文档保持一致；调度中心\nvar BaseCenter = /** @class */ (function (_super) {\n    __extends(BaseCenter, _super);\n    function BaseCenter() {\n        return _super.call(this) || this;\n    }\n    BaseCenter.prototype.init = function () {\n        this.bindSocketHandler();\n        this.bindStreamHandler();\n        this.bindHeatBeatHandler();\n        this.bindRoomHandler();\n        this.bindMessageHandler();\n        this.bindLiveHandler();\n        this.bindStreamCenterHandler();\n    };\n    /*\n     *    \"zb.cm.bsh.0\": \"ZegoClient.base.bindSocketHandler\",\n     */\n    BaseCenter.prototype.bindSocketHandler = function () {\n        var _this = this;\n        this.socketCenter = new socketCenter_1.SocketCenter(this.logger, this.stateCenter);\n        this.socketCenter.registerRouter('push_signal', function (msg) {\n            _this.liveHandler.handlePushSignalMsg(msg);\n        });\n        this.socketCenter.getSocket = function (server) {\n            return _this.getSocket(server);\n        };\n        this.socketCenter.handlePushKickout = function (msg) {\n            _this.logger.info('zb.cm.bsh.0  call hpk');\n            _this.roomHandler.setRunState(zego_entity_1.ENUM_RUN_STATE.logout);\n            _this.roomHandler.resetRoom();\n            _this.logger.error('zb.cm.bsh.0 kick out reason ' + msg.body.reason);\n            _this.actionListener('roomStateUpdate', 'KICKOUT', zego_error_1.liveRoomErrorList.KICK_OUT);\n            _this.logger.debug('zb.cm.bsh.0  call hpk success');\n        };\n        this.socketCenter.handlePushCustomMsg = function (msg) {\n            _this.messageHandler.handlePushCustomMsg(msg);\n        };\n        this.socketCenter.handlePushUserStateUpdateMsg = function (msg) {\n            _this.roomHandler.handlePushUserStateUpdateMsg(msg);\n        };\n        // id_name: \"1571033566235\"\n        // msg_category: 1\n        // msg_content: \"test\"\n        // msg_id: 1\n        // msg_type: 1\n        // nick_name: \"\"\n        // role: 1\n        // send_time: 1571033604338\n        this.socketCenter.handlePushRoomMsg = function (msg) {\n            var chatData = [];\n            msg.body.chat_data.forEach(function (data) {\n                var chatInfo = {\n                    userId: data.id_name,\n                    userName: data.nick_name,\n                    msgId: data.msg_id,\n                    type: data.msg_category,\n                    content: data.msg_content,\n                    sendTime: data.send_time,\n                };\n                chatData.push(chatInfo);\n            });\n            _this.actionListener('recvRoomMsg', chatData);\n        };\n        this.socketCenter.handlePushMergeMsg = function (msg) {\n            _this.messageHandler.handlePushMergeMsg(msg);\n        };\n        this.socketCenter.handlePushTransMsg = function (msg) {\n            _this.messageHandler.handlePushTransMsg(msg);\n        };\n        this.socketCenter.handleBigImMsgRsp = function (msg) {\n            _this.messageHandler.handleBigImMsgRsp(msg);\n        };\n    };\n    BaseCenter.prototype.bindStreamHandler = function () {\n        var _this = this;\n        this.streamHandler = new streamHandler_1.StreamHandler(this.logger, this.stateCenter, this.socketCenter);\n        this.streamHandler.onStreamUpdated = function (type, streamList) {\n            _this.actionListener('remoteStreamUpdated', type, streamList);\n        };\n        this.streamHandler.onPublishStateUpdate = function (type, streamid, error) {\n            _this.actionListener('publishStateChange', { type: type, streamid: streamid, error: error });\n        };\n        this.streamHandler.onStreamExtraInfoUpdated = function (streamList) {\n            _this.actionListener('streamExtraInfoUpdated', streamList);\n        };\n        this.streamHandler.setCDNInfo = function (streamInfo, streamItem) {\n            _this.setCDNInfo(streamInfo, streamItem);\n        };\n    };\n    BaseCenter.prototype.bindHeatBeatHandler = function () {\n        var _this = this;\n        this.heartBeatHandler = new heartBeatHandler_1.HeartBeatHandler(this.logger, this.stateCenter, this.socketCenter);\n        this.heartBeatHandler.onRecvReliableMessage = function (type, seq, data) {\n            _this.actionListener('recvReliableMessage', type, seq, data);\n        };\n        this.heartBeatHandler.handleFetchStreamListRsp = function (msg) {\n            _this.streamHandler.handleFetchStreamListRsp(msg);\n        };\n        this.heartBeatHandler.fetchUserList = function () {\n            _this.roomHandler.fetchUserList();\n        };\n        this.heartBeatHandler.onUpdateOnlineCount = function (roomId, userCount) {\n            _this.actionListener('updateOnlineCount', roomId, userCount);\n        };\n        this.heartBeatHandler.updateStreamInfo = function (streamid, cmd, stream_extra_info, error) {\n            if (stream_extra_info === void 0) { stream_extra_info = ''; }\n            _this.streamHandler.updateStreamInfo(streamid, cmd, stream_extra_info, error);\n        };\n        this.heartBeatHandler.hbLogout = function (err) {\n            _this.actionListener('roomStateUpdate', 'DISCONNECT', err);\n        };\n    };\n    /*\n     *    \"zb.cm.brh\": \"ZegoClient.base.bindRoomHandler\",\n     */\n    BaseCenter.prototype.bindRoomHandler = function () {\n        var _this = this;\n        this.roomHandler = new roomHandler_1.RoomHandler(this.logger, this.stateCenter, this.socketCenter);\n        this.roomHandler.loginSuccessCallBack = function (lastRunState, msg) {\n            //处理心跳\n            var heartbeatInterval = msg.body.hearbeat_interval < zego_entity_1.MINIUM_HEARTBEAT_INTERVAL\n                ? zego_entity_1.MINIUM_HEARTBEAT_INTERVAL\n                : msg.body.hearbeat_interval;\n            //setTimeout (() => {\n            _this.heartBeatHandler.start(heartbeatInterval);\n            // }, heartbeatInterval);\n            //消息检查\n            _this.heartBeatHandler.resetCheckMessage();\n            _this.heartBeatHandler.startCheckMessageTimeout();\n            _this.streamCenter.setSessionInfo(_this.stateCenter.appid, _this.stateCenter.idName, _this.stateCenter.token, _this.stateCenter.testEnvironment);\n            //房间成员变化\n            //handle anchor info\n            if (msg.body.anchor_info) {\n                _this.actionListener('getAnchorInfo', msg.body.anchor_info.anchor_id_name, msg.body.anchor_info.anchor_nick_name);\n            }\n            if (msg.body.online_count) {\n                _this.actionListener('updateOnlineCount', _this.stateCenter.roomid, msg.body.online_count);\n            }\n            //handle userStateUpdate\n            _this.logger.info('zb.cm.brh hls userStateUpdate ' + _this.stateCenter.userStateUpdate);\n            if (_this.stateCenter.userStateUpdate) {\n                _this.logger.info('zb.cm.brh hls fetch all new userlist');\n                _this.roomHandler.fetchUserList();\n            }\n            //流处理理\n            _this.streamHandler.handleStreamStart(lastRunState, msg);\n        };\n        this.roomHandler.onGetTotalUserList = function (roomId, userList) {\n            _this.actionListener('totalUserList', roomId, userList);\n        };\n        this.roomHandler.resetRoomCallBack = function () {\n            // 清除心跳计时器对象\n            _this.heartBeatHandler.resetHeartbeat();\n            // 清除检查消息循环\n            _this.heartBeatHandler.resetCheckMessage();\n            //清除推拉流状态\n            _this.resetStreamCenter();\n        };\n        this.roomHandler.onUserStateUpdate = function (roomId, userList) {\n            _this.actionListener('userStateUpdate', roomId, userList);\n        };\n        this.roomHandler.onDisconnect = function (err) {\n            _this.actionListener('roomStateUpdate', 'DISCONNECT', err);\n        };\n        this.roomHandler.loginBodyData = function () { return _this.loginBodyData(); };\n    };\n    BaseCenter.prototype.bindMessageHandler = function () {\n        var _this = this;\n        this.messageHandler = new messageHandler_1.MessageHandler(this.logger, this.stateCenter, this.socketCenter);\n        this.messageHandler.onRecvCustomCommand = function (fromUserId, fromIdName, customContent) {\n            _this.actionListener('recvCustomCommand', fromUserId, fromIdName, customContent);\n        };\n        this.messageHandler.onRecvBigRoomMessage = function (messageList, roomId) {\n            _this.actionListener('recvBigRoomMessage', messageList, roomId);\n        };\n        this.messageHandler.onRecvReliableMessage = function (type, seq, data) {\n            _this.actionListener('recvReliableMessage', type, seq, data);\n        };\n    };\n    BaseCenter.prototype.bindLiveHandler = function () {\n        var _this = this;\n        this.liveHandler = new liveHandler_1.LiveHandler(this.logger, this.stateCenter, this.socketCenter);\n        this.liveHandler.onRecvEndJoinLiveCommand = function (requestId, from_userid, from_username, roomid) {\n            _this.actionListener('recvEndJoinLiveCommand', requestId, from_userid, from_username, roomid);\n        };\n        this.liveHandler.onRecvInviteJoinLiveRequest = function (requestId, from_userid, from_username, roomid) {\n            _this.actionListener('RecvInviteJoinLiveRequest', requestId, from_userid, from_username, roomid);\n        };\n        this.liveHandler.onRecvJoinLiveRequest = function (requestId, from_userid, from_username, roomid) {\n            _this.actionListener('recvJoinLiveRequest', requestId, from_userid, from_username, roomid);\n        };\n    };\n    BaseCenter.prototype.bindStreamCenterHandler = function () {\n        var _this = this;\n        this.streamCenter.onPlayStateUpdate = function (type, streamid, error) {\n            _this.actionListener('pullStateChange', { type: type, streamid: streamid, error: error });\n        };\n    };\n    /*********\n     *\n     * 下面的方法微信和web端实现一样，共用\n     *\n     *\n     * ****/\n    /*\n     *    \"zb.cm.cf\": \"ZegoClient.base.config\",\n     */\n    // 配置client\n    BaseCenter.prototype.config = function (option) {\n        this.logger.debug('zb.cm.cf call');\n        if (option.nickName) {\n            this.stateCenter.nickName = option.nickName;\n        }\n        if (typeof option.testEnvironment === 'boolean') {\n            this.stateCenter.testEnvironment = option.testEnvironment;\n        }\n        option.logLevel && this.logger.setLogLevel(option.logLevel);\n        if (!option.remoteLogLevel) {\n            this.logger.setRemoteLogLevel(0);\n        }\n        else {\n            this.logger.setRemoteLogLevel(option.remoteLogLevel);\n        }\n        this.logger.setSessionInfo(this.stateCenter.appid, '', '', this.stateCenter.idName, '', zego_entity_1.PROTO_VERSION);\n        if (option.logUrl) {\n            this.logger.openLogServer(option.logUrl);\n        }\n        this.logger.debug('zb.cm.cf call success');\n        return true;\n    };\n    //房间相关---登录，房间人员变化\n    BaseCenter.prototype.login = function (roomId, token, param) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (typeof roomId !== 'string' || roomId == '') {\n                _this.logger.error('zb.rh.lg roomid error');\n                reject(zego_error_1.commonErrorList.PARAM);\n                return;\n            }\n            if (typeof token !== 'string' || token == '') {\n                _this.logger.error('zb.rh.lg token error');\n                reject(zego_error_1.commonErrorList.PARAM);\n                return;\n            }\n            _this.roomHandler.login(roomId, token, param && param.authToken ? param.authToken : '', resolve, reject);\n        });\n    };\n    BaseCenter.prototype.logout = function () {\n        return this.roomHandler.logout();\n    };\n    BaseCenter.prototype.setUserStateUpdate = function (update) {\n        if (typeof update !== 'boolean') {\n            console.error('setUserStateUpdate param error');\n            return;\n        }\n        this.roomHandler.setUserStateUpdate(update);\n    };\n    BaseCenter.prototype.sendCustomCommand = function (dstMembers, customContent, success, error) {\n        if (typeof customContent !== 'string' && typeof customContent !== 'object') {\n            this.logger.error('zb.mh.scc params error');\n            return false;\n        }\n        return this.messageHandler.sendCustomCommand(dstMembers, customContent, success, error);\n    };\n    BaseCenter.prototype.sendRoomMsg = function (msgCategory, msgContent) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.messageHandler.sendRoomMsg(msgCategory, msgContent, resolve, reject);\n        });\n    };\n    BaseCenter.prototype.sendReliableMessage = function (type, data, success, error) {\n        this.messageHandler.sendReliableMessage(type, data, success, error);\n    };\n    BaseCenter.prototype.sendBigRoomMessage = function (category, type, content, success, error) {\n        this.messageHandler.sendBigRoomMessage(category, type, content, success, error);\n    };\n    BaseCenter.prototype.sendRelayMessage = function (type, data, success, error) {\n        this.messageHandler.sendRelayMessage(type, data, success, error);\n    };\n    BaseCenter.prototype.requestJoinLive = function (destIdName, success, error, resultCallback) {\n        return this.liveHandler.requestJoinLive(destIdName, success, error, resultCallback);\n    };\n    BaseCenter.prototype.inviteJoinLive = function (destIdName, success, error, resultCallback) {\n        return this.liveHandler.inviteJoinLive(destIdName, success, error, resultCallback);\n    };\n    BaseCenter.prototype.endJoinLive = function (destIdName, success, error) {\n        return this.liveHandler.endJoinLive(destIdName, success, error);\n    };\n    BaseCenter.prototype.respondJoinLive = function (requestId, respondResult, success, error) {\n        return this.liveHandler.respondJoinLive(requestId, respondResult, success, error);\n    };\n    /*\n     *    \"zc.p.ums\": \"ZegoClient.updateMixStream\",//更新混流信令\n     */\n    BaseCenter.prototype.startMixStream = function (mixStreamConfig) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.streamHandler.updateMixStream(mixStreamConfig, resolve, reject);\n        });\n    };\n    /*\n     *    \"zc.p.sms\": \"ZegoClient.stopMixStream\", //停止混流信令\n     */\n    BaseCenter.prototype.stopMixStream = function (taskId) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.streamHandler.stopMixStream(taskId, resolve, reject);\n        });\n    };\n    BaseCenter.prototype.publishTarget = function (cdnPushConfig, success, error) {\n        return this.streamHandler.publishTarget(cdnPushConfig, success, error);\n    };\n    BaseCenter.prototype.updateStreamExtraInfo = function (streamid, extraInfo) {\n        return this.streamHandler.updateStreamExtraInfo(streamid, extraInfo);\n    };\n    //type: { start: 0, stop: 1}\n    BaseCenter.prototype.on = function (listener, callBack) {\n        if (!this.stateCenter.listenerList[listener]) {\n            this.logger.error('zc.o listener wrong');\n            return;\n        }\n        this.stateCenter.listenerList[listener].indexOf(callBack) == -1 &&\n            this.stateCenter.listenerList[listener].push(callBack);\n    };\n    BaseCenter.prototype.actionListener = function (listener) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        this.stateCenter.listenerList[listener].forEach(function (func) {\n            func.apply(void 0, args);\n        });\n    };\n    BaseCenter.getCurrentVersion = function () {\n        return zego_entity_1.PROTO_VERSION;\n    };\n    return BaseCenter;\n}(common_1.Common));\nexports.BaseCenter = BaseCenter;\n\n\n/***/ }),\n\n/***/ \"./sdk/common/clientBase/liveHandler.ts\":\n/*!**********************************************!*\\\n  !*** ./sdk/common/clientBase/liveHandler.ts ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zego_entity_1 = __webpack_require__(/*! ../zego.entity */ \"./sdk/common/zego.entity.ts\");\nvar LiveHandler = /** @class */ (function () {\n    function LiveHandler(logger, stateCenter, socketCenter) {\n        this.logger = logger;\n        this.socketCenter = socketCenter;\n        this.stateCenter = stateCenter;\n    }\n    /*\n     *    \"zb.lh.rjl\": \"ZegoClient.base.LiveHandler.requestJoinLive\",\n     */\n    LiveHandler.prototype.requestJoinLive = function (destIdName, success, error, resultCallback) {\n        this.logger.debug('zb.lh.rjl call');\n        var requestId = this.stateCenter.getRequestId();\n        var signalCmd = this.stateCenter.getSignalCmdContent(requestId, destIdName);\n        if (resultCallback == undefined) {\n            return false;\n        }\n        this.stateCenter.joinLiveCallbackMap[requestId] = resultCallback;\n        this.sendSignalCmd(zego_entity_1.ENUM_SIGNAL_SUB_CMD.joinLiveRequest, signalCmd, destIdName, success, error);\n        return true;\n    };\n    /*\n     *    \"zb.lh.ijl\": \"ZegoClient.base.LiveHandler.inviteJoinLive\",\n     */\n    LiveHandler.prototype.inviteJoinLive = function (destIdName, success, error, resultCallback) {\n        this.logger.debug('zb.lh.ijl call');\n        var requestId = this.stateCenter.getRequestId();\n        var signalCmd = this.stateCenter.getSignalCmdContent(requestId, destIdName);\n        if (resultCallback == undefined) {\n            return false;\n        }\n        this.stateCenter.joinLiveCallbackMap[requestId] = resultCallback;\n        this.sendSignalCmd(zego_entity_1.ENUM_SIGNAL_SUB_CMD.joinLiveInvite, signalCmd, destIdName, success, error);\n        return true;\n    };\n    /*\n     *    \"zb.lh.ejl\": \"ZegoClient.base.LiveHandler.endJoinLive\",\n     */\n    LiveHandler.prototype.endJoinLive = function (destIdName, success, error) {\n        this.logger.debug('zb.lh.ejl call');\n        var requestId = this.stateCenter.getRequestId();\n        var signalCmd = this.stateCenter.getSignalCmdContent(requestId, destIdName);\n        this.sendSignalCmd(zego_entity_1.ENUM_SIGNAL_SUB_CMD.joinLiveStop, signalCmd, destIdName, success, error);\n        return true;\n    };\n    /*\n     *    \"zb.lh.rpjl\": \"ZegoClient.base.LiveHandler.respondJoinLive\",\n     */\n    LiveHandler.prototype.respondJoinLive = function (requestId, respondResult, success, error) {\n        this.logger.debug('zb.lh.rpjl call');\n        var dest_id_name = this.stateCenter.joinLiveRequestMap[requestId];\n        if (!dest_id_name) {\n            this.logger.info('zb.lh.rpjl no dest id name');\n            return false;\n        }\n        var result = 0;\n        if (respondResult === true)\n            result = 1;\n        var signalCmd = this.stateCenter.getSignalCmdContent(requestId, dest_id_name, result);\n        this.sendSignalCmd(zego_entity_1.ENUM_SIGNAL_SUB_CMD.joinLiveResult, signalCmd, dest_id_name, success, error);\n        delete this.stateCenter.joinLiveRequestMap[requestId];\n        return true;\n    };\n    /*\n     *    \"zb.lh.ssc\": \"ZegoClient.base.LiveHandler.sendSignalCmd\",\n     */\n    //连麦信令\n    LiveHandler.prototype.sendSignalCmd = function (cmd, signalMsg, dest_id_name, success, error) {\n        this.logger.debug('zb.lh.ssc call');\n        if (!this.stateCenter.isLogin()) {\n            this.logger.error('zb.lh.ssc state error');\n            return;\n        }\n        this.logger.debug('zb.lh.ssc send signal cmd ' + cmd);\n        var bodyData = {\n            sub_cmd: cmd,\n            signal_msg: signalMsg,\n            dest_id_name: [dest_id_name],\n        };\n        this.socketCenter.sendMessage('signal', bodyData, success, error);\n        this.logger.info('zb.lh.ssc call success');\n    };\n    /*\n     *    \"zb.lh.hpsm\": \"ZegoClient.base.LiveHandler.handlePushSignalMsg\",\n     */\n    // 连麦信令push\n    LiveHandler.prototype.handlePushSignalMsg = function (msg) {\n        if (!this.stateCenter.isLogin()) {\n            this.logger.warn('zb.lh.hpsm not login');\n            return;\n        }\n        var signalMsg = JSON.parse(msg.body.signal_msg);\n        this.logger.debug('zb.lh.hpcm hpsm= ', signalMsg);\n        switch (msg.body.sub_cmd) {\n            case zego_entity_1.ENUM_PUSH_SIGNAL_SUB_CMD.pushJoinLiveRequest:\n                this.handlePushJoinLiveRequestMsg(signalMsg);\n                break;\n            case zego_entity_1.ENUM_PUSH_SIGNAL_SUB_CMD.pushJoinLiveResult:\n                this.handlePushJoinLiveResultMsg(signalMsg);\n                break;\n            case zego_entity_1.ENUM_PUSH_SIGNAL_SUB_CMD.pushJoinLiveInvite:\n                this.handlePushJoinLiveInviteMsg(signalMsg);\n                break;\n            case zego_entity_1.ENUM_PUSH_SIGNAL_SUB_CMD.pushJoinLiveStop:\n                this.handlePushJoinLiveStopMsg(signalMsg);\n        }\n        this.logger.debug('zb.lh.hpsm call end');\n    };\n    /*\n     *    \"zb.lh.hpjlrm\": \"ZegoClient.base.LiveHandler.handlePushJoinLiveRequestMsg\",\n     */\n    //请求连麦push\n    LiveHandler.prototype.handlePushJoinLiveRequestMsg = function (signalMsg) {\n        var requestId = signalMsg.request_id;\n        if (typeof requestId !== 'string') {\n            this.logger.error('zb.lh.hpjlrm no requestId');\n            return;\n        }\n        var dest_id_name = signalMsg.from_userid;\n        if (typeof dest_id_name !== 'string') {\n            this.logger.error('zb.lh.hpjlrm no from user');\n            return;\n        }\n        this.stateCenter.joinLiveRequestMap[requestId] = dest_id_name;\n        this.logger.info('zb.lh.hpjlrm onRecvJoinLiveRequest ' + dest_id_name);\n        this.onRecvJoinLiveRequest(requestId, signalMsg.from_userid, signalMsg.from_username, signalMsg.room_id);\n    };\n    LiveHandler.prototype.onRecvJoinLiveRequest = function (requestId, from_userid, from_username, roomid) { };\n    /*\n     *    \"zb.lh.hpjlim\": \"ZegoClient.base.LiveHandler.handlePushJoinLiveInviteMsg\",\n     */\n    LiveHandler.prototype.handlePushJoinLiveInviteMsg = function (signalMsg) {\n        var requestId = signalMsg.request_id;\n        if (typeof requestId !== 'string') {\n            this.logger.error('zb.lh.hpjlim no requestId');\n            return;\n        }\n        var dest_id_name = signalMsg.from_userid;\n        if (typeof dest_id_name !== 'string') {\n            this.logger.error('zb.lh.hpjlim no from user');\n            return;\n        }\n        this.stateCenter.joinLiveRequestMap[requestId] = dest_id_name;\n        this.logger.info('zb.lh.hpjlim onRecvInviteJoinLiveRequest ' + dest_id_name);\n        this.onRecvInviteJoinLiveRequest(requestId, signalMsg.from_userid, signalMsg.from_username, signalMsg.room_id);\n    };\n    LiveHandler.prototype.onRecvInviteJoinLiveRequest = function (requestId, from_userid, from_username, roomid) { };\n    /*\n     *    \"zb.lh.hpjlim\": \"ZegoClient.base.LiveHandler.handlePushJoinLiveResultMsg\",\n     */\n    LiveHandler.prototype.handlePushJoinLiveResultMsg = function (signalMsg) {\n        var requestId = signalMsg.request_id;\n        if (typeof requestId !== 'string') {\n            this.logger.error('zb.lh.hpjlrm no requestId');\n            return;\n        }\n        var result = signalMsg.result;\n        if (result == undefined) {\n            this.logger.info('zb.lh.hpjlrm no result');\n            return;\n        }\n        var respondResult = result == 1 ? true : false;\n        if (this.stateCenter.joinLiveCallbackMap[requestId]) {\n            var result_callback = this.stateCenter.joinLiveCallbackMap[requestId];\n            if (!result_callback) {\n                this.logger.info('hpjlrm.o no callback');\n                return;\n            }\n            this.logger.info('zb.lh.hpjlrm joinLiveRequest/invite result ' + respondResult);\n            delete this.stateCenter.joinLiveCallbackMap[requestId];\n            result_callback(respondResult, signalMsg.from_userid, signalMsg.from_username);\n        }\n    };\n    /*\n     *    \"zb.lh.hpjlsm\": \"ZegoClient.base.LiveHandler.handlePushJoinLiveStopMsg\",\n     */\n    LiveHandler.prototype.handlePushJoinLiveStopMsg = function (signalMsg) {\n        var requestId = signalMsg.request_id;\n        if (typeof requestId !== 'string') {\n            this.logger.error('zb.lh.hpjlsm no requestId');\n            return;\n        }\n        this.logger.info('zb.lh.hpjlsm onRecvEndJoinLiveCommand ' + signalMsg.from_userid);\n        this.onRecvEndJoinLiveCommand(requestId, signalMsg.from_userid, signalMsg.from_username, signalMsg.room_id);\n    };\n    LiveHandler.prototype.onRecvEndJoinLiveCommand = function (requestId, from_userid, from_username, roomid) { };\n    return LiveHandler;\n}());\nexports.LiveHandler = LiveHandler;\n\n\n/***/ }),\n\n/***/ \"./sdk/common/clientBase/messageHandler.ts\":\n/*!*************************************************!*\\\n  !*** ./sdk/common/clientBase/messageHandler.ts ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zego_entity_1 = __webpack_require__(/*! ../zego.entity */ \"./sdk/common/zego.entity.ts\");\nvar client_util_1 = __webpack_require__(/*! ../../util/client-util */ \"./sdk/util/client-util.ts\");\nvar MessageHandler = /** @class */ (function () {\n    function MessageHandler(logger, stateCenter, socketCenter) {\n        this.logger = logger;\n        this.socketCenter = socketCenter;\n        this.stateCenter = stateCenter;\n    }\n    /*\n     *    \"zb.mh.scc\": \"ZegoClient.base.MessageHandler.sendCustomCommand\",\n     */\n    MessageHandler.prototype.sendCustomCommand = function (dstMembers, customContent, success, error) {\n        var _this = this;\n        this.logger.debug('zb.mh.scc call');\n        if (!this.stateCenter.isLogin()) {\n            this.logger.error('zb.mh.scc state error');\n            return false;\n        }\n        if (!dstMembers) {\n            this.logger.error('zb.mh.scc dstMembers error');\n            return false;\n        }\n        var customContent_send = {\n            from_userid: this.stateCenter.idName,\n            from_username: this.stateCenter.nickName,\n            request_id: this.stateCenter.getRequestId(),\n            custom_content: customContent || '',\n            room_id: this.stateCenter.roomid,\n        };\n        var bodyData = {\n            dest_id_name: dstMembers,\n            custom_msg: JSON.stringify(customContent_send),\n        };\n        if (!client_util_1.ClientUtil.checkCustomCommandParam(bodyData)) {\n            this.logger.info('zb.mh.scc param error');\n            return false;\n        }\n        // 发送消息\n        this.socketCenter.registerRouter('custommsg', function (msg) {\n            _this.handleSendCustomMsgRsp(msg);\n        });\n        this.socketCenter.sendCustomMessage('custommsg', bodyData, success, error);\n        this.logger.info('zb.mh.scc call success');\n        return true;\n    };\n    /*\n     *    \"zb.mh.hscmrcall\": \"ZegoClient.base.MessageHandler.handleSendCustomMsgRsp\",\n     */\n    MessageHandler.prototype.handleSendCustomMsgRsp = function (msg) {\n        this.logger.debug('zb.mh.hscmrcall');\n        var sendDataNode = this.stateCenter.sendDataMap[msg.header.seq];\n        var sendData;\n        if (sendDataNode != null) {\n            sendData = sendDataNode._data;\n            if (sendData.data.header.cmd != 'custommsg') {\n                this.logger.error('zb.mh.hscmrcmd wrong' + sendData.data.header.cmd);\n            }\n            else {\n                if (msg.body.err_code === 0) {\n                    if (sendData.success != null) {\n                        sendData.success(msg.header.seq, sendData.data.body.custom_msg);\n                    }\n                }\n                else {\n                    if (sendData.error != null) {\n                        sendData.error(client_util_1.ClientUtil.getServerError(msg.body.err_code), msg.header.seq, sendData.data.body.custom_msg);\n                    }\n                }\n            }\n            delete this.stateCenter.sendDataMap[msg.header.seq];\n            this.stateCenter.sendDataList.remove(sendDataNode);\n        }\n        else {\n            this.logger.error('zb.mh.hscmrno found seq=' + msg.header.seq);\n        }\n        this.logger.debug('zb.mh.hscmr  call success');\n    };\n    /*\n     *    \"zb.mh.hpcm\": \"ZegoClient.base.MessageHandler.handlePushCustomMsg\",\n     */\n    MessageHandler.prototype.handlePushCustomMsg = function (msg) {\n        var submsg = JSON.parse(msg.body.custommsg);\n        this.logger.debug('zb.mh.hpcm submsg=', submsg);\n        this.onRecvCustomCommand(submsg.from_userid, submsg.from_username, submsg.custom_content);\n    };\n    MessageHandler.prototype.onRecvCustomCommand = function (from_userid, from_idname, custom_content) { };\n    /*\n     *    \"zb.mh.srm\": \"ZegoClient.base.MessageHandler.sendRoomMsg\",\n     */\n    MessageHandler.prototype.sendRoomMsg = function (msg_category, msg_content, success, error) {\n        var _this = this;\n        this.logger.debug('zb.mh.srm call');\n        // 不是处于登录状态\n        if (!this.stateCenter.isLogin()) {\n            this.logger.error('zb.mh.srm state error');\n            return;\n        }\n        var timestamp = Date.parse(new Date() + '');\n        if (this.stateCenter.sendRoomMsgTime > 0 &&\n            this.stateCenter.sendRoomMsgTime + this.stateCenter.SendRoomMsgInterval > timestamp) {\n            this.logger.info('zb.mh.srm freq error');\n            if (error) {\n                error(zego_entity_1.sdkErrorList.FREQ_LIMITED, 0, msg_category, msg_content);\n            }\n            return;\n        }\n        this.stateCenter.sendRoomMsgTime = timestamp;\n        this.logger.debug('zb.mh.srm send fetch request');\n        var bodyData = {\n            msg_category: msg_category,\n            msg_type: 1,\n            msg_content: msg_content,\n        };\n        // 发送消息\n        this.socketCenter.registerRouter('im_chat', function (msg) {\n            _this.handleSendRoomMsgRsp(msg);\n        });\n        this.socketCenter.sendCustomMessage('im_chat', bodyData, function () {\n            var results = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                results[_i] = arguments[_i];\n            }\n            var seq = results[0], msgId = results[1], msg_category = results[2], msg_type = results[3], msg_content = results[4];\n            success({ seq: seq, msgId: msgId, msg_category: msg_category, msg_type: msg_type, msg_content: msg_content });\n        }, function () {\n            var results = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                results[_i] = arguments[_i];\n            }\n            var err = results[0], seq = results[1], msg_category = results[2], msg_type = results[3], msg_content = results[4];\n            error({ err: err, seq: seq, msg_category: msg_category, msg_type: msg_type, msg_content: msg_content });\n        });\n        this.logger.info('zb.mh.srm call success');\n    };\n    /*\n     *    \"zb.mh.hsrmr\": \"ZegoClient.base.MessageHandler.handleSendRoomMsgRsp\",\n     */\n    MessageHandler.prototype.handleSendRoomMsgRsp = function (msg) {\n        this.logger.debug('zb.mh.hsrmr call');\n        var sendDataNode = this.stateCenter.sendDataMap[msg.header.seq];\n        var sendData;\n        if (sendDataNode != null) {\n            sendData = sendDataNode._data;\n            if (sendData.data.header.cmd != 'im_chat') {\n                this.logger.error('zb.mh.hsrmr cmd wrong' + sendData.data.header.cmd);\n            }\n            else {\n                if (msg.body.err_code === 0) {\n                    if (sendData.success) {\n                        sendData.success(msg.header.seq, msg.body.msg_id, sendData.data.body.msg_category, sendData.data.body.msg_type, sendData.data.body.msg_content);\n                    }\n                }\n                else {\n                    if (sendData.error) {\n                        sendData.error(client_util_1.ClientUtil.getServerError(msg.body.err_code), msg.header.seq, sendData.data.body.msg_category, sendData.data.body.msg_type, sendData.data.body.msg_content);\n                    }\n                }\n            }\n            delete this.stateCenter.sendDataMap[msg.header.seq];\n            this.stateCenter.sendDataList.remove(sendDataNode);\n        }\n        else {\n            this.logger.error('hzb.mh.hsrmr no found seq=' + msg.header.seq);\n        }\n        this.logger.info('zb.mh.hsrmr call success');\n    };\n    MessageHandler.prototype.onRecvRoomMsg = function (chat_data, server_msg_id, ret_msg_id) { };\n    /*\n     *    \"zb.mh.srirm\": \"ZegoClient.base.MessageHandler.sendReliableMessage\",\n     */\n    MessageHandler.prototype.sendReliableMessage = function (type, data, success, error) {\n        this.logger.debug('zb.mh.srirm call');\n        if (!this.stateCenter.transSeqMap[type]) {\n            this.stateCenter.transSeqMap[type] = {\n                seq: 0,\n            };\n        }\n        var body = {\n            trans_type: type,\n            trans_data: data,\n            trans_local_seq: this.stateCenter.transSeqMap[type].seq,\n            trans_channel: 'clt',\n        };\n        this.socketCenter.sendMessage('trans', body, success, error);\n    };\n    /*\n     *    \"zb.mh.sbim\": \"ZegoClient.base.MessageHandler.sendBigRoomMessage\",\n     */\n    MessageHandler.prototype.sendBigRoomMessage = function (category, type, content, success, error) {\n        var _this = this;\n        this.logger.debug('zb.mh.sbim call');\n        var timeWindow = this.stateCenter.bigimTimeWindow;\n        var offset = this.stateCenter.serverTimeOffset;\n        var serverTime = new Date().getTime() + offset;\n        var clientId = (++this.stateCenter.cmdSeq).toString();\n        if (success == undefined) {\n            success = null;\n        }\n        if (error == undefined) {\n            error = null;\n        }\n        this.stateCenter.bigImCallbackMap[clientId] = {\n            success: success,\n            error: error,\n        };\n        if (timeWindow == 0) {\n            var bodyData = {\n                msg_category: category,\n                msg_type: type,\n                msg_content: content,\n                bigmsg_client_id: clientId,\n            };\n            this.logger.debug('zb.mh.sbim no time window');\n            this.sendBigRoomMessageInternal([bodyData], function (msg) {\n                _this.handleBigImMsgRsp(msg);\n            }, error);\n        }\n        else {\n            var currentIndex = Math.floor(serverTime / timeWindow);\n            this.logger.debug('currentIndex ' + currentIndex + ' lastTimeIndex ' + this.stateCenter.bigImLastTimeIndex);\n            if (this.stateCenter.bigImLastTimeIndex < currentIndex && this.stateCenter.bigImMessageList.length == 0) {\n                this.stateCenter.bigImLastTimeIndex = currentIndex;\n                var oneData = {\n                    msg_category: category,\n                    msg_type: type,\n                    msg_content: content,\n                    bigmsg_client_id: clientId,\n                };\n                this.sendBigRoomMessageInternal([oneData], function (msg) {\n                    _this.handleBigImMsgRsp(msg);\n                }, error);\n            }\n            else {\n                this.stateCenter.bigImMessageList.push({\n                    msg_category: category,\n                    msg_type: type,\n                    msg_content: content,\n                    bigmsg_client_id: clientId,\n                });\n                if (this.stateCenter.bigImMessageList.length == 1) {\n                    this.setBigImTimer(offset, timeWindow);\n                }\n            }\n        }\n    };\n    /*\n     *    \"zb.mh.hpmmnot\": \"ZegoClient.base.MessageHandler.handlePushMergeMsg\",\n     */\n    MessageHandler.prototype.handlePushMergeMsg = function (msg) {\n        if (!this.stateCenter.isLogin()) {\n            this.logger.error('zb.mh.hpmmnot login');\n            return;\n        }\n        for (var i = 0; i < msg.body.messages.length; i++) {\n            if (msg.body.messages[i].sub_cmd === 14001) {\n                this.handlePushBigRooMsg(msg.body.messages[i].msg_body);\n            }\n        }\n        this.logger.debug('zb.mh.hpmm call success');\n    };\n    /*\n     *    \"zb.mh.hpbrm\": \"ZegoClient.base.MessageHandler.handlePushBigRooMsg\",\n     */\n    MessageHandler.prototype.handlePushBigRooMsg = function (bodyString) {\n        var messageBody;\n        //messageBody json\n        try {\n            messageBody = JSON.parse(bodyString);\n        }\n        catch (e) {\n            this.logger.warn('zb.mh.hpbrm parse json error');\n            return;\n        }\n        if (!messageBody) {\n            this.logger.warn(\"zb.mh.hpbrm cann't find message body\");\n            return;\n        }\n        var roomId = messageBody.room_id;\n        var pushData = [];\n        for (var i = 0; i < messageBody.msg_data.length; i++) {\n            var message = messageBody.msg_data[i];\n            var idName = message.id_name;\n            if (idName == this.stateCenter.idName) {\n                this.logger.debug('zb.mh.hpbrm self message');\n                continue;\n            }\n            pushData.push({\n                idName: message.id_name,\n                nickName: message.nick_name,\n                messageId: message.bigmsg_id,\n                category: message.msg_category,\n                type: message.msg_type,\n                content: message.msg_content,\n                time: message.send_time,\n            });\n        }\n        if (pushData.length == 0) {\n            this.logger.debug('zb.mh.hpbrm no other pushData except self');\n        }\n        else {\n            this.onRecvBigRoomMessage(pushData, roomId);\n        }\n        this.logger.debug('zb.mh.hpbrm call success');\n    };\n    MessageHandler.prototype.onRecvBigRoomMessage = function (messageList, roomId) { };\n    /*\n     *    \"zb.mh.sbim\": \"ZegoClient.base.MessageHandler.sendBigRoomMessageInternal\",\n     */\n    MessageHandler.prototype.sendBigRoomMessageInternal = function (msgs, success, error) {\n        this.logger.debug('zb.mh.sbim call');\n        var bodyData = {\n            msgs: msgs,\n        };\n        this.socketCenter.sendMessage('bigim_chat', bodyData, success, error);\n    };\n    /*\n     *    \"zb.mh.hbmr\": \"ZegoClient.base.MessageHandler.handleBigImMsgRsp\",\n     */\n    MessageHandler.prototype.handleBigImMsgRsp = function (msg) {\n        if (!this.stateCenter.isLogin()) {\n            this.logger.info('zb.mh.hbmr not login');\n            return;\n        }\n        if (this.stateCenter.bigimTimeWindow != msg.body.bigim_time_window) {\n            this.stateCenter.bigimTimeWindow = msg.body.bigim_time_window;\n        }\n        for (var i = 0; i < msg.body.msgs.length; i++) {\n            var clientId = msg.body.msgs[i].bigmsg_client_id;\n            var msgId = msg.body.msgs[i].bigmsg_id;\n            if (this.stateCenter.bigImCallbackMap[clientId]) {\n                var success = this.stateCenter.bigImCallbackMap[clientId].success;\n                if (success != null) {\n                    success(msg.header.seq, msgId);\n                }\n                delete this.stateCenter.bigImCallbackMap[clientId];\n            }\n        }\n    };\n    /*\n     *    \"zb.mh.sbt\": \"ZegoClient.base.MessageHandler.setBigImTimer\",\n     */\n    MessageHandler.prototype.setBigImTimer = function (offset, timeWindow) {\n        var _this = this;\n        var serverTimestamp = new Date().getTime() + offset;\n        var residue = timeWindow - (serverTimestamp % timeWindow);\n        var interval = client_util_1.ClientUtil.generateRandumNumber(timeWindow) + residue;\n        this.logger.info('zb.mh.sbt setTimer ' + interval);\n        this.stateCenter.bigImTimer = setTimeout(function () {\n            _this.onBigImTimer();\n        }, interval);\n    };\n    MessageHandler.prototype.onBigImTimer = function () {\n        var _this = this;\n        var serverTimestamp = new Date().getTime() + this.stateCenter.serverTimeOffset;\n        this.stateCenter.bigImLastTimeIndex = Math.floor(serverTimestamp / this.stateCenter.bigimTimeWindow);\n        var bodyData = [];\n        var requestList = [];\n        for (var i = 0; i < this.stateCenter.bigImMessageList.length; i++) {\n            if (i >= 20) {\n                break;\n            }\n            var info = this.stateCenter.bigImMessageList[i];\n            bodyData.push({\n                msg_category: info.msg_category,\n                msg_type: info.msg_type,\n                msg_content: info.msg_content,\n                bigmsg_client_id: info.bigmsg_client_id,\n            });\n            requestList.push(info.bigmsg_client_id);\n        }\n        if (this.stateCenter.bigImMessageList.length > 20) {\n            this.stateCenter.bigImMessageList.splice(0, 20);\n        }\n        else {\n            this.stateCenter.bigImMessageList = [];\n        }\n        this.sendBigRoomMessageInternal(bodyData, function (msg) {\n            _this.handleBigImMsgRsp(msg);\n        }, function (err, seq) {\n            for (var i = 0; i < requestList.length; i++) {\n                var clientId = requestList[i];\n                var callbackInfo = _this.stateCenter.bigImCallbackMap[clientId];\n                if (callbackInfo) {\n                    if (callbackInfo.error != null) {\n                        callbackInfo.error(err, seq);\n                    }\n                    delete _this.stateCenter.bigImCallbackMap[clientId];\n                }\n            }\n        });\n        clearTimeout(this.stateCenter.bigImTimer);\n        this.stateCenter.bigImTimer = null;\n        if (this.stateCenter.bigImMessageList.length > 0) {\n            this.setBigImTimer(this.stateCenter.serverTimeOffset, this.stateCenter.bigimTimeWindow);\n        }\n    };\n    /*\n     *    \"zb.mh.srlm\": \"ZegoClient.base.MessageHandler.sendRelayMessage\",\n     */\n    MessageHandler.prototype.sendRelayMessage = function (type, data, success, error) {\n        this.logger.debug('zb.mh.srm call');\n        var timeWindow = this.stateCenter.datiTimeWindow;\n        var offset = this.stateCenter.serverTimeOffset;\n        if (timeWindow > 0) {\n            this.stateCenter.realyMessageList.push({\n                type: type,\n                data: data,\n                success: success,\n                error: error,\n            });\n            if (this.stateCenter.realyMessageList.length == 1) {\n                this.setRelayTimer(offset, timeWindow);\n            }\n        }\n        else {\n            this.sendRelayMessageInternal(type, data, success, error);\n        }\n    };\n    /*\n     *    \"zb.mh.srlmi\": \"ZegoClient.base.MessageHandler.sendRelayMessageInternal\",\n     */\n    MessageHandler.prototype.sendRelayMessageInternal = function (type, data, success, error) {\n        this.logger.debug('zb.mh.srmi call');\n        var bodyData = {\n            relay_type: type,\n            relay_data: data,\n        };\n        this.socketCenter.sendMessage('relay', bodyData, success, error);\n    };\n    /*\n     *    \"zb.mh.srt\": \"ZegoClient.base.MessageHandler.setRelayTimer\",\n     */\n    MessageHandler.prototype.setRelayTimer = function (offset, timeWindow) {\n        var _this = this;\n        var serverTimestamp = new Date().getTime() + offset;\n        var residue = timeWindow * 2 - (serverTimestamp % timeWindow);\n        var interval = client_util_1.ClientUtil.generateRandumNumber(residue);\n        this.logger.info('zb.mh.srt setTimer ' + interval);\n        this.stateCenter.relayTimer = setTimeout(function () {\n            _this.onRelayTimer();\n        }, interval);\n    };\n    /*\n     *    \"zb.mh.ort\": \"ZegoClient.base.MessageHandler.onRelayTimer\",\n     */\n    MessageHandler.prototype.onRelayTimer = function () {\n        if (this.stateCenter.realyMessageList.length == 0) {\n            this.logger.info('zb.mh.ort no relay data');\n            return;\n        }\n        var relayInfo = this.stateCenter.realyMessageList[0];\n        this.sendRelayMessageInternal(relayInfo.type, relayInfo.data, relayInfo.success, relayInfo.error);\n        clearTimeout(this.stateCenter.relayTimer);\n        this.stateCenter.relayTimer = null;\n        this.stateCenter.realyMessageList.splice(0, 1);\n        if (this.stateCenter.realyMessageList.length > 0) {\n            this.setRelayTimer(this.stateCenter.serverTimeOffset, this.stateCenter.datiTimeWindow);\n        }\n    };\n    /*\n     *    \"zb.mh.hptr\": \"ZegoClient.base.MessageHandler.handlePushTransMsg\",\n     */\n    MessageHandler.prototype.handlePushTransMsg = function (msg) {\n        if (!this.stateCenter.isLogin()) {\n            this.logger.error('zb.mh.hptr not login');\n            return;\n        }\n        var type = msg.body.trans_type;\n        var seq = msg.body.trans_seq;\n        if (!this.stateCenter.transSeqMap[type]) {\n            this.stateCenter.transSeqMap[type] = {\n                seq: seq,\n            };\n        }\n        else {\n            this.stateCenter.transSeqMap[type].seq = seq;\n        }\n        if (msg.body.trans_user_idname != this.stateCenter.idName) {\n            this.onRecvReliableMessage(type, seq, msg.body.trans_data);\n        }\n        else {\n            this.logger.debug('zb.mh.hptr receive self trans message');\n        }\n        this.logger.info('zb.mh.hptr trans ' + type + ' seq ' + seq);\n    };\n    MessageHandler.prototype.onRecvReliableMessage = function (type, seq, data) { };\n    return MessageHandler;\n}());\nexports.MessageHandler = MessageHandler;\n\n\n/***/ }),\n\n/***/ \"./sdk/common/clientBase/roomHandler.ts\":\n/*!**********************************************!*\\\n  !*** ./sdk/common/clientBase/roomHandler.ts ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zego_entity_1 = __webpack_require__(/*! ../zego.entity */ \"./sdk/common/zego.entity.ts\");\nvar client_util_1 = __webpack_require__(/*! ../../util/client-util */ \"./sdk/util/client-util.ts\");\nvar zego_error_1 = __webpack_require__(/*! ../zego.error */ \"./sdk/common/zego.error.ts\");\nvar RoomHandler = /** @class */ (function () {\n    function RoomHandler(logger, stateCenter, socketCenter) {\n        this.logger = logger;\n        this.socketCenter = socketCenter;\n        this.stateCenter = stateCenter;\n    }\n    /*\n     *    \"zb.rh.srs\": \"ZegoClient.base.RoomHandler.setRunState\",\n     */\n    RoomHandler.prototype.setRunState = function (newRunState) {\n        this.logger.debug('zb.rh.srs old=' + this.stateCenter.runState + ', new=' + newRunState);\n        this.stateCenter.lastRunState = this.stateCenter.runState;\n        this.stateCenter.runState = newRunState;\n    };\n    /*\n     *    \"zb.rh.rtl\": \"ZegoClient.base.RoomHandler.resetTryLogin\",\n     */\n    RoomHandler.prototype.resetTryLogin = function () {\n        this.logger.debug('zb.rh.rtl call');\n        clearTimeout(this.stateCenter.tryLoginTimer);\n        this.stateCenter.tryLoginTimer = null;\n        this.stateCenter.tryLoginCount = 0;\n        this.logger.debug('zb.rh.rtl call success');\n    };\n    RoomHandler.prototype.resetBigRoomInfo = function () {\n        //清除trans信令信息\n        this.stateCenter.transSeqMap = {};\n        //清除relay信令信息\n        this.stateCenter.realyMessageList = [];\n        if (this.stateCenter.relayTimer) {\n            clearTimeout(this.stateCenter.relayTimer);\n            this.stateCenter.relayTimer = null;\n        }\n        //清除大房间消息\n        this.stateCenter.bigImLastTimeIndex = 0;\n        this.stateCenter.bigIMmessageList = [];\n        this.stateCenter.bigImCallbackMap = {};\n        if (this.stateCenter.bigImTimer) {\n            clearTimeout(this.stateCenter.bigImTimer);\n            this.stateCenter.bigImTimer = null;\n        }\n        this.stateCenter.serverTimeOffset = 0;\n        this.stateCenter.datiTimeWindow = 0;\n        this.stateCenter.bigimTimeWindow = 0;\n    };\n    /*\n     *    \"zb.rh.rr\": \"ZegoClient.base.RoomHandler.resetRoom\",\n     */\n    RoomHandler.prototype.resetRoom = function (roomid) {\n        var _this = this;\n        this.logger.debug('zb.rh.rr call');\n        // 清除尝试登录计时器对象\n        this.resetTryLogin();\n        this.resetRoomCallBack();\n        // 清除流列表\n        this.stateCenter.streamList = [];\n        this.stateCenter.streamQuerying = false;\n        this.stateCenter.publishStreamList = {};\n        // 清除连麦信令\n        this.stateCenter.joinLiveCallbackMap = {};\n        this.stateCenter.joinLiveRequestMap = {};\n        // 清除请求url信息\n        this.stateCenter.streamUrlMap = {};\n        //清除大房间消息\n        this.resetBigRoomInfo();\n        this.stateCenter.cmdCallback = {};\n        // 防止多次重置时，发送多次消息\n        this.logger.debug('zb.rh.rr call send logout=', this.stateCenter.sessionid);\n        if (this.stateCenter.sessionid !== '0') {\n            var bodyData = {\n                reserve: 0,\n            };\n            this.socketCenter.registerRouter('logout', function (msg) {\n                _this.handleLogoutRsp(msg);\n            });\n            this.socketCenter.sendMessage('logout', bodyData);\n        }\n        this.socketCenter.closeSocket();\n        //setTimeout( () =>{\n        this.setRunState(zego_entity_1.ENUM_RUN_STATE.logout);\n        this.stateCenter.userid = '';\n        this.stateCenter.sessionid = '';\n        this.logger.setSessionInfo(this.stateCenter.appid, this.stateCenter.roomid, this.stateCenter.userid, this.stateCenter.idName, this.stateCenter.sessionid, zego_entity_1.PROTO_VERSION);\n        //},500);\n        this.logger.debug('zb.rh.rr call success');\n    };\n    //空接口，被覆盖\n    RoomHandler.prototype.resetRoomCallBack = function () { };\n    RoomHandler.prototype.onDisconnect = function (err) { };\n    //空实现，被覆盖\n    RoomHandler.prototype.loginSuccessCallBack = function (lastRunState, msg) { };\n    //空实现 被sdk覆盖\n    RoomHandler.prototype.onGetTotalUserList = function (roomId, userList) { };\n    /*\n     *    \"zb.rh.lg\": \"ZegoClient.base.RoomHandler.login\",\n     */\n    //登录房间\n    RoomHandler.prototype.login = function (roomid, token, authToken, success, error) {\n        this.logger.setSessionInfo(this.stateCenter.appid, roomid, '', this.stateCenter.idName, '', zego_entity_1.PROTO_VERSION);\n        this.logger.info('zb.rh.lg call:', roomid, token);\n        authToken && (this.stateCenter.third_token = authToken);\n        if (!this.stateCenter.configOK) {\n            this.logger.error('zb.rh.lg config wrong');\n            error(zego_error_1.commonErrorList.INIT);\n            return;\n        }\n        if (this.stateCenter.runState !== zego_entity_1.ENUM_RUN_STATE.logout) {\n            this.logger.debug('zb.rh.lg reset');\n            this.setRunState(zego_entity_1.ENUM_RUN_STATE.logout);\n            this.resetRoom();\n        }\n        this.logger.debug('zb.rh.lg begin');\n        this.setRunState(zego_entity_1.ENUM_RUN_STATE.trylogin);\n        this.stateCenter.roomid = roomid;\n        this.stateCenter.token = token;\n        client_util_1.ClientUtil.registerCallback('login', {\n            success: success,\n            error: error,\n        }, this.stateCenter.callbackList);\n        this.resetTryLogin();\n        this.tryLogin();\n        this.logger.info('zb.rh.lg call success');\n    };\n    //登录请求数据包  被覆盖\n    RoomHandler.prototype.loginBodyData = function () { };\n    /*\n     *    \"zb.rh.tl\": \"ZegoClient.base.RoomHandler.tryLogin\",\n     */\n    RoomHandler.prototype.tryLogin = function () {\n        var _this = this;\n        this.logger.debug('zb.rh.tl call');\n        if (this.stateCenter.runState !== zego_entity_1.ENUM_RUN_STATE.trylogin) {\n            this.logger.error('zb.rh.tl state error');\n            return;\n        }\n        // 如果尝试登录次数大于最大可尝试次数，则直接置为logout登出状态\n        if (++this.stateCenter.tryLoginCount > zego_entity_1.MAX_TRY_LOGIN_COUNT) {\n            this.logger.error('zb.rh.tl fail times limit');\n            var lastRunState = this.stateCenter.lastRunState;\n            this.setRunState(zego_entity_1.ENUM_RUN_STATE.logout);\n            this.resetRoom();\n            if (lastRunState == zego_entity_1.ENUM_RUN_STATE.login) {\n                //relogin fail, not by user\n                this.logger.error('zb.rh.tl fail and disconnect');\n                this.onDisconnect(zego_entity_1.sdkErrorList.LOGIN_DISCONNECT);\n            }\n            else {\n                //trylogin fail, call by user\n                this.logger.info('zb.rh.tl fail and callback user');\n                client_util_1.ClientUtil.actionErrorCallback('login', this.stateCenter.callbackList)(zego_error_1.liveRoomErrorList.LOGIN_TIMEOUT);\n            }\n            return;\n        }\n        this.stateCenter.startConnceTime = new Date().getTime();\n        console.warn('start connect', this.stateCenter.startConnceTime);\n        // 如果websocket还未初始化或者还不是处于连接状态\n        if (this.socketCenter.isDisConnect()) {\n            this.logger.debug('zb.rh.tl need new websocket');\n            try {\n                // 若已经初始化，但是还不是连接状态，先清除置为null\n                this.socketCenter.closeSocket();\n                // 建立websocket连接\n                this.logger.debug('zb.rh.tl new websocket');\n                this.socketCenter.createSocket(this.stateCenter.server);\n                this.socketCenter.registerRouter('login', function (msg, seq) {\n                    _this.handleLoginRsp(msg, seq);\n                });\n                this.socketCenter.closeHandler(function (err) {\n                    _this.socketCenter.closeSocket();\n                    _this.closeHandler(err);\n                });\n                this.socketCenter.openHandler(function () {\n                    _this.openHandler();\n                });\n            }\n            catch (e) {\n                this.logger.error('zb.rh.tl websocket err:' + e);\n            }\n        }\n        else {\n            // websocket已建立成功\n            var bodyData = this.loginBodyData();\n            this.logger.info('zb.rh.tl use current websocket and sent login');\n            this.socketCenter.sendMessage('login', bodyData);\n        }\n        //settimeout\n        this.stateCenter.tryLoginTimer = setTimeout(function () {\n            _this.tryLogin();\n        }, zego_entity_1.TRY_LOGIN_INTERVAL[this.stateCenter.tryLoginCount % zego_entity_1.MAX_TRY_LOGIN_COUNT]);\n        this.logger.info('zb.rh.tl call success');\n    };\n    /*\n     *    \"zb.rh.hlr\": \"ZegoClient.base.RoomHandler.handleLoginRsp\",\n     */\n    RoomHandler.prototype.handleLoginRsp = function (msg, cmdSeq) {\n        this.logger.debug('zb.rh.hlr call');\n        if (this.stateCenter.runState !== zego_entity_1.ENUM_RUN_STATE.trylogin) {\n            this.logger.error('zb.rh.hlr state error');\n            return;\n        }\n        else if (msg.header.seq !== cmdSeq) {\n            this.logger.error('zb.rh.hlr in wrong seq, local=', cmdSeq, ',recv=', msg.header.seq);\n            return;\n        }\n        else if (msg.body.err_code !== 0) {\n            this.handleLoginFail(msg);\n            this.logger.error('zb.rh.hlr server error=', msg.body.err_code);\n            return;\n        }\n        else {\n            this.handleLoginSuccess(msg);\n            this.logger.info('zb.rh.hlr call success.');\n        }\n    };\n    /*\n     *    \"zb.rh.hlf\": \"ZegoClient.base.RoomHandler.handleLoginFail\",\n     */\n    //登录失败回调\n    RoomHandler.prototype.handleLoginFail = function (msg) {\n        this.logger.debug('zb.rh.hlf call');\n        if (client_util_1.ClientUtil.isKeepTryLogin(msg.body.err_code)) {\n            this.logger.warn('zb.rh.hlf KeepTry true');\n            return;\n        }\n        //stop\n        var lastRunState = this.stateCenter.lastRunState;\n        this.setRunState(zego_entity_1.ENUM_RUN_STATE.logout);\n        this.resetRoom();\n        var err = client_util_1.ClientUtil.getServerError(msg.body.err_code);\n        if (lastRunState === zego_entity_1.ENUM_RUN_STATE.login) {\n            //relogin fail, not by user\n            this.logger.info('zb.rh.hlf callback disconnect');\n            this.onDisconnect(err);\n        }\n        else {\n            //trylogin fail, call by user\n            this.logger.info('zb.rh.hlf callback error');\n            client_util_1.ClientUtil.actionErrorCallback('login', this.stateCenter.callbackList)(err);\n        }\n        this.logger.debug('zb.rh.hlf call success');\n    };\n    /*\n     *    \"zb.rh.hls\": \"ZegoClient.base.RoomHandler.handleLoginSuccess\",\n     */\n    //登录成功回调\n    RoomHandler.prototype.handleLoginSuccess = function (msg) {\n        this.stateCenter.startloginSucTime = new Date().getTime();\n        console.warn('login suc', this.stateCenter.startloginSucTime, this.stateCenter.startloginSucTime - this.stateCenter.startloginTime, this.stateCenter.startloginSucTime - this.stateCenter.startConnceTime);\n        this.logger.info('zb.rh.hls call');\n        //enter login\n        var lastRunState = this.stateCenter.lastRunState;\n        this.setRunState(zego_entity_1.ENUM_RUN_STATE.login);\n        this.stateCenter.userid = msg.body.user_id;\n        this.stateCenter.sessionid = msg.body.session_id;\n        this.stateCenter.anchor_info = msg.body.anchor_info || this.stateCenter.anchor_info;\n        //set log\n        this.logger.setSessionInfo(this.stateCenter.appid, this.stateCenter.roomid, this.stateCenter.userid, this.stateCenter.idName, this.stateCenter.sessionid, zego_entity_1.PROTO_VERSION);\n        if (msg.body.config_info) {\n            this.logger.setRemoteLogLevel(msg.body.config_info.log_level);\n            if (msg.body.config_info.log_url != '')\n                this.logger.openLogServer(msg.body.config_info.log_url);\n        }\n        //get time stamp & window\n        if (msg.body.ret_timestamp != undefined && typeof msg.body.ret_timestamp == 'string') {\n            var serverTime = parseFloat(msg.body.ret_timestamp);\n            if (serverTime == 0) {\n                this.stateCenter.serverTimeOffset = 0;\n            }\n            else {\n                this.stateCenter.serverTimeOffset = msg.body.ret_timestamp - new Date().getTime();\n            }\n        }\n        if (msg.body.bigim_time_window && typeof msg.body.bigim_time_window == 'number') {\n            this.stateCenter.bigimTimeWindow = msg.body.bigim_time_window;\n        }\n        if (msg.body.dati_time_window && typeof msg.body.dati_time_window == 'number') {\n            this.stateCenter.datiTimeWindow = msg.body.dati_time_window;\n        }\n        //stop trylogin\n        this.resetTryLogin();\n        this.loginSuccessCallBack(lastRunState, msg);\n    };\n    /*\n     *    \"zb.rh.oh\": \"ZegoClient.base.RoomHandler.openHandler\",\n     */\n    RoomHandler.prototype.openHandler = function () {\n        // websocket连接已经打开\n        // 注册onmessage函数，处理服务的发过来的消息，该函数只调用一次\n        this.logger.info('zb.rh.oh websocket.onpen call');\n        this.socketCenter.responseHandler();\n        // 发送消息\n        var bodyData = this.loginBodyData();\n        this.logger.info('zb.rh.oh websocket.onpen send login');\n        this.stateCenter.startloginTime = new Date().getTime();\n        console.warn('start login', this.stateCenter.startloginTime, this.stateCenter.startloginTime - this.stateCenter.startConnceTime);\n        this.socketCenter.sendMessage('login', bodyData);\n        this.logger.debug('zb.rh.oh websocket.onpen call success');\n    };\n    /*\n     *    \"zb.rh.oc\": \"ZegoClient.base.RoomHandler.closeHandler\",\n     */\n    RoomHandler.prototype.closeHandler = function (e) {\n        this.logger.info('zb.rh.ws.oc msg=' + JSON.stringify(e));\n        if (this.stateCenter.runState !== zego_entity_1.ENUM_RUN_STATE.logout) {\n            if (this.stateCenter.runState === zego_entity_1.ENUM_RUN_STATE.trylogin &&\n                this.stateCenter.tryLoginCount <= zego_entity_1.MAX_TRY_LOGIN_COUNT) {\n                //trylogin --> trylogin\n                this.logger.info('zb.rh.ws.oc is called because of try login');\n            }\n            else if (this.stateCenter.runState === zego_entity_1.ENUM_RUN_STATE.login) {\n                //login --> trylogin\n                this.logger.info('zb.rh.ws.oc is called because of network broken, try again');\n                this.setRunState(zego_entity_1.ENUM_RUN_STATE.trylogin);\n                this.resetTryLogin();\n                this.tryLogin();\n            }\n            else {\n                //unknown\n                this.logger.error('zb.rh.ws.oc out of think!!!');\n                this.setRunState(zego_entity_1.ENUM_RUN_STATE.logout);\n                this.resetRoom();\n                this.onDisconnect(zego_entity_1.sdkErrorList.UNKNOWN);\n            }\n        }\n        else {\n            //* --> logout\n            this.logger.info('zb.rh.ws.oc onclose logout flow call websocket.close');\n        }\n    };\n    /*\n     *    \"zb.rh.lo\": \"ZegoClient.base.RoomHandler.logout\",\n     */\n    RoomHandler.prototype.logout = function () {\n        this.logger.debug('zb.rh.lo call');\n        if (this.stateCenter.runState === zego_entity_1.ENUM_RUN_STATE.logout) {\n            this.logger.warn('zb.rh.lo at logout');\n            return false;\n        }\n        this.resetRoom();\n        this.logger.info('zb.rh.lo call success');\n        return true;\n    };\n    /*\n     *    \"zb.rh.su\": \"ZegoClient.base.RoomHandler.setUserStateUpdate\",\n     */\n    RoomHandler.prototype.setUserStateUpdate = function (update) {\n        this.logger.debug('zb.rh.su call');\n        if (typeof update !== 'boolean') {\n            this.logger.info('zb.rh.su param error');\n            return false;\n        }\n        this.stateCenter.userStateUpdate = update;\n        this.logger.info('zb.rh.su call success ' + update);\n        return true;\n    };\n    /*\n     *    \"zb.rh.ful\": \"ZegoClient.base.RoomHandler.fetchUserList\",\n     */\n    // 拉取服务端user信息\n    RoomHandler.prototype.fetchUserList = function () {\n        this.logger.debug('zb.rh.ful call');\n        if (this.stateCenter.userQuerying) {\n            this.logger.warn('zb.rh.ful is already querying');\n            return;\n        }\n        this.stateCenter.userQuerying = true;\n        this.stateCenter.userTempList = [];\n        zego_entity_1.ROOMVERSION === 'V1' ? this.fetchUserListWithPage(0) : this.fetchUserListWithPageV2(0);\n        this.logger.info('zb.rh.ful the first time call');\n    };\n    /*\n     *    \"zb.rh.fulwp\": \"ZegoClient.base.RoomHandler.fetchUserListWithPage\",\n     */\n    //分页拉取user list\n    RoomHandler.prototype.fetchUserListWithPageV2 = function (userIndex) {\n        var _this = this;\n        this.logger.debug('zb.rh.fulwp call');\n        this.socketCenter.registerRouter('user_list_v2', function (msg) {\n            _this.handleFetchUserListRspV2(userIndex, msg);\n        });\n        // 发送消息\n        this.socketCenter.sendMessage('user_list_v2', {\n            marker: userIndex === 0 ? '' : userIndex + '',\n            mode: 0,\n            limit: 100,\n        });\n        this.logger.info('zb.rh.fulwp call success');\n    };\n    /*\n     *    \"zb.rh.fulwp\": \"ZegoClient.base.RoomHandler.fetchUserListWithPage\",\n     */\n    //分页拉取user list\n    RoomHandler.prototype.fetchUserListWithPage = function (userIndex) {\n        var _this = this;\n        this.logger.debug('zb.rh.fulwp call');\n        this.socketCenter.registerRouter('user_list', function (msg) {\n            _this.handleFetchUserListRsp(msg);\n        });\n        // 发送消息\n        this.socketCenter.sendMessage('user_list', {\n            user_index: userIndex,\n            sort_type: 0,\n        });\n        this.logger.info('zb.rh.fulwp call success');\n    };\n    /*\n     *    \"zb.rh.hfulr\": \"ZegoClient.base.RoomHandler.handleFetchUserListRsp\",\n     */\n    RoomHandler.prototype.handleFetchUserListRspV2 = function (currentIndex, msg) {\n        this.logger.debug('zb.rh.hfulr call');\n        if (msg.body.err_code != 0) {\n            this.stateCenter.userQuerying = false;\n            this.logger.info('zb.rh.hfulr fetch error ' + msg.body.err_code);\n            return;\n        }\n        //set userseq\n        if (!this.stateCenter.userStateUpdate) {\n            return;\n        }\n        this.stateCenter.userTempList = this.stateCenter.userTempList.concat(msg.body.user_baseinfos);\n        // this.logger.debug(\"zb.rh.hfulr server user_list \" + msg.body.user_baseinfos);\n        var serverIndex = msg.body.marker;\n        if (currentIndex != serverIndex) {\n            this.logger.warn('zb.rh.hfulr fetch another page');\n            this.fetchUserListWithPageV2(currentIndex + 1);\n            return;\n        }\n        this.stateCenter.userSeq = msg.body.server_user_seq;\n        this.logger.info('zb.rh.hfulr set user Seq ' + this.stateCenter.userSeq);\n        var user_list = [];\n        for (var i = 0; i < this.stateCenter.userTempList.length; i++) {\n            var user_info = {\n                idName: this.stateCenter.userTempList[i].id_name,\n                nickName: this.stateCenter.userTempList[i].nick_name,\n                role: this.stateCenter.userTempList[i].role,\n            };\n            user_list.push(user_info);\n        }\n        this.stateCenter.userQuerying = false;\n        this.onGetTotalUserList(this.stateCenter.roomid, user_list);\n        this.stateCenter.userTempList = [];\n        this.logger.info('zb.rh.hfulr call success user_list ' + user_list + ' count ' + user_list.length);\n    };\n    /*\n     *    \"zb.rh.hfulr\": \"ZegoClient.base.RoomHandler.handleFetchUserListRsp\",\n     */\n    RoomHandler.prototype.handleFetchUserListRsp = function (msg) {\n        this.logger.debug('zb.rh.hfulr call');\n        if (msg.body.err_code != 0) {\n            this.stateCenter.userQuerying = false;\n            this.logger.info('zb.rh.hfulr fetch error ' + msg.body.err_code);\n            return;\n        }\n        //set userseq\n        if (!this.stateCenter.userStateUpdate) {\n            return;\n        }\n        this.stateCenter.userTempList = this.stateCenter.userTempList.concat(msg.body.user_baseinfos);\n        // this.logger.debug(\"zb.rh.hfulr server user_list \" + msg.body.user_baseinfos);\n        var currentIndex = msg.body.ret_user_index;\n        var serverIndex = msg.body.server_user_index;\n        if (currentIndex != serverIndex) {\n            this.logger.warn('zb.rh.hfulr fetch another page');\n            this.fetchUserListWithPage(currentIndex + 1);\n            return;\n        }\n        this.stateCenter.userSeq = msg.body.server_user_seq;\n        this.logger.info('zb.rh.hfulr set user Seq ' + this.stateCenter.userSeq);\n        var user_list = [];\n        for (var i = 0; i < this.stateCenter.userTempList.length; i++) {\n            var user_info = {\n                idName: this.stateCenter.userTempList[i].id_name,\n                nickName: this.stateCenter.userTempList[i].nick_name,\n                role: this.stateCenter.userTempList[i].role,\n            };\n            user_list.push(user_info);\n        }\n        this.stateCenter.userQuerying = false;\n        this.onGetTotalUserList(this.stateCenter.roomid, user_list);\n        this.stateCenter.userTempList = [];\n        this.logger.info('zb.rh.hfulr call success user_list ' + user_list + ' count ' + user_list.length);\n    };\n    /*\n     *    \"zb.rh.hlor\": \"ZegoClient.base.RoomHandler.handleLogoutRsp\",\n     */\n    RoomHandler.prototype.handleLogoutRsp = function (msg) {\n        this.logger.debug('zb.rh.hlor result=', msg.body.err_code);\n    };\n    /*\n     *    \"zb.rh.hpus\": \"ZegoClient.base.RoomHandler.handlePushUserStateUpdateMsg\",\n     */\n    RoomHandler.prototype.handlePushUserStateUpdateMsg = function (msg) {\n        this.logger.info('zb.rh.hpus call');\n        if (!this.stateCenter.isLogin()) {\n            this.logger.error('zb.rh.hpus not login');\n            return;\n        }\n        if (!this.stateCenter.userStateUpdate) {\n            this.logger.error('zb.rh.hpus no userStateUpdate flag');\n            return;\n        }\n        if (this.stateCenter.userSeq + msg.body.user_actions.length !== msg.body.user_list_seq) {\n            this.logger.warn('zb.rh.hpus fetch new userlist ' + this.stateCenter.userSeq, +' server ' + msg.body.user_list_seq);\n            this.fetchUserList();\n            return;\n        }\n        this.stateCenter.userSeq = msg.body.user_list_seq;\n        this.logger.debug('zb.rh.hpus push userSeq ' + this.stateCenter.userSeq);\n        var user_list = [];\n        for (var i = 0; i < msg.body.user_actions.length; i++) {\n            var user_info = {\n                action: msg.body.user_actions[i].Action,\n                idName: msg.body.user_actions[i].IdName,\n                nickName: msg.body.user_actions[i].NickName,\n                loginTime: msg.body.user_actions[i].LoginTime,\n            };\n            user_list.push(user_info);\n        }\n        this.onUserStateUpdate(msg.body.room_id, user_list);\n        this.logger.info('zb.rh.hpus call success');\n    };\n    RoomHandler.prototype.onUserStateUpdate = function (roomId, userList) { };\n    return RoomHandler;\n}());\nexports.RoomHandler = RoomHandler;\n\n\n/***/ }),\n\n/***/ \"./sdk/common/clientBase/socketCenter.ts\":\n/*!***********************************************!*\\\n  !*** ./sdk/common/clientBase/socketCenter.ts ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zego_entity_1 = __webpack_require__(/*! ../zego.entity */ \"./sdk/common/zego.entity.ts\");\nvar client_util_1 = __webpack_require__(/*! ../../util/client-util */ \"./sdk/util/client-util.ts\");\nvar SocketCenter = /** @class */ (function () {\n    function SocketCenter(logger, stateCenter) {\n        var _this = this;\n        this.websocket = null;\n        this.cmdSeq = 0;\n        this.responseRouters = {};\n        this.logger = logger;\n        this.stateCenter = stateCenter;\n        this.responseRouters = {\n            push_kickout: function (msg) {\n                _this.handlePushKickout(msg);\n            },\n            push_custommsg: function (msg) {\n                _this.handlePushCustomMsg(msg);\n            },\n            push_im_chat: function (msg) {\n                _this.handlePushRoomMsg(msg);\n            },\n            push_userlist_update: function (msg) {\n                _this.handlePushUserStateUpdateMsg(msg);\n            },\n            push_merge_message: function (msg) {\n                _this.handlePushMergeMsg(msg);\n            },\n            trans: function (msg) {\n                _this.handleTransRsp(msg);\n            },\n            push_trans: function (msg) {\n                _this.handlePushTransMsg(msg);\n            },\n        };\n    }\n    /*\n     *    \"hpk.0\": \"ZegoClient.handlePushKickout\",\n     */\n    SocketCenter.prototype.handlePushKickout = function (msg) { };\n    SocketCenter.prototype.handlePushCustomMsg = function (msg) { };\n    SocketCenter.prototype.handlePushRoomMsg = function (msg) { };\n    SocketCenter.prototype.handlePushUserStateUpdateMsg = function (msg) { };\n    SocketCenter.prototype.handlePushMergeMsg = function (msg) { };\n    SocketCenter.prototype.handlePushTransMsg = function (msg) { };\n    SocketCenter.prototype.handleBigImMsgRsp = function (msg) { };\n    /*\n     *    \"zb.sc.htr\": \"ZegoClient.base.SocketCenter.handleTransRsp\",\n     *\n     */\n    //trans回包\n    SocketCenter.prototype.handleTransRsp = function (msg) {\n        if (!this.stateCenter.isLogin()) {\n            this.logger.error('zb.sc.htr not login');\n            return;\n        }\n        if (msg.body.err_code != 0) {\n            this.logger.error('zb.sc.htr trans send error ' + msg.body.err_code);\n            return;\n        }\n        var type = msg.body.trans_type;\n        if (!this.stateCenter.transSeqMap[type]) {\n            this.logger.error('zb.sc.htr cannot match send info');\n            return;\n        }\n        //update seq\n        this.stateCenter.transSeqMap[type].seq = msg.body.trans_seq;\n        this.logger.debug('zb.sc.htr trans ' + type + ' seq ' + msg.body.trans_seq);\n    };\n    SocketCenter.prototype.handleBizChannelRspCallback = function (msg, sendData) {\n        if (msg.body.err_code === 0) {\n            if (sendData.success != null) {\n                sendData.success(msg.header.seq, msg.body.cmd, msg.body.rsp_body);\n            }\n        }\n        else {\n            if (sendData.error != null) {\n                sendData.error(msg.body.err_code, msg.header.seq, msg.body.rsp_body);\n            }\n        }\n    };\n    //注册cmd回调事件\n    SocketCenter.prototype.registerRouter = function (name, callBack) {\n        this.responseRouters[name] = callBack;\n    };\n    SocketCenter.prototype.getSocket = function (server) {\n        return null;\n    };\n    // 获取全局参数对象header\n    SocketCenter.prototype.getHeaderV2 = function (cmd) {\n        var header = {\n            Protocol: 'req_v2',\n            cmd: cmd,\n            appid: this.stateCenter.appid,\n            seq: ++this.cmdSeq,\n            user_id: this.stateCenter.userid,\n            session_id: this.stateCenter.sessionid || '',\n            room_id: this.stateCenter.roomid || '',\n        };\n        return header;\n    };\n    // 获取全局参数对象header\n    SocketCenter.prototype.getHeader = function (cmd) {\n        return {\n            Protocol: 'req',\n            cmd: cmd,\n            appid: this.stateCenter.appid,\n            seq: ++this.cmdSeq,\n            user_id: this.stateCenter.userid,\n            session_id: this.stateCenter.sessionid || '',\n            room_id: this.stateCenter.roomid || '',\n        };\n    };\n    /*\n     *    \"zb.sc.sm\": \"ZegoClient.base.SocketCenter.sendMessage\",\n     *\n     */\n    SocketCenter.prototype.sendMessage = function (cmd, body, success, error) {\n        this.logger.debug('zb.sc.sm call ' + cmd);\n        if (this.isDisConnect()) {\n            this.logger.error('zb.sc.sm error  ' + cmd + 'websocket is disconnected');\n            return -1;\n        }\n        var header = zego_entity_1.ROOMVERSION === 'V1' ? this.getHeader(cmd) : this.getHeaderV2(cmd);\n        var data = {\n            header: header,\n            body: body,\n        };\n        success == undefined && (success = null);\n        error == undefined && (error = null);\n        if (success != null || error != null) {\n            var cmdData = {\n                data: data,\n                seq: header.seq,\n                deleted: false,\n                time: Date.parse(new Date() + ''),\n                success: success,\n                error: error,\n            };\n            var cmdDataNode = this.stateCenter.sendCommandList.push(cmdData);\n            this.stateCenter.sendCommandMap[cmdData.seq] = cmdDataNode;\n        }\n        this.websocket && this.websocket.send(JSON.stringify(data));\n        this.logger.debug('zb.sc.sm success');\n        return header.seq;\n    };\n    /*\n     *    \"zb.sc.scm\": \"ZegoClient.base.SocketCenter.sendCustomMessage\"\n     */\n    //发送带回调消息\n    SocketCenter.prototype.sendCustomMessage = function (cmd, body, success, error) {\n        this.logger.debug('zb.sc.scm call');\n        if (this.isDisConnect()) {\n            this.logger.error('zb.sc.scm error');\n            return false;\n        }\n        var header = zego_entity_1.ROOMVERSION === 'V1' ? this.getHeader(cmd) : this.getHeaderV2(cmd);\n        var data = {\n            header: header,\n            body: body,\n        };\n        var dataBuffer = JSON.stringify(data);\n        if (success == undefined)\n            success = null;\n        if (error == undefined)\n            error = null;\n        var cmdData = {\n            data: data,\n            seq: header.seq,\n            deleted: false,\n            time: Date.parse(new Date() + ''),\n            success: success,\n            error: error,\n        };\n        var cmdDataNode = this.stateCenter.sendDataList.push(cmdData);\n        this.stateCenter.sendDataMap[cmdData.seq] = cmdDataNode;\n        this.websocket && this.websocket.send(dataBuffer);\n        this.logger.debug('zb.sc.scm success seq: ', header.seq);\n        return true;\n    };\n    SocketCenter.prototype.isDisConnect = function () {\n        return !this.websocket || this.websocket.readyState !== 1;\n    };\n    /*\n     *    \"zb.sc.cs\": \"ZegoClient.base.SocketCenter.closeSocket\"\n     */\n    SocketCenter.prototype.closeSocket = function () {\n        if (this.websocket) {\n            this.logger.info('zb.sc.cs close websocket');\n            this.websocket.onclose = null;\n            this.websocket.onerror = null;\n            this.websocket.close();\n            this.websocket = null;\n        }\n    };\n    SocketCenter.prototype.createSocket = function (server) {\n        this.websocket = this.getSocket(server);\n    };\n    SocketCenter.prototype.openHandler = function (hander) {\n        if (this.websocket)\n            this.websocket.onopen = hander;\n    };\n    /*\n     *    \"zb.sc.ch\": \"ZegoClient.base.SocketCenter.closeHandler\"\n     */\n    SocketCenter.prototype.closeHandler = function (hander) {\n        if (this.websocket)\n            this.websocket.onclose = hander;\n    };\n    /*\n     *    \"zb.sc.ws.oe\": \"ZegoClient.base.SocketCenter.errorHandler\"\n     */\n    SocketCenter.prototype.errorHandler = function () {\n        var _this = this;\n        if (this.websocket)\n            this.websocket.onerror = function (e) {\n                _this.logger.error('zb.sc.oe msg=' + JSON.stringify(e));\n            };\n    };\n    /*\n     *    \"zb.sc.crp\": \"ZegoClient.base.SocketCenter.checkResponse\"\n     */\n    // 被logincenter 覆盖\n    SocketCenter.prototype.checkResponse = function (msg) {\n        if (msg.header.appid !== this.stateCenter.appid ||\n            msg.header.session_id !== this.stateCenter.sessionid ||\n            msg.header.user_id !== this.stateCenter.userid ||\n            msg.header.room_id !== this.stateCenter.roomid ||\n            this.stateCenter.runState !== zego_entity_1.ENUM_RUN_STATE.login) {\n            this.logger.error('zb.sc.crp check session fail.');\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /*\n     *    \"zb.sc.ws.rph: \"ZegoClient.base.SocketCenter.responseHandler\"\n     */\n    SocketCenter.prototype.responseHandler = function () {\n        var _this = this;\n        if (this.websocket)\n            this.websocket.onmessage = function (e) {\n                var msg = JSON.parse(e.data);\n                _this.logger.info('zb.sc.ws.rph jsonmsg= ', msg.header.cmd);\n                _this.logger.info('zb.sc.ws.rph jsonmsg= ', e.data);\n                if (msg.body.err_code !== 0) {\n                    msg.body.err_message &&\n                        _this.logger.error(\"zb.sc.ws.rph cmd=\" + msg.header.cmd + \", err_code=\" + msg.body.err_code + \", err_message=\" + msg.body.err_message + \" \");\n                }\n                if (msg.header.cmd === 'login') {\n                    _this.responseRouters['login'](msg, _this.cmdSeq);\n                    return;\n                }\n                else if (msg.header.cmd === 'logout') {\n                    _this.responseRouters['logout'](msg, _this.cmdSeq);\n                    return;\n                }\n                if (!_this.stateCenter.isLogin()) {\n                    _this.logger.warn('zb.sc.ws.rph  already logout');\n                    return;\n                }\n                if (_this.checkResponse(msg)) {\n                    _this.logger.error('zb.sc.ws.rph check session fail.');\n                    return;\n                }\n                //检查消息回包\n                _this.handleSendCommandMsgRsp(msg);\n                _this.logger.info(\"zb.sc.ws.rph cmd=\" + msg.header.cmd + \",function=\" + !!_this.responseRouters[msg.header.cmd]);\n                _this.responseRouters[msg.header.cmd] && _this.responseRouters[msg.header.cmd](msg);\n                // switch (msg.header.cmd) {\n                //   case 'hb':\n                //     this.handleHeartbeatRsp(msg);\n                //     break;\n                //   case 'logout':\n                //     this.handleLogoutRsp(msg);\n                //     break;\n                //   case 'custommsg':\n                //     this.handleSendCustomMsgRsp(msg);\n                //     break;\n                //   case 'stream_info':\n                //     this.handleFetchStreamListRsp(msg);\n                //     break;\n                //   case 'push_custommsg':\n                //     this.handlePushCustomMsg(msg);\n                //     break;\n                //   case 'push_stream_update':\n                //     this.handlePushStreamUpdateMsg(msg);\n                //     break;\n                //   case 'push_kickout':\n                //     this.handlePushKickout(msg);\n                //     break;\n                //   case 'stream_url':?-wx\n                //     this.handleFetchStreamUrlRsp(msg);\n                //     break;\n                //   case 'stream_publish':?-wx\n                //     this.handleFetchStreamPublishUrlRsp(msg);\n                //     break;\n                //   case 'webrtc_url':\n                //     this.handleFetchWebRtcUrlRsp(msg);\n                //     break;\n                //   case 'im_chat':\n                //     this.handleSendRoomMsgRsp(msg);\n                //     break;\n                //   case 'push_im_chat':\n                //     this.handlePushRoomMsg(msg);\n                //     break;\n                //   case 'push_userlist_update':\n                //     this.handlePushUserStateUpdateMsg(msg);\n                //     break;\n                //   case 'user_list':\n                //     this.handleFetchUserListRsp(msg);\n                //     break;\n                //   case 'push_signal':\n                //     this.handlePushSignalMsg(msg);\n                //     break;\n                //   case 'stream':\n                //     this.handleStreamUpdateRsp(msg);\n                //     break;\n                //   case 'trans':\n                //     this.handleTransRsp(msg);\n                //     break;\n                //   case 'trans_fetch':\n                //     this.handleFetchTransRsp(msg);\n                //     break;\n                //   case 'push_trans':\n                //     this.handlePushTransMsg(msg);\n                //     break;\n                //   case 'push_merge_message':\n                //     this.handlePushMergeMsg(msg);\n                //     break;\n                // }\n            };\n    };\n    /*\n     *    \"zb.sc.hscmr: \"ZegoClient.base.SocketCenter.handleSendCommandMsgRsp\"\n     */\n    SocketCenter.prototype.handleSendCommandMsgRsp = function (msg) {\n        this.logger.debug('zb.sc.hscmr call');\n        var sendDataNode = this.stateCenter.sendCommandMap[msg.header.seq];\n        var sendData;\n        if (sendDataNode != null) {\n            sendData = sendDataNode._data;\n            if (sendData.data.header.cmd == 'login') {\n                this.logger.debug(\"zb.sc.hscmr don't check \" + sendData.data.header.cmd);\n            }\n            else if (sendData.data.header.cmd == 'relay') {\n                this.handleRelayRspCallback(msg, sendData);\n            }\n            else if (sendData.data.header.cmd == 'bigim_chat') {\n                this.handleBigImRspCallback(msg, sendData);\n            }\n            else if (sendData.data.header.cmd == 'biz_channel') {\n                this.handleBizChannelRspCallback(msg, sendData);\n            }\n            else if (msg.body.err_code === 0) {\n                sendData.success != null && sendData.success(msg.header.seq);\n            }\n            else {\n                sendData.error != null && sendData.error(client_util_1.ClientUtil.getServerError(msg.body.err_code), msg.header.seq);\n            }\n            delete this.stateCenter.sendCommandMap[msg.header.seq];\n            this.stateCenter.sendCommandList.remove(sendDataNode);\n        }\n        this.logger.debug('zb.sc.hscmr call success');\n    };\n    SocketCenter.prototype.handleRelayRspCallback = function (msg, sendData) {\n        if (msg.body.err_code === 0) {\n            if (sendData.success != null) {\n                sendData.success(msg.header.seq, msg.body.relay_result);\n            }\n        }\n        else {\n            if (sendData.error != null) {\n                sendData.error(client_util_1.ClientUtil.getServerError(msg.body.err_code), msg.header.seq);\n            }\n        }\n    };\n    SocketCenter.prototype.handleBigImRspCallback = function (msg, sendData) {\n        if (msg.body.err_code === 0) {\n            if (sendData.success != null) {\n                //should be sendData.success callback\n                this.handleBigImMsgRsp(msg);\n            }\n        }\n        else {\n            if (sendData.error != null) {\n                sendData.error(client_util_1.ClientUtil.getServerError(msg.body.err_code), msg.header.seq);\n            }\n        }\n    };\n    return SocketCenter;\n}());\nexports.SocketCenter = SocketCenter;\n\n\n/***/ }),\n\n/***/ \"./sdk/common/clientBase/stateCenter.ts\":\n/*!**********************************************!*\\\n  !*** ./sdk/common/clientBase/stateCenter.ts ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zego_entity_1 = __webpack_require__(/*! ../zego.entity */ \"./sdk/common/zego.entity.ts\");\nvar zego_extern_1 = __webpack_require__(/*! ../zego.extern */ \"./sdk/common/zego.extern.ts\");\nvar StateCenter = /** @class */ (function () {\n    function StateCenter() {\n        this.testEnvironment = false;\n        this.third_token = '';\n        this.pullLimited = true;\n        this.configOK = false;\n        this.role = 2;\n        this.roomCreateFlag = 1;\n        this.runState = zego_entity_1.ENUM_RUN_STATE.logout;\n        this.lastRunState = zego_entity_1.ENUM_RUN_STATE.logout;\n        this.callbackList = {};\n        this.streamQuerying = false;\n        this.streamSeq = 0;\n        this.streamList = [];\n        this.publishStreamList = {};\n        //用户相关\n        this.userQuerying = false;\n        this.userTempList = [];\n        this.userSeq = 0;\n        this.anchor_info = {\n            anchor_id: '',\n            anchor_id_name: '',\n            anchor_nick_name: '',\n        };\n        //command check timout\n        this.sendCommandMap = {};\n        this.sendCommandList = new zego_entity_1.LinkedList();\n        this.sendDataMap = {};\n        this.sendDataList = new zego_entity_1.LinkedList();\n        this.joinLiveCallbackMap = {};\n        this.joinLiveRequestMap = {};\n        this.streamUrlMap = {};\n        this.cmdCallback = {};\n        this.customUrl = null;\n        //x消息相关\n        this.transSeqMap = {};\n        this.realyMessageList = [];\n        this.relayTimer = null;\n        this.bigImLastTimeIndex = 0;\n        this.bigIMmessageList = [];\n        this.bigImCallbackMap = {};\n        this.bigImTimer = null;\n        this.serverTimeOffset = 0;\n        this.datiTimeWindow = 0;\n        this.bigimTimeWindow = 0;\n        this.bigImMessageList = [];\n        this.tryLoginCount = 0;\n        this.tryLoginTimer = null;\n        this.heartbeatTimer = null;\n        this.sendDataCheckTimer = null;\n        this.sendDataCheckInterval = 2000; //检查发送消息间隔\n        this.sendDataTimeout = 5 * 1000; //发送消息超时\n        this.sendDataDropTimeout = 10 * 1000; //丢弃过期消息的超时时间\n        this.sendDataCheckOnceCount = 100; //每次处理最大的超时包\n        this.sendRoomMsgTime = 0; //上一次发送房间消息时间\n        this.SendRoomMsgInterval = 500; //发送房间消息最多500毫秒发送一次\n        this.cmdSeq = 0;\n        //音效相关\n        this.audioEffectBuffer = {};\n        this.audioBitRate = 48000;\n        //动态转推cdn相关\n        this.cdnSeq = 0;\n        //回调相关\n        this.listenerList = {\n            userStateUpdate: [],\n            totalUserList: [],\n            updateOnlineCount: [],\n            getAnchorInfo: [],\n            recvCustomCommand: [],\n            recvRoomMsg: [],\n            recvReliableMessage: [],\n            recvBigRoomMessage: [],\n            recvJoinLiveRequest: [],\n            recvInviteJoinLiveRequest: [],\n            recvEndJoinLiveCommand: [],\n            remoteStreamUpdated: [],\n            streamExtraInfoUpdated: [],\n            pullStateChange: [],\n            publishStateChange: [],\n            roomStateUpdate: [],\n            ScreenSharingEnded: []\n        };\n    }\n    //是否登录\n    StateCenter.prototype.isLogin = function () {\n        return this.runState === zego_entity_1.ENUM_RUN_STATE.login;\n    };\n    //requestId\n    StateCenter.prototype.getRequestId = function () {\n        return this.idName + '-' + zego_extern_1.getSeq();\n    };\n    StateCenter.prototype.getSignalCmdContent = function (requestId, dest_id_name, result) {\n        var data = {\n            request_id: requestId,\n            room_id: this.roomid,\n            from_userid: this.idName,\n            from_username: this.nickName,\n            to_userid: dest_id_name,\n        };\n        if (result != undefined) {\n            data['result'] = result;\n        }\n        return JSON.stringify(data);\n    };\n    return StateCenter;\n}());\nexports.StateCenter = StateCenter;\n\n\n/***/ }),\n\n/***/ \"./sdk/common/clientBase/streamHandler.ts\":\n/*!************************************************!*\\\n  !*** ./sdk/common/clientBase/streamHandler.ts ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zego_entity_1 = __webpack_require__(/*! ../zego.entity */ \"./sdk/common/zego.entity.ts\");\nvar client_util_1 = __webpack_require__(/*! ../../util/client-util */ \"./sdk/util/client-util.ts\");\nvar zego_error_1 = __webpack_require__(/*! ../zego.error */ \"./sdk/common/zego.error.ts\");\nvar StreamHandler = /** @class */ (function () {\n    function StreamHandler(logger, stateCenter, socketCenter) {\n        this.logger = logger;\n        this.socketCenter = socketCenter;\n        this.stateCenter = stateCenter;\n    }\n    //空实现 被sdk覆盖\n    StreamHandler.prototype.setCDNInfo = function (streamInfo, streamItem) { };\n    //空实现 被sdk覆盖\n    StreamHandler.prototype.onStreamUpdated = function (type, streamList) { };\n    //空实现 被sdk覆盖\n    StreamHandler.prototype.onStreamExtraInfoUpdated = function (streamList) { };\n    /*\n     *    \"zb.sh.hss\": \"ZegoClient.base.StreamHandler.handleStreamStart\",\n     */\n    StreamHandler.prototype.handleStreamStart = function (lastRunState, msg) {\n        var _this = this;\n        this.stateCenter.streamQuerying = false;\n        this.socketCenter.registerRouter('stream', function (msg) {\n            _this.handleStreamUpdateRsp(msg);\n        });\n        this.socketCenter.registerRouter('push_stream_update', function (msg) {\n            _this.handlePushStreamUpdateMsg(msg);\n        });\n        if (lastRunState == zego_entity_1.ENUM_RUN_STATE.login) {\n            this.logger.info('zb.sh.hss recover from disconnect so call streamupdate');\n            //relogin and stream update callback\n            this.handleFullUpdateStream(msg.body.stream_seq, msg.body.stream_info || []);\n            this.stateCenter.listenerList['roomStateUpdate'].forEach(function (func) {\n                func('RECONNECT');\n            });\n        }\n        else {\n            this.logger.info('zb.sh.hss success callback user');\n            //login and callback\n            this.stateCenter.streamList = msg.body.stream_info || [];\n            this.stateCenter.streamSeq = msg.body.stream_seq;\n            for (var i = 0; i < this.stateCenter.streamList.length; i++) {\n                //check whether stream contain self\n                if (this.stateCenter.streamList[i].anchor_id_name == this.stateCenter.idName) {\n                    //delete this stream\n                    this.updateStreamInfo(this.stateCenter.streamList[i].stream_id, zego_entity_1.ENUM_STREAM_SUB_CMD.liveEnd);\n                    this.stateCenter.streamList.splice(i, 1);\n                }\n            }\n            var callbackStreamList = this.makeCallbackStreamList(this.stateCenter.streamList);\n            client_util_1.ClientUtil.actionSuccessCallback('login', this.stateCenter.callbackList)(callbackStreamList);\n        }\n    };\n    //空实现 被sdk覆盖\n    StreamHandler.prototype.onPublishStateUpdate = function (type, streamId, error) { };\n    /*\n     *    \"zb.sh.usi\": \"ZegoClient.base.StreamHandler.updateStreamInfo\",\n     */\n    //流更新信令  退出上次推的自己的流\n    StreamHandler.prototype.updateStreamInfo = function (streamid, cmd, stream_extra_info, error) {\n        var _this = this;\n        if (stream_extra_info === void 0) { stream_extra_info = ''; }\n        this.logger.debug('zb.sh.usi call');\n        var extra_info = stream_extra_info;\n        var data = {\n            stream_id: streamid,\n            extra_info: extra_info,\n        };\n        var stream_msg = JSON.stringify(data);\n        var bodyData = {\n            sub_cmd: cmd,\n            stream_msg: stream_msg,\n        };\n        this.socketCenter.registerRouter('stream', function (msg) {\n            _this.handleStreamUpdateRsp(msg);\n        });\n        this.socketCenter.sendMessage('stream', bodyData, undefined, error);\n        this.logger.info('zb.sh.usi call success cmd ' + cmd);\n    };\n    /*\n     *    \"zb.sh.hsur\": \"ZegoClient.base.StreamHandler.handleStreamUpdateRsp\",\n     */\n    //流更新回包\n    StreamHandler.prototype.handleStreamUpdateRsp = function (msg) {\n        if (!this.stateCenter.isLogin()) {\n            this.logger.error('zb.sh.hsur not login');\n            return;\n        }\n        if (msg.body.err_code != 0) {\n            this.logger.error('zb.sh.hsur stream update error ' + msg.body.err_code);\n            return;\n        }\n        this.logger.info('zb.sh.hsur stream seq ' + this.stateCenter.streamSeq + ' server seq ' + msg.body.stream_seq);\n        this.stateCenter.streamSeq = msg.body.stream_seq;\n        //流删除时，publishStreamList已经删除了\n        for (var i = 0; i < msg.body.stream_info.length; i++) {\n            var streamid = msg.body.stream_info[i].stream_id;\n            if (!this.stateCenter.publishStreamList[streamid]) {\n                this.logger.info('hsur.0 stream is not exist');\n                return;\n            }\n            if (this.stateCenter.publishStreamList[streamid].state == zego_entity_1.ENUM_PUBLISH_STREAM_STATE.update_info) {\n                this.stateCenter.publishStreamList[streamid].state = zego_entity_1.ENUM_PUBLISH_STREAM_STATE.publishing;\n                this.onPublishStateUpdate(0, streamid, 0);\n            }\n        }\n    };\n    /*\n     *    \"zb.sh.hfslr\": \"ZegoClient.base.StreamHandler.handleFetchStreamListRsp\",\n     */\n    StreamHandler.prototype.handleFetchStreamListRsp = function (msg) {\n        this.logger.info('zb.sh.hfslr call');\n        this.stateCenter.streamQuerying = false;\n        if (msg.body.err_code !== 0) {\n            this.logger.info('zb.sh.hfslr server error=', msg.body.err_code);\n            return;\n        }\n        if (this.stateCenter.streamSeq === msg.body.stream_seq) {\n            this.logger.info('zb.sh.hfslr same seq');\n            return;\n        }\n        this.handleFullUpdateStream(msg.body.stream_seq, msg.body.stream_info);\n        this.logger.debug('zb.sh.hfslr call success');\n    };\n    /*\n     *    \"zb.sh.hfus\": \"ZegoClient.base.StreamHandler.handleFullUpdateStream\",\n     */\n    StreamHandler.prototype.handleFullUpdateStream = function (serverStreamSeq, serverStreamList) {\n        var _this = this;\n        this.logger.debug('zb.sh.hfus call');\n        this.stateCenter.streamSeq = serverStreamSeq;\n        this.logger.debug('zb.sh.hfus server seq ' + this.stateCenter.streamSeq);\n        client_util_1.ClientUtil.mergeStreamList(this.logger, this.stateCenter.idName, this.stateCenter.streamList, serverStreamList, function (addStreamList, delStreamList, updateStreamList) {\n            if (addStreamList.length !== 0) {\n                _this.logger.debug('zb.sh.hfus callback addstream');\n                _this.onStreamUpdated(zego_entity_1.ENUM_STREAM_UPDATE_TYPE.added, _this.makeCallbackStreamList(addStreamList));\n            }\n            if (delStreamList.length !== 0) {\n                _this.logger.debug('zb.sh.hfus callback delstream');\n                _this.onStreamUpdated(zego_entity_1.ENUM_STREAM_UPDATE_TYPE.deleted, _this.makeCallbackStreamList(delStreamList));\n            }\n            if (updateStreamList.length !== 0) {\n                _this.logger.debug('zb.sh.hfus callback updatestream');\n                _this.onStreamExtraInfoUpdated(_this.makeCallbackStreamList(updateStreamList));\n            }\n        });\n        this.logger.info('zb.sh.hfus call success');\n    };\n    /*\n     *    \"zb.sh.hpsum\": \"ZegoClient.base.StreamHandler.handlePushStreamUpdateMsg\",\n     */\n    StreamHandler.prototype.handlePushStreamUpdateMsg = function (msg) {\n        this.logger.info('zb.sh.hpsum call');\n        if (!msg.body.stream_info || msg.body.stream_info.length === 0) {\n            this.logger.info('zb.sh.hpsum, emtpy list');\n            return;\n        }\n        if (msg.body.stream_info.length + this.stateCenter.streamSeq !== msg.body.stream_seq) {\n            this.logger.info('zb.sh.hpsum call updatestream');\n            this.fetchStreamList();\n            return;\n        }\n        this.stateCenter.streamSeq = msg.body.stream_seq;\n        switch (msg.body.stream_cmd) {\n            case zego_entity_1.ENUM_STREAM_UPDATE_CMD.added:\n                this.handleAddedStreamList(msg.body.stream_info);\n                break;\n            case zego_entity_1.ENUM_STREAM_UPDATE_CMD.deleted:\n                this.handleDeletedStreamList(msg.body.stream_info);\n                break;\n            case zego_entity_1.ENUM_STREAM_UPDATE_CMD.updated:\n                this.handleUpdatedStreamList(msg.body.stream_info);\n                break;\n        }\n        this.logger.info('zb.sh.hpsum call success');\n    };\n    /*\n     *    \"zb.sh.hasl\": \"ZegoClient.base.StreamHandler.handleAddedStreamList\",\n     */\n    StreamHandler.prototype.handleAddedStreamList = function (streamList) {\n        this.logger.debug('zb.sh.hasl call');\n        var addStreamList = [];\n        var flag;\n        for (var i = 0; i < streamList.length; i++) {\n            if (streamList[i].anchor_id_name == this.stateCenter.idName) {\n                this.logger.debug('hdsl.0 have self stream added');\n                continue;\n            }\n            flag = false;\n            for (var j = 0; j < this.stateCenter.streamList.length; j++) {\n                if (streamList[i].stream_id === this.stateCenter.streamList[j].stream_id) {\n                    flag = true;\n                    break;\n                }\n            }\n            if (!flag) {\n                addStreamList.push(streamList[i]);\n            }\n        }\n        if (addStreamList.length !== 0) {\n            this.logger.debug('zb.sh.hasl callback addstream');\n            // this.stateCenter.streamList.concat(addStreamList);\n            for (var k = 0; k < addStreamList.length; k++) {\n                this.stateCenter.streamList.push(addStreamList[k]);\n            }\n            this.onStreamUpdated(zego_entity_1.ENUM_STREAM_UPDATE_TYPE.added, this.makeCallbackStreamList(addStreamList));\n        }\n        this.logger.info('zb.sh.hasl call success');\n    };\n    /*\n     *    \"zb.sh.hdsl\": \"ZegoClient.base.StreamHandler.handleDeletedStreamList\",\n     */\n    StreamHandler.prototype.handleDeletedStreamList = function (streamList) {\n        this.logger.debug('zb.sh.hdsl call');\n        var delStreamList = [];\n        for (var i = 0; i < streamList.length; i++) {\n            if (streamList[i].anchor_id_name == this.stateCenter.idName) {\n                this.logger.debug('zb.sh.hdsl have self stream deleted');\n                continue;\n            }\n            for (var j = this.stateCenter.streamList.length - 1; j >= 0; j--) {\n                if (streamList[i].stream_id === this.stateCenter.streamList[j].stream_id) {\n                    this.stateCenter.streamList.splice(j, 1);\n                    delStreamList.push(streamList[i]);\n                    break;\n                }\n            }\n        }\n        if (delStreamList.length !== 0) {\n            this.logger.debug('zb.sh.hdsl callback delstream');\n            this.onStreamUpdated(zego_entity_1.ENUM_STREAM_UPDATE_TYPE.deleted, this.makeCallbackStreamList(delStreamList));\n        }\n        this.logger.info('zb.sh.hdsl call');\n    };\n    /*\n     *    \"zb.sh.husl\": \"ZegoClient.base.StreamHandler.handleUpdatedStreamList\",\n     */\n    StreamHandler.prototype.handleUpdatedStreamList = function (streamList) {\n        this.logger.debug('zb.sh.husl call');\n        var updateStreamList = [];\n        for (var i = 0; i < streamList.length; i++) {\n            if (streamList[i].anchor_id_name == this.stateCenter.idName) {\n                this.logger.debug('hsul.0 have self stream updated');\n                continue;\n            }\n            for (var j = 0; j < this.stateCenter.streamList.length; j++) {\n                if (streamList[i].stream_id === this.stateCenter.streamList[j].stream_id) {\n                    if (streamList[i].extra_info !== this.stateCenter.streamList[j].extra_info) {\n                        this.stateCenter.streamList[j] = streamList[i];\n                        updateStreamList.push(streamList[i]);\n                    }\n                    break;\n                }\n            }\n        }\n        if (updateStreamList.length !== 0) {\n            this.logger.debug('zb.sh.husl callback updatestream');\n            this.onStreamExtraInfoUpdated(this.makeCallbackStreamList(updateStreamList));\n        }\n        this.logger.info('zb.sh.husl call success');\n    };\n    /*\n     *    \"zb.sh.fsl\": \"ZegoClient.base.StreamHandler.fetchStreamList\",\n     */\n    // 拉取服务端流信息\n    StreamHandler.prototype.fetchStreamList = function () {\n        this.logger.info('zb.sh.fsl call');\n        // 不是处于登录状态，不让拉流\n        if (this.stateCenter.isLogin()) {\n            this.logger.info('zb.sh.fsl state error');\n            return;\n        }\n        // 是否正处于拉流状态 false 为完成， true为正在拉流\n        if (this.stateCenter.streamQuerying) {\n            this.logger.info('zb.sh.fsl already doing');\n            return;\n        }\n        this.stateCenter.streamQuerying = true;\n        this.logger.debug('zb.sh.fsl send fetch request');\n        var bodyData = {\n            reserve: 0,\n        };\n        // 发送消息\n        this.socketCenter.registerRouter('stream_info', this.handleFetchStreamListRsp);\n        this.socketCenter.sendMessage('stream_info', bodyData);\n        this.logger.debug('zb.sh.fsl call success');\n    };\n    StreamHandler.prototype.makeCallbackStreamList = function (streamList) {\n        var callbackStreamList = [];\n        if (streamList && streamList.length > 0) {\n            for (var i = 0; i < streamList.length; i++) {\n                var streamInfo = {\n                    userId: streamList[i].anchor_id_name,\n                    userName: streamList[i].anchor_nick_name,\n                    extraInfo: streamList[i].extra_info,\n                    streamId: streamList[i].stream_id,\n                    roomId: '',\n                    urlsFlv: '',\n                    urlsRtmp: '',\n                    urlsHls: '',\n                    urlsHttpsFlv: '',\n                    urlsHttpsHls: '',\n                };\n                this.setCDNInfo(streamInfo, streamList[i]);\n                callbackStreamList.push(streamInfo);\n            }\n        }\n        return callbackStreamList;\n    };\n    /*\n     *    \"zb.sh.ums\": \"ZegoClient.base.StreamHandler.updateMixStream\",\n     */\n    StreamHandler.prototype.updateMixStream = function (mixStreamConfig, successCallback, errorCallback) {\n        var _this = this;\n        this.logger.info('zb.sh.ums call');\n        var isVP8 = false;\n        if (!mixStreamConfig.taskId) {\n            this.logger.error('zb.sh.ums no taskId found');\n            return false;\n        }\n        if (mixStreamConfig.inputList.length == 0) {\n            this.logger.error('zb.sh.ums no input stream');\n            return false;\n        }\n        if (mixStreamConfig.outputList.length == 0) {\n            this.logger.error('zb.sh.ums no output list found');\n            return false;\n        }\n        var req_body = {\n            task_id: mixStreamConfig.taskId,\n            id_name: this.stateCenter.idName,\n            live_channel: this.stateCenter.roomid,\n            appid: this.stateCenter.appid,\n            version: zego_entity_1.PROTO_VERSION,\n        };\n        if (mixStreamConfig.advance &&\n            mixStreamConfig.advance.userData &&\n            typeof mixStreamConfig.advance.userData == 'string' &&\n            mixStreamConfig.advance.userData.length <= 10000) {\n            req_body['UserData'] = mixStreamConfig.advance.userData;\n        }\n        if (mixStreamConfig.advance && mixStreamConfig.advance.videoCodec) {\n            if (mixStreamConfig.advance.videoCodec !== 'h264' && mixStreamConfig.advance.videoCodec !== 'vp8') {\n                this.logger.error('zb.sh.ums param videoCode error');\n            }\n            if (mixStreamConfig.advance.videoCodec == 'vp8') {\n                isVP8 = true;\n            }\n            req_body['extra_params'] = [{ key: 'video_encode', value: mixStreamConfig.advance.videoCodec }];\n        }\n        var mixInput = [];\n        for (var i = 0; i < mixStreamConfig.inputList.length; i++) {\n            var streamInfo = mixStreamConfig.inputList[i];\n            var totalStreamId = streamInfo.streamId;\n            if (this.stateCenter.testEnvironment) {\n                totalStreamId = 'zegotest-' + this.stateCenter.appid + '-' + streamInfo.streamId;\n            }\n            mixInput.push({\n                stream_id: totalStreamId,\n                rect: {\n                    layer: i,\n                    top: streamInfo.layout.top,\n                    left: streamInfo.layout.left,\n                    bottom: streamInfo.layout.bottom,\n                    right: streamInfo.layout.right,\n                },\n            });\n        }\n        req_body['MixInput'] = mixInput;\n        var mixOutput = [];\n        mixStreamConfig.outputList.forEach(function (streamInfo) {\n            var outputStreamInfo = {};\n            if (streamInfo.streamId != undefined) {\n                if (_this.stateCenter.testEnvironment) {\n                    outputStreamInfo['stream_id'] = 'zegotest-' + _this.stateCenter.appid + '-' + streamInfo.streamId;\n                }\n                else {\n                    outputStreamInfo['stream_id'] = streamInfo.streamId;\n                }\n            }\n            else if (streamInfo.outputUrl != undefined) {\n                outputStreamInfo['mixurl'] = streamInfo.outputUrl;\n            }\n            else {\n                _this.logger.error('zb.sh.ums outputUrls wrong');\n                return false;\n            }\n            if (streamInfo.outputBitrate) {\n                outputStreamInfo['bitrate'] = streamInfo.outputBitrate;\n            }\n            else {\n                _this.logger.error('zb.sh.ums no bitrate param');\n                return false;\n            }\n            if (streamInfo.outputFps) {\n                outputStreamInfo['fps'] = streamInfo.outputFps;\n            }\n            else {\n                _this.logger.error('zb.sh.ums no fps param');\n                return false;\n            }\n            if (streamInfo.outputWidth) {\n                outputStreamInfo['width'] = streamInfo.outputWidth;\n            }\n            else {\n                _this.logger.error('zb.sh.ums no width param');\n                return false;\n            }\n            if (streamInfo.outputHeight) {\n                outputStreamInfo['height'] = streamInfo.outputHeight;\n            }\n            else {\n                _this.logger.error('zb.sh.ums no height param');\n                return false;\n            }\n            if (mixStreamConfig.advance) {\n                if (streamInfo.outputAudioConfig) {\n                    outputStreamInfo['audio_enc_id'] = isVP8 ? 3 : streamInfo.outputAudioConfig;\n                }\n                if (streamInfo.outputAudioBitrate) {\n                    outputStreamInfo['audio_bitrate'] = streamInfo.outputAudioBitrate;\n                }\n                if (streamInfo.outputAudioChannels) {\n                    outputStreamInfo['audio_channel_cnt'] = streamInfo.outputAudioChannels;\n                }\n            }\n            if (_this.stateCenter.testEnvironment) {\n                outputStreamInfo['testenv'] = 1;\n            }\n            else {\n                outputStreamInfo['testenv'] = 0;\n            }\n            mixOutput.push(outputStreamInfo);\n        });\n        if (mixStreamConfig.advance) {\n            if (mixStreamConfig.advance.outputBgColor) {\n                // mixOutput[\"output_bg_color\"] = mixStreamConfig.outputBgColor;\n                if (typeof mixStreamConfig.advance.outputBgColor !== 'number') {\n                    this.logger.error('zb.sh.ums param outputBgColor error');\n                    return false;\n                }\n                req_body['output_bg_color'] = mixStreamConfig.advance.outputBgColor;\n            }\n            if (mixStreamConfig.advance.outputBgImage) {\n                // mixOutput[\"output_bg_image\"] = mixStreamConfig.outputBgImage;\n                if (typeof mixStreamConfig.advance.outputBgImage !== 'string' ||\n                    !mixStreamConfig.advance.outputBgImage.startsWith('preset-id://')) {\n                    this.logger.error('zb.sh.ums param outputBgImage error');\n                    return false;\n                }\n                req_body['output_bg_image'] = mixStreamConfig.advance.outputBgImage;\n            }\n        }\n        req_body['MixOutput'] = mixOutput;\n        var body = {\n            channel: 'zeus',\n            cmd: 'start_mix',\n            req_body: JSON.stringify(req_body),\n        };\n        this.logger.debug('zb.sh.ums send command');\n        this.socketCenter.sendMessage('biz_channel', body, function (seq, cmd, rspBody) {\n            _this.logger.debug('zb.sh.ums receive message');\n            var prefix = 'zegotest-' + _this.stateCenter.appid + '-';\n            if (rspBody.length == 0) {\n                if (errorCallback) {\n                    errorCallback(client_util_1.ClientUtil.getServerError(zego_entity_1.MIXSTREAM_ERROR_CODE + 1));\n                }\n                return;\n            }\n            var data = JSON.parse(rspBody);\n            var mixPlayInfoList = [];\n            for (var i = 0; i < data.play.length; i++) {\n                var mixPlayInfo = {\n                    rtmpUrl: null,\n                    hlsUrl: null,\n                    flvUrl: null,\n                };\n                var streamId = data.play[i].stream_alias;\n                if (_this.stateCenter.testEnvironment && streamId && streamId.startsWith(prefix)) {\n                    streamId = streamId.slice(prefix.length);\n                }\n                mixPlayInfo['streamId'] = streamId;\n                if (data.play[i].rtmp_url && data.play[i].rtmp_url.length > 0) {\n                    mixPlayInfo.rtmpUrl = data.play[i].rtmp_url;\n                }\n                if (data.play[i].hls_url && data.play[i].hls_url.length > 0) {\n                    mixPlayInfo['hlsUrl'] = data.play[i].hls_url;\n                }\n                if (data.play[i].hdl_url && data.play[i].hdl_url.length > 0) {\n                    mixPlayInfo['flvUrl'] = data.play[i].hdl_url;\n                }\n                mixPlayInfoList.push(mixPlayInfo);\n            }\n            if (successCallback) {\n                successCallback(mixPlayInfoList);\n            }\n        }, function (error, seq, rspBody) {\n            if (typeof error == 'number') {\n                _this.logger.debug('zb.sh.ums error: ' + error);\n                var nonExistsStreamId = [];\n                if (error == 1000000150 && rspBody.length != 0) {\n                    //no stream list\n                    var data = JSON.parse(rspBody);\n                    var prefix = 'zegotest-' + _this.stateCenter.appid + '-';\n                    for (var i = 0; i < data.non_exist_streams.length; i++) {\n                        var totalStreamId = data.non_exist_streams[i];\n                        if (_this.stateCenter.testEnvironment && totalStreamId.startsWith(prefix)) {\n                            nonExistsStreamId.push(totalStreamId.slice(prefix.length));\n                        }\n                        else {\n                            nonExistsStreamId.push(totalStreamId);\n                        }\n                    }\n                }\n                if (errorCallback) {\n                    errorCallback(client_util_1.ClientUtil.getServerError(zego_entity_1.MIXSTREAM_ERROR_CODE + error));\n                }\n            }\n            else {\n                _this.logger.debug('zb.sh.ums error code ' + error.code);\n                if (errorCallback) {\n                    errorCallback(error);\n                }\n            }\n        });\n        return true;\n    };\n    StreamHandler.prototype.publishTarget = function (cdnPushConfig, success, error) {\n        var _this = this;\n        if (['addpush', 'delpush', 'clearpush'].indexOf(cdnPushConfig.type) == -1) {\n            this.logger.error('zb.sh.pt cdn push type error');\n            return;\n        }\n        this.logger.info('zb.sh.pt' + 'call');\n        if (!cdnPushConfig.streamId || typeof cdnPushConfig.streamId !== 'string') {\n            this.logger.error('zb.sh.pt' + ' streamid error');\n            return;\n        }\n        if (!cdnPushConfig.pushUrl || typeof cdnPushConfig.pushUrl !== 'string') {\n            this.logger.error('zb.sh.pt' + ' pushurl error');\n            return;\n        }\n        if (!this.stateCenter.publishStreamList[cdnPushConfig.streamId]) {\n            this.logger.error('zb.sh.pt' + ' publish stream no found');\n            return;\n        }\n        var timestamp = Math.ceil(new Date().getTime() / 1000);\n        var totalStreamId = cdnPushConfig.streamId;\n        if (this.stateCenter.testEnvironment) {\n            totalStreamId = 'zegotest-' + this.stateCenter.appid + '-' + cdnPushConfig.streamId;\n        }\n        var req_body = {\n            appid: this.stateCenter.appid,\n            biz_type: 0,\n            timestamp: timestamp,\n            seq: this.stateCenter.cdnSeq++,\n            version: zego_entity_1.PROTO_VERSION * 1,\n            stream_id: totalStreamId,\n            pushurl: cdnPushConfig.pushUrl,\n        };\n        var body = {\n            channel: 'media',\n            cmd: cdnPushConfig.type,\n            req_body: JSON.stringify(req_body),\n        };\n        this.logger.debug('zb.sh.pt' + ' send command');\n        this.socketCenter.sendMessage('biz_channel', body, function (seq, cmd, rspBody) {\n            _this.logger.debug('zb.sh.pt' + ' receive message');\n            if (rspBody.length == 0) {\n                error && error(client_util_1.ClientUtil.getServerError(zego_entity_1.MIXSTREAM_ERROR_CODE + 1));\n                return;\n            }\n            var data = JSON.parse(rspBody);\n            var code = data.code, message = data.message;\n            if (!code || code == 0) {\n                _this.logger.info('zb.sh.pt ' + cdnPushConfig.type + ' success');\n                success && success();\n            }\n            else {\n                _this.logger.error('zb.sh.pt ' + cdnPushConfig.type + ' error code: ' + code + ' ' + message);\n                error && error({ code: code, message: message });\n                return;\n            }\n        }, function (err, seq, rspbody) {\n            _this.logger.debug('zb.sh.pt error: ' + error);\n            var message = '';\n            if (err == 2001) {\n                message = 'invalid channel';\n            }\n            else if (err == 2002) {\n                message = 'bizchannel error';\n            }\n            error && error({ code: err, message: message });\n        });\n    };\n    /*\n     *    \"zb.sh.sms\": \"ZegoClient.base.StreamHandler.stopMixStream\",\n     */\n    //停止混流信令\n    StreamHandler.prototype.stopMixStream = function (taskid, successCallback, errorCallback) {\n        var _this = this;\n        this.logger.info('zb.sh.sms call');\n        if (!taskid || typeof taskid !== 'string') {\n            this.logger.error('zb.sh.sms taskid error');\n            return false;\n        }\n        var req_body = {\n            id_name: this.stateCenter.idName,\n            live_channel: this.stateCenter.roomid,\n            appid: this.stateCenter.appid,\n            version: zego_entity_1.PROTO_VERSION,\n            task_id: taskid,\n        };\n        var body = {\n            channel: 'zeus',\n            cmd: 'stop_mix',\n            req_body: JSON.stringify(req_body),\n        };\n        this.socketCenter.sendMessage('biz_channel', body, function () {\n            if (successCallback) {\n                successCallback();\n            }\n        }, function (error) {\n            if (typeof error == 'number') {\n                if (errorCallback) {\n                    errorCallback(client_util_1.ClientUtil.getServerError(zego_entity_1.MIXSTREAM_ERROR_CODE + error));\n                }\n            }\n            else {\n                _this.logger.error('zb.sh.sms stop mix fail ' + JSON.stringify(error));\n                if (errorCallback) {\n                    errorCallback(zego_error_1.commonErrorList.STOP_MIX_FAIL);\n                }\n            }\n        });\n        return true;\n    };\n    /*\n     *    \"zb.sh.usei\": \"ZegoClient.base.StreamHandler.updateStreamExtraInfo\",\n     */\n    StreamHandler.prototype.updateStreamExtraInfo = function (streamid, extraInfo) {\n        this.logger.info('zb.sh.usei call');\n        if (!streamid) {\n            this.logger.error('zb.sh.usei streamid wrong');\n            return false;\n        }\n        if (typeof extraInfo != 'string') {\n            return false;\n        }\n        if (this.stateCenter.publishStreamList[streamid]) {\n            this.stateCenter.publishStreamList[streamid].extra_info = extraInfo;\n            if (this.stateCenter.publishStreamList[streamid].state >= zego_entity_1.ENUM_PUBLISH_STREAM_STATE.update_info) {\n                this.updateStreamInfo(streamid, zego_entity_1.ENUM_STREAM_SUB_CMD.liveUpdate, extraInfo);\n            }\n        }\n        return true;\n    };\n    return StreamHandler;\n}());\nexports.StreamHandler = StreamHandler;\n\n\n/***/ }),\n\n/***/ \"./sdk/common/zego.datareport.ts\":\n/*!***************************************!*\\\n  !*** ./sdk/common/zego.datareport.ts ***!\n  \\***************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ZegoDataReport = /** @class */ (function () {\n    function ZegoDataReport(log) {\n        this.log = log;\n        this.dataStatistics = {};\n        this.logger = log;\n    }\n    ZegoDataReport.prototype.newReport = function (seq) {\n        this.dataStatistics[seq] = {\n            abs_time: Date.now(),\n            time_consumed: 0,\n            error: 0,\n            events: [],\n        };\n    };\n    ZegoDataReport.prototype.addMsgExt = function (seq, msg_ext) {\n        if (!this.dataStatistics[seq]) {\n            console.warn(seq + \" not exist\");\n            return;\n        }\n        this.dataStatistics[seq].msg_ext = msg_ext;\n    };\n    /*\n     *    \"zd.es.0\": \"ZegoDataReport.eventStart\"\n     */\n    ZegoDataReport.prototype.eventStart = function (seq, event_name) {\n        if (!this.dataStatistics[seq]) {\n            this.logger.warn('zd.es.0 no seq match');\n            return;\n        }\n        else if (this.dataStatistics[seq].events == undefined) {\n            this.logger.warn('zd.es.0 no events');\n            return;\n        }\n        this.dataStatistics[seq].events.push({\n            event: event_name,\n            abs_time: Date.now(),\n            time_consumed: 0,\n        });\n    };\n    /*\n     *    \"zd.ee.0\": \"ZegoDataReport.eventStart\"\n     */\n    ZegoDataReport.prototype.eventEnd = function (seq, event_name, extInfo) {\n        if (!this.dataStatistics[seq]) {\n            this.logger.info('zd.ee.0 no seq match');\n            return;\n        }\n        var events = this.dataStatistics[seq].events;\n        if (!events || events.length === 0) {\n            this.logger.info('zd.ee.0 no events');\n            return;\n        }\n        for (var i = events.length - 1; i >= 0; i--) {\n            if (events[i].event == event_name && events[i].time_consumed) {\n                events[i].time_consumed = Date.now() - events[i].abs_time;\n                break;\n            }\n        }\n    };\n    ZegoDataReport.prototype.eventEndWithMsg = function (seq, event_name, msg_ext) {\n        if (!this.dataStatistics[seq]) {\n            this.logger.warn('zd.ee.0 no seq match');\n            return;\n        }\n        var events = this.dataStatistics[seq].events;\n        if (!events) {\n            this.logger.warn('zd.ee.0 no events');\n            return;\n        }\n        for (var i = events.length - 1; i >= 0; i--) {\n            if (events[i].event == event_name && events[i].time_consumed) {\n                events[i].time_consumed = Date.now() - events[i].abs_time;\n                if (events[i].msg_ext == undefined) {\n                    events[i].msg_ext = {};\n                }\n                events[i].msg_ext = __assign({}, msg_ext);\n                break;\n            }\n        }\n    };\n    /*\n     *    \"zd.aei.0\": \"ZegoDataReport.addEventInfo\"\n     */\n    ZegoDataReport.prototype.addEventInfo = function (seq, event_name, key, value) {\n        if (!this.dataStatistics[seq]) {\n            this.logger.warn('zd.aei.0 no seq match');\n            return;\n        }\n        var events = this.dataStatistics[seq].events;\n        if (events == undefined) {\n            this.logger.warn('zd.aei.0 no events');\n            return;\n        }\n        for (var i = events.length - 1; i >= 0; i--) {\n            if (events[i].event == event_name && events[i].time_consumed != undefined) {\n                if (events[i].event == event_name && events[i].time_consumed != undefined) {\n                    if (events[i].msg_ext == undefined) {\n                        events[i].msg_ext = {};\n                    }\n                    else if (events[i].msg_ext) {\n                        events[i].msg_ext[key] = value;\n                    }\n                    break;\n                }\n            }\n        }\n    };\n    /*\n     *    \"zd.ae.0\": \"ZegoDataReport.addEvent\"\n     */\n    ZegoDataReport.prototype.addEvent = function (seq, event_name, msg_ext) {\n        if (!this.dataStatistics[seq]) {\n            this.logger.warn('zd.ae.0 no seq match');\n            return;\n        }\n        if (!this.dataStatistics[seq].events) {\n            return;\n        }\n        if (msg_ext) {\n            this.dataStatistics[seq].events.push({\n                event: event_name,\n                abs_time: Date.now(),\n                msg_ext: msg_ext,\n            });\n        }\n        else {\n            this.dataStatistics[seq].events.push({\n                event: event_name,\n                abs_time: Date.now(),\n            });\n        }\n    };\n    ZegoDataReport.prototype.uploadReport = function (seq, itemType) {\n        var reportInfo = this.dataStatistics[seq];\n        if (reportInfo == undefined) {\n            return;\n        }\n        reportInfo.itemtype = itemType;\n        reportInfo.time_consumed = Date.now() - reportInfo.abs_time;\n        this.logger.report(reportInfo);\n        delete this.dataStatistics[seq];\n    };\n    return ZegoDataReport;\n}());\nexports.ZegoDataReport = ZegoDataReport;\n\n\n/***/ }),\n\n/***/ \"./sdk/common/zego.entity.ts\":\n/*!***********************************!*\\\n  !*** ./sdk/common/zego.entity.ts ***!\n  \\***********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PROTO_VERSION = \"1.0.0\";\nexports.ROOMVERSION = \"V1\";\nvar ENUM_LOG_LEVEL;\n(function (ENUM_LOG_LEVEL) {\n    ENUM_LOG_LEVEL[ENUM_LOG_LEVEL[\"debug\"] = 0] = \"debug\";\n    ENUM_LOG_LEVEL[ENUM_LOG_LEVEL[\"info\"] = 1] = \"info\";\n    ENUM_LOG_LEVEL[ENUM_LOG_LEVEL[\"warn\"] = 2] = \"warn\";\n    ENUM_LOG_LEVEL[ENUM_LOG_LEVEL[\"error\"] = 3] = \"error\";\n    ENUM_LOG_LEVEL[ENUM_LOG_LEVEL[\"report\"] = 99] = \"report\";\n    ENUM_LOG_LEVEL[ENUM_LOG_LEVEL[\"disable\"] = 100] = \"disable\";\n})(ENUM_LOG_LEVEL = exports.ENUM_LOG_LEVEL || (exports.ENUM_LOG_LEVEL = {}));\nvar ENUM_REMOTE_TYPE;\n(function (ENUM_REMOTE_TYPE) {\n    ENUM_REMOTE_TYPE[ENUM_REMOTE_TYPE[\"disable\"] = 0] = \"disable\";\n    ENUM_REMOTE_TYPE[ENUM_REMOTE_TYPE[\"websocket\"] = 1] = \"websocket\";\n    ENUM_REMOTE_TYPE[ENUM_REMOTE_TYPE[\"https\"] = 2] = \"https\";\n})(ENUM_REMOTE_TYPE = exports.ENUM_REMOTE_TYPE || (exports.ENUM_REMOTE_TYPE = {}));\nexports.sdkErrorList = {\n    CLIENT: 'Client.',\n    SERVER: 'Server.',\n    SUCCESS: {\n        code: 'Success',\n        msg: 'success.'\n    },\n    PARAM: {\n        code: 'Error.Param',\n        msg: 'input error.'\n    },\n    HEARTBEAT_TIMEOUT: {\n        code: 'Error.Timeout',\n        msg: 'heartbeat timeout.'\n    },\n    LOGIN_TIMEOUT: {\n        code: 'Error.Timeout',\n        msg: 'login timeout.'\n    },\n    SEND_MSG_TIMEOUT: {\n        code: 'Error.Timeout',\n        msg: 'send customsg timeout.'\n    },\n    RESET_QUEUE: {\n        code: 'Error.Timeout',\n        msg: 'msg waiting ack is clear when reset.'\n    },\n    LOGIN_DISCONNECT: {\n        code: 'Error.Network',\n        msg: 'network is broken and login fail.'\n    },\n    KICK_OUT: {\n        code: 'Error.Kickout',\n        msg: 'kickout reason='\n    },\n    UNKNOWN: {\n        code: 'Error.Unknown',\n        msg: 'unknown error.'\n    },\n    FREQ_LIMITED: {\n        code: 'Error.requencyLimited',\n        msg: 'Frequency Limited.'\n    }\n    // SIGNAL_DISCONNECT: {\n    //     code: \"ZegoClient.Error.Timeout\",\n    //     msg: \"WebRTC Signal broken\"\n    // }\n};\nvar ENUM_SIGNAL_STATE;\n(function (ENUM_SIGNAL_STATE) {\n    ENUM_SIGNAL_STATE[ENUM_SIGNAL_STATE[\"disconnected\"] = 0] = \"disconnected\";\n    ENUM_SIGNAL_STATE[ENUM_SIGNAL_STATE[\"connecting\"] = 1] = \"connecting\";\n    ENUM_SIGNAL_STATE[ENUM_SIGNAL_STATE[\"connected\"] = 2] = \"connected\";\n})(ENUM_SIGNAL_STATE = exports.ENUM_SIGNAL_STATE || (exports.ENUM_SIGNAL_STATE = {}));\nexports.ENUM_RESOLUTION_TYPE = {\n    LOW: {\n        width: 240,\n        height: 320,\n        frameRate: 15,\n        bitRate: 300\n    },\n    MEDIUM: {\n        width: 480,\n        height: 640,\n        frameRate: 15,\n        bitRate: 800\n    },\n    HIGH: {\n        width: 720,\n        height: 1280,\n        frameRate: 20,\n        bitRate: 1500\n    }\n};\nexports.ENUM_SCREEM_RESOLUTION_TYPE = {\n    LOW: {\n        width: 720,\n        height: 480,\n        frameRate: 25,\n        bitRate: 300\n    },\n    MEDIUM: {\n        width: 1280,\n        height: 720,\n        frameRate: 30,\n        bitRate: 800\n    },\n    HIGH: {\n        width: 1920,\n        height: 1080,\n        frameRate: 30,\n        bitRate: 1500\n    }\n};\nexports.ENUM_RETRY_STATE = {\n    didNotStart: 0,\n    retrying: 1,\n    finished: 2\n};\nexports.ENUM_PUBLISH_STATE = {\n    start: 0,\n    waitingSessionRsp: 1,\n    waitingOffserRsp: 2,\n    waitingServerAnswer: 3,\n    waitingServerICE: 4,\n    connecting: 5,\n    publishing: 6,\n    stop: 7,\n    didNotStart: 8\n};\nexports.ENUM_PLAY_STATE = {\n    start: 0,\n    waitingSessionRsp: 1,\n    waitingOffserRsp: 2,\n    waitingServerAnswer: 3,\n    waitingServerICE: 4,\n    connecting: 5,\n    playing: 6,\n    stop: 7,\n    didNotStart: 8\n};\nexports.ENUM_CONNECT_STATE = { disconnect: 0, connecting: 1, connected: 2 };\nexports.MAX_TRY_CONNECT_COUNT = 3;\nexports.SEND_MSG_RESET = 2;\nexports.SEND_MSG_TIMEOUT = 1;\nexports.MAX_TRY_HEARTBEAT_COUNT = 5;\nexports.ENUM_PUBLISH_STREAM_STATE = {\n    waiting_url: 1,\n    tryPublish: 2,\n    update_info: 3,\n    publishing: 4,\n    stop: 5\n};\nexports.ENUM_STREAM_SUB_CMD = {\n    liveNone: 0,\n    liveBegin: 2001,\n    liveEnd: 2002,\n    liveUpdate: 2003\n};\nexports.ENUM_STREAM_UPDATE_TYPE = {\n    added: 0,\n    deleted: 1\n};\n//运行状态\nvar ENUM_RUN_STATE;\n(function (ENUM_RUN_STATE) {\n    ENUM_RUN_STATE[ENUM_RUN_STATE[\"logout\"] = 0] = \"logout\";\n    ENUM_RUN_STATE[ENUM_RUN_STATE[\"trylogin\"] = 1] = \"trylogin\";\n    ENUM_RUN_STATE[ENUM_RUN_STATE[\"login\"] = 2] = \"login\";\n})(ENUM_RUN_STATE = exports.ENUM_RUN_STATE || (exports.ENUM_RUN_STATE = {}));\nexports.ENUM_PUBLISH_STATE_UPDATE = {\n    start: 0,\n    error: 1,\n    retry: 2\n};\nexports.ENUM_PLAY_STATE_UPDATE = {\n    start: 0,\n    error: 1,\n    retry: 2\n};\nexports.MAX_TRY_LOGIN_COUNT = 5; //最大重试登录次数\nexports.TRY_LOGIN_INTERVAL = [2000, 2000, 3000, 3000, 4000]; //重试登录的频率\nexports.MINIUM_HEARTBEAT_INTERVAL = 3000; //最小心跳尝试间隔\nexports.ENUM_STREAM_UPDATE_CMD = {\n    added: 12001,\n    deleted: 12002,\n    updated: 12003\n};\nexports.SERVER_ERROR_CODE = 10000;\nexports.MIXSTREAM_ERROR_CODE = 10000;\nvar QUALITYLEVEL;\n(function (QUALITYLEVEL) {\n    QUALITYLEVEL[QUALITYLEVEL[\"low\"] = 1] = \"low\";\n    QUALITYLEVEL[QUALITYLEVEL[\"stantard\"] = 2] = \"stantard\";\n    QUALITYLEVEL[QUALITYLEVEL[\"hight\"] = 3] = \"hight\";\n    QUALITYLEVEL[QUALITYLEVEL[\"custome\"] = 4] = \"custome\";\n})(QUALITYLEVEL = exports.QUALITYLEVEL || (exports.QUALITYLEVEL = {}));\nexports.ENUM_SIGNAL_SUB_CMD = {\n    none: 0,\n    joinLiveRequest: 1001,\n    joinLiveResult: 1002,\n    joinLiveInvite: 1003,\n    joinLiveStop: 1004\n};\nexports.ENUM_PUSH_SIGNAL_SUB_CMD = {\n    none: 0,\n    pushJoinLiveRequest: 11001,\n    pushJoinLiveResult: 11002,\n    pushJoinLiveInvite: 11003,\n    pushJoinLiveStop: 11004\n};\n//拉流选择\nvar ENUM_PLAY_SOURCE_TYPE;\n(function (ENUM_PLAY_SOURCE_TYPE) {\n    ENUM_PLAY_SOURCE_TYPE[ENUM_PLAY_SOURCE_TYPE[\"auto\"] = 0] = \"auto\";\n    ENUM_PLAY_SOURCE_TYPE[ENUM_PLAY_SOURCE_TYPE[\"ultra\"] = 1] = \"ultra\";\n})(ENUM_PLAY_SOURCE_TYPE = exports.ENUM_PLAY_SOURCE_TYPE || (exports.ENUM_PLAY_SOURCE_TYPE = {}));\n//推流选择\nvar ENUM_DISPATCH_TYPE;\n(function (ENUM_DISPATCH_TYPE) {\n    ENUM_DISPATCH_TYPE[ENUM_DISPATCH_TYPE[\"cdn\"] = 0] = \"cdn\";\n    ENUM_DISPATCH_TYPE[ENUM_DISPATCH_TYPE[\"ultra\"] = 1] = \"ultra\";\n    ENUM_DISPATCH_TYPE[ENUM_DISPATCH_TYPE[\"customUrl\"] = 2] = \"customUrl\";\n})(ENUM_DISPATCH_TYPE = exports.ENUM_DISPATCH_TYPE || (exports.ENUM_DISPATCH_TYPE = {}));\nvar E_CLIENT_TYPE;\n(function (E_CLIENT_TYPE) {\n    E_CLIENT_TYPE[E_CLIENT_TYPE[\"ClientType_None\"] = 0] = \"ClientType_None\";\n    E_CLIENT_TYPE[E_CLIENT_TYPE[\"ClientType_H5\"] = 1] = \"ClientType_H5\";\n    E_CLIENT_TYPE[E_CLIENT_TYPE[\"ClientType_SmallPragram\"] = 2] = \"ClientType_SmallPragram\";\n    E_CLIENT_TYPE[E_CLIENT_TYPE[\"ClientType_Webrtc\"] = 3] = \"ClientType_Webrtc\"; //webrtc\n})(E_CLIENT_TYPE = exports.E_CLIENT_TYPE || (exports.E_CLIENT_TYPE = {}));\nvar ListNode = /** @class */ (function () {\n    function ListNode(id, data) {\n        if (id === void 0) { id = null; }\n        if (data === void 0) { data = null; }\n        this._id = null;\n        this.next = null;\n        this.prev = null;\n        this._id = id;\n        this._data = data;\n    }\n    Object.defineProperty(ListNode.prototype, \"id\", {\n        get: function () {\n            if (this._id) {\n                return this._id;\n            }\n            else {\n                return null;\n            }\n        },\n        set: function (id) {\n            this._id = id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListNode.prototype, \"data\", {\n        get: function () {\n            return this._data;\n        },\n        set: function (data) {\n            this._data = data;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ListNode.prototype.hasNext = function () {\n        return this.next && this.next.id;\n    };\n    ListNode.prototype.hasPrev = function () {\n        return this.prev && this.prev.id;\n    };\n    return ListNode;\n}());\nexports.ListNode = ListNode;\nvar LinkedList = /** @class */ (function () {\n    function LinkedList() {\n        //initialize end buffer nodes\n        this.start = new ListNode();\n        this.end = new ListNode();\n        //initialize counters\n        this._idCounter = 0;\n        this._numNodes = 0;\n        //initialize node pointers\n        this.start.next = this.end;\n        this.start.prev = null;\n        this.end.prev = this.start;\n        this.end.next = null;\n    }\n    /**\n     *   Inserts a node before another node in the linked list\n     *   @param {Node} toInsertBefore\n     *   @param {Node} node\n     */\n    LinkedList.prototype.insertBefore = function (toInsertBefore, data) {\n        var newNode = new ListNode(this._idCounter, data);\n        newNode.next = toInsertBefore;\n        newNode.prev = toInsertBefore.prev;\n        if (toInsertBefore.prev)\n            toInsertBefore.prev.next = newNode;\n        toInsertBefore.prev = newNode;\n        ++this._idCounter;\n        ++this._numNodes;\n        return newNode;\n    };\n    /**\n     *   Adds data wrapped in a Node object to the end of the linked list\n     *   @param {object} data\n     */\n    LinkedList.prototype.addLast = function (data) {\n        return this.insertBefore(this.end, data);\n    };\n    /**\n     *   Alias for addLast\n     *   @param {object} data\n     */\n    LinkedList.prototype.add = function (data) {\n        return this.addLast(data);\n    };\n    /**\n     *   Gets and returns the first node in the linked list or null\n     *   @return {Node/null}\n     */\n    LinkedList.prototype.getFirst = function () {\n        if (this._numNodes === 0) {\n            return null;\n        }\n        else {\n            return this.start.next;\n        }\n    };\n    /**\n     *   Gets and returns the last node in the linked list or null\n     *   @return {Node/null}\n     */\n    LinkedList.prototype.getLast = function () {\n        if (this._numNodes === 0) {\n            return null;\n        }\n        else {\n            return this.end.prev;\n        }\n    };\n    /**\n     *   Gets and returns the size of the linked list\n     *   @return {number}\n     */\n    LinkedList.prototype.size = function () {\n        return this._numNodes;\n    };\n    /**\n     *   (Internal) Gets and returns the node at the specified index starting from the first in the linked list\n     *   Use getAt instead of this function\n     *   @param {number} index\n     */\n    LinkedList.prototype.getFromFirst = function (index) {\n        var count = 0, temp = this.start.next;\n        if (index >= 0) {\n            while (count < index && temp !== null) {\n                temp = temp.next;\n                ++count;\n            }\n        }\n        else {\n            temp = null;\n        }\n        if (temp === null) {\n            throw 'Index out of bounds.';\n        }\n        return temp;\n    };\n    /**\n     *   Gets and returns the Node at the specified index in the linked list\n     *   @param {number} index\n     */\n    LinkedList.prototype.get = function (index) {\n        var temp = null;\n        if (index === 0) {\n            temp = this.getFirst();\n        }\n        else if (index === this._numNodes - 1) {\n            temp = this.getLast();\n        }\n        else {\n            temp = this.getFromFirst(index);\n        }\n        return temp;\n    };\n    /**\n     *   Removes and returns node from the linked list by rearranging pointers\n     *   @param {Node} node\n     *   @return {Node}\n     */\n    LinkedList.prototype.remove = function (node) {\n        if (node.prev)\n            node.prev.next = node.next;\n        if (node.next)\n            node.next.prev = node.prev;\n        --this._numNodes;\n        return node;\n    };\n    /**\n     *   Removes and returns the first node in the linked list if it exists, otherwise returns null\n     *   @return {Node/null}\n     */\n    LinkedList.prototype.removeFirst = function () {\n        var temp = null;\n        if (this._numNodes > 0 && this.start.next) {\n            temp = this.remove(this.start.next);\n        }\n        return temp;\n    };\n    /**\n     *   Removes and returns the last node in the linked list if it exists, otherwise returns null\n     *   @return {Node/null}\n     */\n    LinkedList.prototype.removeLast = function () {\n        var temp = null;\n        if (this._numNodes > 0 && this.end.prev) {\n            temp = this.remove(this.end.prev);\n        }\n        return temp;\n    };\n    /**\n     *   Removes all nodes from the list\n     */\n    LinkedList.prototype.removeAll = function () {\n        this.start.next = this.end;\n        this.end.prev = this.start;\n        this._numNodes = 0;\n        this._idCounter = 0;\n    };\n    /**\n     *    Iterates the list calling the given fn for each node\n     *    @param {function} fn\n     */\n    LinkedList.prototype.each = function (iterator) {\n        var temp = this.start;\n        while (temp.hasNext()) {\n            temp = temp.next;\n            iterator(temp);\n        }\n    };\n    LinkedList.prototype.find = function (iterator) {\n        var temp = this.start, found = false, result = null;\n        while (temp.hasNext() && !found) {\n            temp = temp.next;\n            if (iterator(temp)) {\n                result = temp;\n                found = true;\n            }\n        }\n        return result;\n    };\n    LinkedList.prototype.map = function (iterator) {\n        var temp = this.start;\n        var results = [];\n        while (temp.hasNext()) {\n            temp = temp.next;\n            if (iterator(temp)) {\n                results.push(temp);\n            }\n        }\n        return results;\n    };\n    /**\n     *    Alias for addLast\n     *    @param {object} data\n     */\n    LinkedList.prototype.push = function (data) {\n        return this.addLast(data);\n    };\n    /**\n     *    Performs insertBefore on the first node\n     *    @param {object} data\n     */\n    LinkedList.prototype.unshift = function (data) {\n        if (this._numNodes > 0) {\n            this.insertBefore(this.start.next, data);\n        }\n        else {\n            this.insertBefore(this.end, data);\n        }\n    };\n    /**\n     *    Alias for removeLast\n     */\n    LinkedList.prototype.pop = function () {\n        return this.removeLast();\n    };\n    /**\n     *    Alias for removeFirst()\n     */\n    LinkedList.prototype.shift = function () {\n        return this.removeFirst();\n    };\n    return LinkedList;\n}());\nexports.LinkedList = LinkedList;\n\n\n/***/ }),\n\n/***/ \"./sdk/common/zego.error.ts\":\n/*!**********************************!*\\\n  !*** ./sdk/common/zego.error.ts ***!\n  \\**********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//200XXXXXXX\nexports.commonErrorList = {\n    SUCCESS: {\n        code: 'Success',\n        msg: 'success.',\n    },\n    INIT: {\n        code: 2000000001,\n        msg: 'init sdk wrong',\n    },\n    PARAM: {\n        code: 2000000002,\n        msg: 'input parm error.',\n    },\n    DETECT_TIMEOUT: {\n        code: 2000000003,\n        msg: 'detect time out',\n    },\n    DETECT_FAIL: {\n        code: 2000000004,\n        msg: 'detect fail',\n    },\n    SCREEN: {\n        code: 2000000005,\n        msg: 'screen sharing fail',\n    },\n    DEVICE_NO_FOUND: {\n        code: 2000000006,\n        msg: 'device no found',\n    },\n    ENUMERATE_DEVICES_FAIL: {\n        code: 2000000007,\n        msg: 'enumerate devices fail',\n    },\n    NOT_LOGIN: {\n        code: 2000000008,\n        msg: 'not login',\n    },\n    STOP_MIX_FAIL: {\n        code: 2000000009,\n        msg: 'stop mix stream fail',\n    },\n};\n//2001XXXXXX\nexports.liveRoomErrorList = {\n    SERVER: {\n        code: 0,\n        msg: 'liverooom cmd error',\n    },\n    KICK_OUT: {\n        code: 2001000001,\n        msg: 'liveroom kick out',\n    },\n    HEARTBEAT_TIMEOUT: {\n        code: 2001000002,\n        msg: 'heartbeat timeout.',\n    },\n    LOGIN_TIMEOUT: {\n        code: 2001000003,\n        msg: 'login timeout.',\n    },\n    SEND_MSG_TIMEOUT: {\n        code: 2001000004,\n        msg: 'send customsg timeout.',\n    },\n    RESET_QUEUE: {\n        code: 2001000005,\n        msg: 'msg waiting ack is clear when reset.',\n    },\n    LOGIN_DISCONNECT: {\n        code: 2001000006,\n        msg: 'network is broken and login fail.',\n    },\n    UNKNOWN: {\n        code: 2001000007,\n        msg: 'unknown error.',\n    },\n    FREQ_LIMITED: {\n        code: 2001000008,\n        msg: 'Frequency Limited.',\n    },\n};\n//2002XXXXXX\nexports.publishErrorList = {\n    PARAM: {\n        code: 2002000001,\n        msg: 'input parm error.',\n    },\n    BROWSER_NOT_SUPPORT: {\n        code: 2002000002,\n        msg: 'browser do not support',\n    },\n    DISPATCH_ERROR: {\n        code: 2002000003,\n        msg: 'dispatch request error',\n    },\n    DISPATCH_TIMEOUT: {\n        code: 2002000004,\n        msg: 'dispatch request timeout',\n    },\n    TOKEN_ERROR: {\n        code: 2002000005,\n        msg: 'login token error',\n    },\n    SEND_SESSION_TIMEOUT: {\n        code: 2002000006,\n        msg: 'send session request timeout',\n    },\n    CREATE_SESSION_ERROR: {\n        code: 2002000007,\n        msg: 'create session error',\n    },\n    CREATE_OFFER_ERROR: {\n        code: 2002000008,\n        msg: 'create offer error',\n    },\n    SET_LOCAL_DESC_ERROR: {\n        code: 2002000009,\n        msg: 'setLocalDescription error',\n    },\n    SEND_MEDIA_DESC_TIMEOUT: {\n        code: 2002000010,\n        msg: 'send mediaDesc timeout',\n    },\n    SERVER_MEDIA_DESC_TIMEOUT: {\n        code: 2002000011,\n        msg: 'waiting server mediaDesc timeout',\n    },\n    SERVER_MEDIA_DESC_ERROR: {\n        code: 2002000012,\n        msg: 'server mediaDesc type error',\n    },\n    SET_REMOTE_DESC_ERROR: {\n        code: 2002000013,\n        msg: 'other side offer error',\n    },\n    SEND_CANDIDATE_TIMEOUT: {\n        code: 2002000014,\n        msg: 'sendIceCandidate error',\n    },\n    SERVER_CANDIDATE_TIMEOUT: {\n        code: 2002000015,\n        msg: 'waiting candidate timeout',\n    },\n    SERVER_CANDIDATE_ERROR: {\n        code: 2002000016,\n        msg: 'recv candidate error',\n    },\n    SESSION_CLOSED: {\n        code: 2002000017,\n        msg: 'server session closed',\n    },\n    MEDIA_CONNECTION_FAILED: {\n        code: 2002000018,\n        msg: 'Iice Connection state failed',\n    },\n    MEDIA_CONNECTION_CLOSED: {\n        code: 2002000019,\n        msg: 'ice connection state closed',\n    },\n    WEBSOCKET_ERROR: {\n        code: 2002000020,\n        msg: 'network error',\n    },\n};\n//2003XXXXXX\nexports.playErrorList = {\n    PARAM: {\n        code: 2003000001,\n        msg: 'input parm error.',\n    },\n    STATE_FAIL: {\n        code: 2003000002,\n        msg: 'set play state fail',\n    },\n    DISPATCH_ERROR: {\n        code: 2003000003,\n        msg: 'dispatch request error',\n    },\n    DISPATCH_TIMEOUT: {\n        code: 2003000004,\n        msg: 'dispatch request timeout',\n    },\n    TOKEN_ERROR: {\n        code: 2003000005,\n        msg: 'login token error',\n    },\n    SEND_SESSION_TIMEOUT: {\n        code: 2003000006,\n        msg: 'send session request timeout',\n    },\n    CREATE_SESSION_ERROR: {\n        code: 2003000007,\n        msg: 'create session error',\n    },\n    CREATE_OFFER_ERROR: {\n        code: 2003000008,\n        msg: 'create offer error',\n    },\n    SERVER_MEDIA_DESC_TIMEOUT: {\n        code: 2003000009,\n        msg: 'wating server mediaDesc timeout',\n    },\n    SET_REMOTE_DESC_ERROR: {\n        code: 2003000010,\n        msg: 'other side offer error',\n    },\n    CREATE_ANSWER_ERROR: {\n        code: 2003000011,\n        msg: 'create offer error',\n    },\n    SET_LOCAL_DESC_ERROR: {\n        code: 2003000012,\n        msg: 'setLocalDescription error',\n    },\n    SEND_MEDIA_DESC_TIMEOUT: {\n        code: 2003000013,\n        msg: 'send mediaDesc timeout',\n    },\n    SEND_CANDIDATE_ERROR: {\n        code: 2003000014,\n        msg: 'send candidate error',\n    },\n    SEND_CANDIDATE_TIMEOUT: {\n        code: 2003000015,\n        msg: 'send candidate timeout',\n    },\n    SERVER_CANDIDATE_TIMEOUT: {\n        code: 2003000016,\n        msg: 'waiting candidate timeout',\n    },\n    SERVER_CANDIDATE_ERROR: {\n        code: 2003000017,\n        msg: 'recv candidate error',\n    },\n    MEDIA_CONNECTION_FAILED: {\n        code: 2003000018,\n        msg: 'ice Connection state failed',\n    },\n    MEDIA_CONNECTION_CLOSED: {\n        code: 2003000019,\n        msg: 'ice connection state closed',\n    },\n    SESSION_CLOSED: {\n        code: 2003000020,\n        msg: 'server session closed',\n    },\n    WEBSOCKET_ERROR: {\n        code: 2003000021,\n        msg: 'network error',\n    },\n};\n\n\n/***/ }),\n\n/***/ \"./sdk/common/zego.extern.ts\":\n/*!***********************************!*\\\n  !*** ./sdk/common/zego.extern.ts ***!\n  \\***********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ENUM_PUBLISH_STATE_UPDATE = {\n    start: 0,\n    error: 1,\n    retry: 2,\n};\nexports.ENUM_PLAY_STATE_UPDATE = {\n    start: 0,\n    error: 1,\n    retry: 2,\n    stop: 3,\n};\nexports.ENUM_RETRY_STATE = {\n    didNotStart: 0,\n    retrying: 1,\n    finished: 2,\n};\nexports.getSeq = (function () {\n    var seq = 1;\n    return function () {\n        return seq++;\n    };\n})();\n\n\n/***/ }),\n\n/***/ \"./sdk/common/zego.logger.ts\":\n/*!***********************************!*\\\n  !*** ./sdk/common/zego.logger.ts ***!\n  \\***********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zego_entity_1 = __webpack_require__(/*! ./zego.entity */ \"./sdk/common/zego.entity.ts\");\nexports.D = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09'];\nvar Logger = /** @class */ (function () {\n    function Logger() {\n        this.logLevel = zego_entity_1.ENUM_LOG_LEVEL.info;\n        this.logUploadTimer = null;\n        this.logUploadInterval = 1000 * 10;\n        this.logCache = [];\n        this.logCacheSend = [];\n        this.logCacheMax = 100;\n    }\n    Logger.prototype.setLogLevel = function (logLevel) {\n        if (this.logLevel < zego_entity_1.ENUM_LOG_LEVEL.debug || this.logLevel > zego_entity_1.ENUM_LOG_LEVEL.report) {\n            this.logLevel = zego_entity_1.ENUM_LOG_LEVEL.disable;\n        }\n        else {\n            this.logLevel = logLevel;\n        }\n    };\n    Logger.prototype.setRemoteLogLevel = function (logLevel) {\n        if (this.logRemoteLevel < zego_entity_1.ENUM_LOG_LEVEL.debug || this.logRemoteLevel > zego_entity_1.ENUM_LOG_LEVEL.report) {\n            this.logRemoteLevel = zego_entity_1.ENUM_LOG_LEVEL.disable;\n        }\n        else {\n            this.logRemoteLevel = logLevel;\n        }\n    };\n    Logger.prototype.setSessionInfo = function (appid, roomid, sessionid, userid, userName, version) {\n        this.appid = appid;\n        this.roomid = roomid;\n        this.sessionid = sessionid;\n        this.userid = userid;\n        this.userName = userName;\n        this.version = version;\n    };\n    Logger.prototype.openLogServer = function (url) {\n        try {\n            if (url.startsWith('wss:')) {\n                this.logType = zego_entity_1.ENUM_REMOTE_TYPE.websocket;\n                this.openWebSocketLogServer(url);\n            }\n            else if (url.startsWith('https:')) {\n                this.logType = zego_entity_1.ENUM_REMOTE_TYPE.https;\n                this.openHttpsLogServer(url);\n            }\n            else {\n                this.logType = zego_entity_1.ENUM_REMOTE_TYPE.disable;\n            }\n        }\n        catch (e) {\n            this.error(JSON.stringify(e));\n        }\n    };\n    Logger.prototype.stopLogServer = function () {\n        if (this.logType == zego_entity_1.ENUM_REMOTE_TYPE.websocket) {\n            this.stopWebSocketServer();\n        }\n        else if (this.logType == zego_entity_1.ENUM_REMOTE_TYPE.https) {\n            //send last data\n            this.SendHttpsLog();\n            this.stopHttpsServer();\n        }\n        this.logType = zego_entity_1.ENUM_REMOTE_TYPE.disable;\n    };\n    Logger.prototype.stopWebSocketServer = function () {\n        if (this.websocket) {\n            this.websocket.onclose = null;\n            this.websocket.onerror = null;\n            this.websocket.close();\n            this.websocket = null;\n        }\n    };\n    Logger.prototype.openHttpsLogServer = function (url) {\n        var _this = this;\n        this.url = url;\n        if (!url) {\n            return;\n        }\n        this.stopHttpsServer();\n        //start timer\n        if (!this.logUploadTimer) {\n            this.logUploadTimer = setInterval(function () {\n                _this.SendHttpsLog();\n            }, this.logUploadInterval);\n        }\n    };\n    Logger.prototype.stopHttpsServer = function () {\n        //stop timer\n        if (this.logUploadTimer) {\n            clearInterval(this.logUploadTimer);\n            this.logUploadTimer = null;\n        }\n    };\n    Logger.prototype.report = function (dataItem) {\n        var log = this.logReportParamList(zego_entity_1.ENUM_LOG_LEVEL.report, dataItem);\n        if (this.logLevel !== zego_entity_1.ENUM_LOG_LEVEL.disable && this.logLevel <= zego_entity_1.ENUM_LOG_LEVEL.report) {\n            console.debug(log);\n        }\n        //report 立即上报\n        this.RemoteLog(zego_entity_1.ENUM_LOG_LEVEL.report, log, true);\n    };\n    Logger.prototype.debug = function () {\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        var log = this.logParamList(zego_entity_1.ENUM_LOG_LEVEL.debug, values.join(''));\n        if (this.logLevel !== zego_entity_1.ENUM_LOG_LEVEL.disable && this.logLevel <= zego_entity_1.ENUM_LOG_LEVEL.debug) {\n            console.debug(log);\n        }\n        this.log(zego_entity_1.ENUM_LOG_LEVEL.debug, log);\n    };\n    Logger.prototype.info = function () {\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        var log = this.logParamList(zego_entity_1.ENUM_LOG_LEVEL.info, values.join(''));\n        if (this.logLevel !== zego_entity_1.ENUM_LOG_LEVEL.disable && this.logLevel <= zego_entity_1.ENUM_LOG_LEVEL.info) {\n            console.info(log);\n        }\n        this.log(zego_entity_1.ENUM_LOG_LEVEL.info, log);\n    };\n    Logger.prototype.warn = function () {\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        var log = this.logParamList(zego_entity_1.ENUM_LOG_LEVEL.warn, values.join(''));\n        if (this.logLevel !== zego_entity_1.ENUM_LOG_LEVEL.disable && this.logLevel <= zego_entity_1.ENUM_LOG_LEVEL.warn) {\n            console.warn(log);\n        }\n        this.log(zego_entity_1.ENUM_LOG_LEVEL.warn, log);\n    };\n    Logger.prototype.error = function () {\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        var log = this.logParamList(zego_entity_1.ENUM_LOG_LEVEL.error, values.join(''));\n        if (this.logLevel !== zego_entity_1.ENUM_LOG_LEVEL.disable && this.logLevel <= zego_entity_1.ENUM_LOG_LEVEL.error) {\n            console.error(log);\n        }\n        this.log(zego_entity_1.ENUM_LOG_LEVEL.error, log);\n    };\n    Logger.prototype.log = function (level, log) {\n        if (this.logRemoteLevel !== zego_entity_1.ENUM_LOG_LEVEL.disable && this.logRemoteLevel <= level) {\n            this.RemoteLog(level, log);\n        }\n    };\n    Logger.prototype.RemoteLog = function (level, log, force) {\n        if (force === void 0) { force = false; }\n        if (this.url == '') {\n            return;\n        }\n        if (this.logType == zego_entity_1.ENUM_REMOTE_TYPE.websocket) {\n            this.RemoteWebSocketLog(level, log);\n        }\n        else if (this.logType == zego_entity_1.ENUM_REMOTE_TYPE.https) {\n            this.RemoteHttpsLog(level, log, force);\n        }\n        else if (this.logLevel !== zego_entity_1.ENUM_LOG_LEVEL.disable && this.logLevel <= level) {\n            this.logCacheSend.push(log);\n            while (this.logCacheSend.length > this.logCacheMax) {\n                this.logCacheSend.shift();\n            }\n        }\n    };\n    Logger.prototype.RemoteWebSocketLog = function (level, log) {\n        if (this.websocket == null || this.websocket.readyState == 2 || this.websocket.readyState == 3) {\n            var url = this.url;\n            this.url = '';\n            this.openLogServer(url);\n            if (this.logCacheSend.length < this.logCacheMax) {\n                this.logCacheSend.push(log);\n            }\n        }\n        else if (this.websocket.readyState == 0) {\n            if (this.logCacheSend.length < this.logCacheMax) {\n                this.logCacheSend.push(log);\n            }\n        }\n        else if (this.websocket.readyState == 1) {\n            if (this.logCacheSend.length > 0) {\n                var logBefore = '';\n                for (var i = 0; i < this.logCacheSend.length; i++) {\n                    if ((logBefore + this.logCacheSend[i]).length > 4000) {\n                        //console.warn('logBefore.length 4000',logBefore.length,logBefore);\n                        this.websocket.send(logBefore);\n                        logBefore = '';\n                    }\n                    logBefore = logBefore + this.logCacheSend[i] + '\\n';\n                }\n                log = logBefore + log;\n                this.logCacheSend = [];\n                //console.warn('logBefore length',logBefore.length,logBefore);\n                this.websocket.send(log);\n            }\n            else {\n                //console.warn('log length',log.join(\"\\n\").length,log);\n                this.websocket.send(log);\n            }\n        }\n        else {\n            console.warn('wrong socket state:' + this.websocket.readyState);\n            if (this.logCacheSend.length < this.logCacheMax) {\n                this.logCacheSend.push(log);\n            }\n        }\n    };\n    Logger.prototype.RemoteHttpsLog = function (level, log, force) {\n        this.logCacheSend.push(log);\n        if (this.logCacheSend.length >= this.logCacheMax || force === true) {\n            this.SendHttpsLog();\n        }\n    };\n    Logger.prototype.logParamList = function (level, logInfo) {\n        var t = new Date();\n        var stringTime = t.getFullYear() + '/';\n        stringTime += (exports.D[t.getMonth() + 1] || t.getMonth() + 1) + '/';\n        stringTime += (exports.D[t.getDate()] || t.getDate()) + ' ';\n        stringTime += (exports.D[t.getHours()] || t.getHours()) + ':';\n        stringTime += (exports.D[t.getMinutes()] || t.getMinutes()) + ':';\n        stringTime += exports.D[t.getSeconds()] || t.getSeconds();\n        stringTime += '.' + (t.getTime() % 1000);\n        //get first space from logInfo\n        var action = logInfo.substr(0, logInfo.indexOf(' '));\n        if (action.length == 0) {\n            action = logInfo;\n        }\n        var content = logInfo.substr(logInfo.indexOf(' ') + 1, 4500);\n        if (content.length == 0) {\n            content = '';\n        }\n        var s = {\n            time: stringTime,\n            level: level,\n            action: action,\n            content: content,\n            appid: this.appid,\n            roomid: this.roomid,\n            userid: this.userid,\n            userName: this.userName,\n            sessionid: this.sessionid,\n        };\n        return JSON.stringify(s);\n    };\n    return Logger;\n}());\nexports.Logger = Logger;\n\n\n/***/ }),\n\n/***/ \"./sdk/util/client-util.ts\":\n/*!*********************************!*\\\n  !*** ./sdk/util/client-util.ts ***!\n  \\*********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zego_error_1 = __webpack_require__(/*! ../common/zego.error */ \"./sdk/common/zego.error.ts\");\nvar ClientUtil = /** @class */ (function () {\n    function ClientUtil() {\n    }\n    ClientUtil.checkConfigParam = function (appid, server, idName, logger) {\n        if (!appid || typeof appid !== 'number') {\n            logger.error('ccp.0 appid must be number and not empty');\n            return false;\n        }\n        if (!server || typeof server !== 'string') {\n            logger.error('ccp.0 server must be string and not empty');\n            return false;\n        }\n        if (!idName || typeof idName !== 'string') {\n            logger.error('ccp.0 idName must be string and not empty');\n            return false;\n        }\n        return true;\n    };\n    ClientUtil.registerCallback = function (fName, option, callbackList) {\n        var sf, ef;\n        if (option.success) {\n            sf = option.success;\n            callbackList[fName + 'SuccessCallback'] = sf;\n        }\n        if (option.error) {\n            ef = option.error;\n            callbackList[fName + 'ErrorCallback'] = ef;\n        }\n    };\n    ClientUtil.actionErrorCallback = function (fName, callbackList) {\n        return callbackList[fName + 'ErrorCallback'];\n    };\n    // 执行成功回调函数\n    ClientUtil.actionSuccessCallback = function (fName, callbackList) {\n        return callbackList[fName + 'SuccessCallback'];\n    };\n    /**\n         错误管理\n         */\n    ClientUtil.getServerError = function (code) {\n        var serverErrorList = {\n            1: 'parse json error.',\n            1001: 'login is processing.',\n            1002: 'liveroom request error.',\n            1003: 'zpush connect fail.',\n            1004: 'zpush handshake fail.',\n            1005: 'zpush login fail.',\n            1006: 'user login state is wrong.',\n            1007: 'got no zpush addr',\n            1008: 'token error',\n            1009: 'dispatch error',\n            2002: 'biz channel error',\n            1000000000: 'liveroom cmd error, result=',\n        };\n        if (code === 0) {\n            return zego_error_1.commonErrorList.SUCCESS;\n        }\n        var err = zego_error_1.liveRoomErrorList.SERVER;\n        err.code = code;\n        if (code > 1000000000) {\n            err.msg = serverErrorList[1000000000] + code;\n        }\n        else if (!serverErrorList[code]) {\n            err.msg = serverErrorList[code];\n        }\n        else {\n            err.msg = 'unknown error code:' + code;\n        }\n        return err;\n    };\n    ClientUtil.isKeepTryLogin = function (code) {\n        switch (code) {\n            case 1002: //liveroom connect error\n            case 1003: //zpush connect error\n                return true;\n            default:\n                return false;\n        }\n    };\n    /*\n     *    \"msl.0\": \"ZegoClient.mergeStreamList\",\n     */\n    ClientUtil.mergeStreamList = function (logger, idName, oldStreamList, newStreamList, callbackResult) {\n        logger.debug('msl.0 call');\n        var addStreamList = [];\n        var delStreamList = [];\n        var updateStreamList = [];\n        var flag;\n        if (!newStreamList) {\n            newStreamList = [];\n        }\n        for (var i = 0; i < newStreamList.length; i++) {\n            if (newStreamList[i].anchor_id_name == idName) {\n                logger.debug('msl.0 have self stream added');\n                continue;\n            }\n            flag = false;\n            for (var j = 0; j < oldStreamList.length; j++) {\n                if (newStreamList[i].stream_id === oldStreamList[j].stream_id) {\n                    if (newStreamList[i].extra_info !== oldStreamList[j].extra_info) {\n                        updateStreamList.push(newStreamList[i]);\n                    }\n                    flag = true;\n                    break;\n                }\n            }\n            if (!flag) {\n                addStreamList.push(newStreamList[i]);\n            }\n        }\n        for (var k = 0; k < oldStreamList.length; k++) {\n            flag = false;\n            for (var n = 0; n < newStreamList.length; n++) {\n                if (oldStreamList[k].stream_id === newStreamList[n].stream_id) {\n                    flag = true;\n                    break;\n                }\n            }\n            if (!flag) {\n                delStreamList.push(oldStreamList[k]);\n            }\n        }\n        oldStreamList.splice(0);\n        for (var i = 0; i < newStreamList.length; i++) {\n            oldStreamList.push(newStreamList[i]);\n        }\n        callbackResult(addStreamList, delStreamList, updateStreamList);\n        logger.debug('msl.0 call success');\n    };\n    ClientUtil.checkCustomCommandParam = function (param) {\n        return true;\n    };\n    //生成随机数\n    ClientUtil.generateRandumNumber = function (maxNum) {\n        return parseInt(Math.random() * (maxNum + 1) + '', 10);\n    };\n    //生成随机数\n    ClientUtil.uuid = function (len, radix) {\n        var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n        var uuid = [];\n        var i;\n        radix = radix || chars.length;\n        if (len) {\n            // Compact form\n            for (i = 0; i < len; i++)\n                uuid[i] = chars[0 | (Math.random() * radix)];\n        }\n        else {\n            // rfc4122, version 4 form\n            var r = void 0;\n            // rfc4122 requires these characters\n            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n            uuid[14] = '4';\n            // Fill in random data. At i==19 set the high bits of clock sequence as\n            // per rfc4122, sec. 4.1.5\n            for (i = 0; i < 36; i++) {\n                if (!uuid[i]) {\n                    r = 0 | (Math.random() * 16);\n                    uuid[i] = chars[i == 19 ? (r & 0x3) | 0x8 : r];\n                }\n            }\n        }\n        return uuid.join('');\n    };\n    ClientUtil.supportDetection = function (screenShotReady, success, error) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                result = {\n                    webRtc: false,\n                    capture: false,\n                    videoDecodeType: {\n                        H264: false,\n                        H265: false,\n                        VP8: false,\n                        VP9: false,\n                    },\n                    screenSharing: screenShotReady,\n                };\n                // @ts-ignore\n                if (window['RTCPeerConnection'] || window['mozRTCPeerConnection'] || window['webkitRTCPeerConnection']) {\n                    result.webRtc = true;\n                }\n                if (navigator) {\n                    if (navigator['getUserMedia'] ||\n                        navigator ||\n                        navigator ||\n                        navigator ||\n                        (navigator['mediaDevices'] && navigator['mediaDevices']['getUserMedia'])) {\n                        result.capture = true;\n                    }\n                }\n                this.supportVideoCodeType(function (videoDecodeType) {\n                    result.videoDecodeType.H264 = videoDecodeType.H264;\n                    result.videoDecodeType.H265 = videoDecodeType.H265;\n                    result.videoDecodeType.VP8 = videoDecodeType.VP8;\n                    result.videoDecodeType.VP9 = videoDecodeType.VP9;\n                    success && success(result);\n                }, function (err) {\n                    console.error('detect codec fail ' + err.toString());\n                    error && error(zego_error_1.commonErrorList.DETECT_FAIL);\n                });\n                return [2 /*return*/];\n            });\n        });\n    };\n    ClientUtil.compareVersion = function (v1, v2) {\n        v1 = v1.split('.');\n        v2 = v2.split('.');\n        var len = Math.max(v1.length, v2.length);\n        while (v1.length < len) {\n            v1.push('0');\n        }\n        while (v2.length < len) {\n            v2.push('0');\n        }\n        for (var i = 0; i < len; i++) {\n            var num1 = parseInt(v1[i]);\n            var num2 = parseInt(v2[i]);\n            if (num1 > num2) {\n                return 1;\n            }\n            else if (num1 < num2) {\n                return -1;\n            }\n        }\n        return 0;\n    };\n    ClientUtil.isSupportLive = function (sucCall, errCall) {\n        var resultList = {\n            10001: '当前微信版本过低，无法使用相关组件',\n            10002: '需要摄像头和录音功能的授权',\n        };\n        var version = wx.getSystemInfoSync().SDKVersion;\n        var res = {\n            code: -1,\n            msg: '',\n        };\n        if (this.compareVersion(version, '1.7.0') < 0) {\n            res = {\n                code: 10001,\n                msg: resultList[10001],\n            };\n            sucCall && sucCall(res);\n        }\n        wx.getSetting({\n            success: function (_a) {\n                var authSetting = _a.authSetting;\n                if (!authSetting['scope.camera'] || !authSetting['scope.record']) {\n                    res = {\n                        code: 10002,\n                        msg: resultList[10002],\n                    };\n                }\n                sucCall && sucCall(res);\n            },\n            fail: function (err) {\n                errCall && errCall(err);\n            },\n        });\n    };\n    ClientUtil.supportVideoCodeType = function (sucCall, errCall) {\n        var isInner = false;\n        var timer = setTimeout(function () {\n            if (isInner == false)\n                errCall('detect timeout');\n        }, 200);\n        //@ts-ignore\n        new RTCPeerConnection()\n            .createOffer({\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true,\n        })\n            .then(function (desc) {\n            if (desc && desc.sdp) {\n                isInner = true;\n                var sdplist = desc.sdp.split('\\r\\n');\n                var hasH264 = sdplist.some(function (item) {\n                    return item.startsWith('a=rtpmap:') && item.indexOf('H264/') > -1;\n                });\n                var hasVP8 = sdplist.some(function (item) {\n                    return item.startsWith('a=rtpmap:') && item.indexOf('VP8/') > -1;\n                });\n                var hasVP9 = sdplist.some(function (item) {\n                    return item.startsWith('a=rtpmap:') && item.indexOf('VP9/') > -1;\n                });\n                var hasH265 = sdplist.some(function (item) {\n                    return item.startsWith('a=rtpmap:') && item.indexOf('H264/') > -1;\n                });\n                if (sucCall)\n                    sucCall({\n                        H264: hasH264,\n                        VP8: hasVP8,\n                        VP9: hasVP9,\n                        H265: hasH265,\n                    });\n            }\n        }, function (err) {\n            isInner = true;\n            clearTimeout(timer);\n            if (errCall)\n                errCall(err);\n        });\n    };\n    ClientUtil.inlineWorker = function (func) {\n        //内联worker\n        if (Worker && func) {\n            var functionBody = func\n                .toString()\n                .trim()\n                .match(/^function\\s*\\w*\\s*\\([\\w\\s,]*\\)\\s*{([\\w\\W]*?)}$/)[1];\n            var url = URL.createObjectURL(new window.Blob([functionBody], {\n                type: 'text/javascript',\n            }));\n            return new Worker(url);\n        }\n        return null;\n    };\n    ClientUtil.getBrowser = function () {\n        var ua = window.navigator.userAgent;\n        var isIE = window.ActiveXObject != undefined && ua.indexOf('MSIE') != -1;\n        var isFirefox = ua.indexOf('Firefox') != -1;\n        var isOpera = window.opr != undefined;\n        var isChrome = ua.indexOf('Chrome') && window.chrome;\n        var isSafari = ua.indexOf('Safari') != -1 && ua.indexOf('Version') != -1;\n        if (isIE) {\n            return 'IE';\n        }\n        else if (isFirefox) {\n            return 'Firefox';\n        }\n        else if (isOpera) {\n            return 'Opera';\n        }\n        else if (isChrome) {\n            return 'Chrome';\n        }\n        else if (isSafari) {\n            return 'Safari';\n        }\n        else {\n            return 'Unkown';\n        }\n    };\n    return ClientUtil;\n}());\nexports.ClientUtil = ClientUtil;\n\n\n/***/ }),\n\n/***/ \"./sdk/wechatMini/zego.client.wechat.ts\":\n/*!**********************************************!*\\\n  !*** ./sdk/wechatMini/zego.client.wechat.ts ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zego_streamcenter_wechat_1 = __webpack_require__(/*! ./zego.streamcenter.wechat */ \"./sdk/wechatMini/zego.streamcenter.wechat.ts\");\nvar zego_logger_wx_1 = __webpack_require__(/*! ./zego.logger.wx */ \"./sdk/wechatMini/zego.logger.wx.ts\");\nvar zego_webSocket_1 = __webpack_require__(/*! ./zego.webSocket */ \"./sdk/wechatMini/zego.webSocket.ts\");\nvar zego_entity_1 = __webpack_require__(/*! ../common/zego.entity */ \"./sdk/common/zego.entity.ts\");\nvar index_1 = __webpack_require__(/*! ../common/clientBase/index */ \"./sdk/common/clientBase/index.ts\");\nvar stateCenter_1 = __webpack_require__(/*! ../common/clientBase/stateCenter */ \"./sdk/common/clientBase/stateCenter.ts\");\nvar client_util_1 = __webpack_require__(/*! ../util/client-util */ \"./sdk/util/client-util.ts\");\nvar zego_error_1 = __webpack_require__(/*! ../common/zego.error */ \"./sdk/common/zego.error.ts\");\nvar ZegoClient = /** @class */ (function (_super) {\n    __extends(ZegoClient, _super);\n    function ZegoClient(appid, server, idName) {\n        var _this = _super.call(this) || this;\n        _this.preferPlaySourceType = zego_entity_1.ENUM_PLAY_SOURCE_TYPE.auto;\n        _this.preferPublishSourceType = zego_entity_1.ENUM_DISPATCH_TYPE.ultra;\n        _this.currentPlaySourceType = zego_entity_1.ENUM_DISPATCH_TYPE.cdn;\n        _this.mixStreamList = {};\n        _this.ultraPlaySourceType = 'rtmp_v2';\n        _this.logger = new zego_logger_wx_1.LoggerWechat();\n        _this.stateCenter = new stateCenter_1.StateCenter();\n        _this.streamCenter = new zego_streamcenter_wechat_1.ZegoStreamCenterWechat(_this.logger, _this.stateCenter);\n        _this.stateCenter.appid = appid;\n        _this.stateCenter.server = server;\n        _this.stateCenter.idName = idName;\n        if (!client_util_1.ClientUtil.checkConfigParam(_this.stateCenter.appid, _this.stateCenter.server, _this.stateCenter.idName, _this.logger)) {\n            _this.logger.error('zc.0 init sdk error');\n        }\n        else {\n            _this.stateCenter.configOK = true;\n        }\n        _this.init();\n        _this.streamCenter.onPublishStateUpdate = function (type, streamid, error) {\n            _this.onPublishStateUpdateHandle(type, streamid, error);\n        };\n        return _this;\n    }\n    ZegoClient.prototype.getSocket = function (server) {\n        return new zego_webSocket_1.ZegoWebSocket(server);\n    };\n    /*\n     *    \"zc.p.sppst.0\": \"ZegoClient.setPreferPlaySourceType\",\n     */\n    // 设置优先播放流类型\n    ZegoClient.prototype.setPreferPlaySourceType = function (sourceType) {\n        this.logger.debug('zc.p.sppst.0 call');\n        if (typeof sourceType !== 'number' ||\n            (sourceType !== zego_entity_1.ENUM_PLAY_SOURCE_TYPE.auto && sourceType !== zego_entity_1.ENUM_PLAY_SOURCE_TYPE.ultra)) {\n            this.logger.info('zc.p.sppst.0 param error');\n            return false;\n        }\n        this.preferPlaySourceType = sourceType;\n        this.logger.debug('zc.p.sppst.0 call success');\n        return true;\n    };\n    /*\n     *    \"zc.p.sppst.1\": \"ZegoClient.setPreferPublishSourceType\",\n     */\n    ZegoClient.prototype.setPreferPublishSourceType = function (sourceType, customUrl) {\n        this.logger.debug('zc.p.sppst.1 call');\n        if (typeof sourceType !== 'number' ||\n            (sourceType !== zego_entity_1.ENUM_DISPATCH_TYPE.cdn &&\n                sourceType !== zego_entity_1.ENUM_DISPATCH_TYPE.ultra &&\n                sourceType !== zego_entity_1.ENUM_DISPATCH_TYPE.customUrl)) {\n            this.logger.error('zc.p.sppst.1 param error');\n            return false;\n        }\n        if (sourceType === zego_entity_1.ENUM_DISPATCH_TYPE.customUrl && !customUrl) {\n            this.logger.error('zc.p.sppst.1 param error');\n            return false;\n        }\n        this.preferPublishSourceType = sourceType;\n        this.customCdnUrl = customUrl;\n        this.logger.debug('zc.p.sppst.1 call success');\n        return true;\n    };\n    /*\n     *    \"zc.p.sps.0\": \"ZegoClient.startPlayingStream\",\n     */\n    // 播放流\n    ZegoClient.prototype.getPlayUrls = function (streamId, streamParams) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.logger.debug('zc.p.sps.0 call');\n            if (!streamId || streamId === '') {\n                _this.logger.info('zc.p.sps.0 streamid error');\n                reject(zego_error_1.commonErrorList.PARAM);\n                return;\n            }\n            if (!_this.stateCenter.isLogin()) {\n                _this.logger.info('zc.p.sps.0 not login');\n                reject(zego_error_1.commonErrorList.NOT_LOGIN);\n                return;\n            }\n            _this.streamCenter.updatePlayingState(streamId, streamParams, true);\n            _this.streamCenter.onPlayerStreamUrlUpdate = function (streamId, url) {\n                resolve({ streamId: streamId, url: url });\n            };\n            if (_this.streamCenter.isPublishing()) {\n                //当前正在推流，根据推流模式确定拉流模式\n                if (_this.preferPublishSourceType == zego_entity_1.ENUM_DISPATCH_TYPE.cdn) {\n                    _this.startPlayingStreamFromCDN(streamId);\n                }\n                else {\n                    //current publish to BGP\n                    _this.startPlayingStreamFromBGP(streamId);\n                }\n            }\n            else {\n                //当前没有在推流，根据用户设置的拉流方式确定拉流地址\n                if (_this.preferPlaySourceType == zego_entity_1.ENUM_PLAY_SOURCE_TYPE.ultra) {\n                    _this.startPlayingStreamFromBGP(streamId);\n                }\n                else {\n                    _this.startPlayingStreamFromCDN(streamId);\n                }\n            }\n        });\n    };\n    /*\n     *    \"zc.p.sps.1.0\": \"ZegoClient.stopPlayingStream\",\n     */\n    // 停止流\n    ZegoClient.prototype.stopPlay = function (streamid) {\n        this.logger.debug('zc.p.sps.1.0 call');\n        if (!streamid || streamid === '') {\n            this.logger.info('zc.p.sps.1.0 param error');\n            return false;\n        }\n        this.streamCenter.stopPlayingStream(streamid);\n        for (var seq in this.stateCenter.streamUrlMap) {\n            if (this.stateCenter.streamUrlMap[seq] === streamid) {\n                delete this.stateCenter.streamUrlMap[seq];\n                break;\n            }\n        }\n        this.logger.debug('zc.p.sps.1.0 call success');\n        return true;\n    };\n    /*\n     *    \"zc.p.sps.1\": \"ZegoClient.startPublishingStream\",\n     */\n    //开始推流\n    ZegoClient.prototype.getPublishUrls = function (streamid, publishOption) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.logger.debug('zc.p.sps.1 call');\n            if (!streamid) {\n                _this.logger.error('zc.p.sps.1 streamid no found');\n                reject(zego_error_1.commonErrorList.PARAM);\n                return;\n            }\n            if (!_this.stateCenter.isLogin()) {\n                _this.logger.error('zc.p.sps.1 not login');\n                reject(zego_error_1.commonErrorList.NOT_LOGIN);\n                return;\n            }\n            _this.stateCenter.publishStreamList[streamid] = {\n                state: zego_entity_1.ENUM_PUBLISH_STREAM_STATE.waiting_url,\n                extra_info: publishOption && publishOption.extraInfo ? publishOption.extraInfo : null,\n            };\n            _this.logger.info('zc.p.sps.0 fetch stream url');\n            _this.streamCenter.updatePublishingState(streamid, publishOption && publishOption.publishParams ? publishOption.publishParams : undefined, true);\n            _this.fetchPublishStreamUrl(streamid);\n            //need to check whether play to switch line\n            if (_this.streamCenter.isPlaying()) {\n                //如果是BGP推流，选择auto拉流模式，需要切换服务器\n                if (_this.preferPublishSourceType == zego_entity_1.ENUM_DISPATCH_TYPE.ultra &&\n                    _this.currentPlaySourceType == zego_entity_1.ENUM_DISPATCH_TYPE.cdn) {\n                    //switch CDN to bgp\n                    for (var i = 0; i < _this.streamCenter.playingList.length; i++) {\n                        var playStreamId = _this.streamCenter.playingList[i].streamid;\n                        var params = _this.streamCenter.playingList[i].params;\n                        _this.stopPublish(playStreamId);\n                        _this.streamCenter.updatePlayingState(playStreamId, params, true);\n                        _this.startPlayingStreamFromBGP(playStreamId);\n                    }\n                }\n            }\n            _this.streamCenter.onPublisherStreamUrlUpdate = function (streamId, url) {\n                resolve({ streamId: streamId, url: url });\n            };\n        });\n    };\n    /*\n     *    \"zc.p.spls.1.1\": \"ZegoClient.stopPublishLocalStream\",\n     */\n    //结束推流\n    ZegoClient.prototype.stopPublish = function (streamid) {\n        this.logger.debug('zc.p.sps.1.1 call');\n        if (!streamid || streamid === '') {\n            this.logger.info('zc.p.sps.1.1 param error');\n            return false;\n        }\n        this.streamCenter.stopPublishingStream(streamid);\n        if (this.stateCenter.publishStreamList[streamid]) {\n            if (this.stateCenter.publishStreamList[streamid].state >= zego_entity_1.ENUM_PUBLISH_STREAM_STATE.update_info) {\n                this.updateStreamInfo(streamid, zego_entity_1.ENUM_STREAM_SUB_CMD.liveEnd);\n            }\n            delete this.stateCenter.publishStreamList[streamid];\n        }\n        if (this.stateCenter.streamUrlMap[streamid]) {\n            delete this.stateCenter.streamUrlMap[streamid];\n        }\n        this.logger.debug('zc.p.sps.1.1 call success');\n        return true;\n    };\n    //获取推拉流质量\n    ZegoClient.prototype.getStats = function (callBack) {\n        console.log('>>>getStats');\n        this.streamCenter.getStats(callBack);\n    };\n    /*\n     *    \"zc.p.upe.0\": \"ZegoClient.updatePlayerEvent\",\n     */\n    // 更新播放器事件\n    ZegoClient.prototype.updatePlayerState = function (streamid, event) {\n        //通知playercenter\n        this.logger.debug('zc.p.upe.0 call');\n        this.streamCenter.updatePlayerState(streamid, event);\n    };\n    /*\n     *    \"zc.p.upns.0\": \"ZegoClient.updatePlayerEvent\",\n     */\n    // 更新推拉流质量\n    ZegoClient.prototype.updatePlayerNetStatus = function (streamid, event) {\n        this.logger.debug('zc.p.upns.0 call');\n        this.streamCenter.updatePlayerNetStatus(streamid, event);\n    };\n    /*\n     *    \"zc.p.spms.0\": \"ZegoClient.startPlayingMixStream\",\n     */\n    //混流接口\n    ZegoClient.prototype.startPlayingMixStream = function (mixStreamId, stream_params) {\n        this.logger.debug('zc.p.spms.0 call');\n        if (!mixStreamId || mixStreamId === '') {\n            this.logger.info('zc.p.spms.0 param error');\n            return false;\n        }\n        if (!this.stateCenter.isLogin()) {\n            this.logger.info('zc.p.spms.0 not login');\n            return false;\n        }\n        this.streamCenter.updatePlayingState(mixStreamId, stream_params, true);\n        this.mixStreamList[mixStreamId] = {\n            urltra_url_rtmp: null,\n        };\n        this.fetchPlayStreamUrl(mixStreamId, 'rtmp_cdn');\n        this.logger.debug('zc.p.spms.0 call success');\n        return true;\n    };\n    /*\n     *    \"zc.p.spms.1\": \"ZegoClient.stopPlayingMixStream\",\n     */\n    ZegoClient.prototype.stopPlayingMixStream = function (mixStreamId) {\n        this.logger.debug('zc.p.spms.1 call');\n        if (!mixStreamId || mixStreamId === '') {\n            this.logger.info('zc.p.spms.1 param error');\n            return false;\n        }\n        this.streamCenter.stopPlayingStream(mixStreamId);\n        for (var seq in this.stateCenter.streamUrlMap) {\n            if (this.stateCenter.streamUrlMap[seq] === mixStreamId) {\n                delete this.stateCenter.streamUrlMap[seq];\n                break;\n            }\n        }\n        delete this.mixStreamList[mixStreamId];\n        this.logger.debug('zc.p.spms.1 call success');\n        return true;\n    };\n    //从CDN拉流\n    ZegoClient.prototype.startPlayingStreamFromCDN = function (streamid) {\n        this.logger.debug('zc.p.spsfc.0 call');\n        var streamUrls = null; // 判断传入的流id，在当前流列表中能否找到，找到就存起相对应的流地址\n        for (var i = 0; i < this.stateCenter.streamList.length; i++) {\n            if (this.stateCenter.streamList[i].stream_id === streamid) {\n                // 根据传入的流id判断当前的流列表中是否存在该流\n                streamUrls = this.stateCenter.streamList[i].urls_rtmp || [];\n                break;\n            }\n        }\n        if (!streamUrls || streamUrls.length <= 0) {\n            this.logger.error('zc.p.spsfc.0 cannot find stream url,Please check if CDN is configured ');\n            return false;\n        }\n        this.currentPlaySourceType = zego_entity_1.ENUM_DISPATCH_TYPE.cdn;\n        this.logger.debug('zc.p.spsfc.0 play stream');\n        return this.doPlayStream(streamid, streamUrls, this.currentPlaySourceType);\n    };\n    /*\n     *    \"zc.p.spsfb.0\": \"ZegoClient.startPlayingStreamFromBGP\",\n     */\n    //从BGP拉流\n    ZegoClient.prototype.startPlayingStreamFromBGP = function (streamid) {\n        this.currentPlaySourceType = zego_entity_1.ENUM_DISPATCH_TYPE.ultra;\n        this.logger.info('zc.p.sps.0 fetch stream url');\n        this.fetchPlayStreamUrl(streamid, this.ultraPlaySourceType);\n        return true;\n    }; //拉取服务端推流信息\n    /*\n     *    \"fpsu.0\": \"ZegoClient.fetchPublishStreamUrl\",\n     */ ZegoClient.prototype.fetchPublishStreamUrl = function (streamid) {\n        var _this = this;\n        this.logger.debug('fpsu.0 call');\n        if (!this.stateCenter.isLogin()) {\n            this.logger.error('fpsu.0 state error');\n            return;\n        }\n        this.logger.info('fpsu.0 send fetch publish request');\n        var publish_type = '';\n        if (this.preferPublishSourceType == zego_entity_1.ENUM_DISPATCH_TYPE.cdn) {\n            publish_type = 'cdn';\n        }\n        else if (this.preferPublishSourceType == zego_entity_1.ENUM_DISPATCH_TYPE.ultra) {\n            publish_type = 'bgp';\n        }\n        var bodyData = {\n            stream_id: streamid,\n            url_type: this.ultraPlaySourceType,\n            publish_type: publish_type,\n            header_kvs: [{ key: 'grpc-metadata-push', value: this.customCdnUrl || '' }],\n        };\n        this.socketCenter.registerRouter('stream_publish', function (msg) {\n            _this.handleFetchStreamPublishUrlRsp(msg);\n        });\n        var seq = this.socketCenter.sendMessage('stream_publish', bodyData);\n        if (seq == -1) {\n            this.actionListener('publishStateChange', 1, streamid, -1);\n            this.streamCenter.stopPublishingStream(streamid);\n        }\n        else {\n            this.stateCenter.streamUrlMap[seq] = streamid;\n        }\n        this.logger.debug('fpsu.0 call success');\n    };\n    /*\n     *    \"fsu.0\": \"ZegoClient.fetchPlayStreamUrl\",\n     */\n    // 拉取服务端流信息\n    ZegoClient.prototype.fetchPlayStreamUrl = function (streamid, urlType) {\n        var _this = this;\n        this.logger.debug('fsu.0 call');\n        // 不是处于登录状态，不让拉流\n        if (!this.stateCenter.isLogin()) {\n            this.logger.info('fsu.0 state error');\n            return;\n        }\n        this.logger.info('fsu.0 send fetch request');\n        var bodyData = {\n            stream_ids: [streamid],\n            url_type: urlType,\n        };\n        this.socketCenter.registerRouter('stream_url', function (msg) {\n            _this.handleFetchStreamUrlRsp(msg);\n        });\n        // 发送消息\n        var seq = this.socketCenter.sendMessage('stream_url', bodyData, undefined, function (_err, seq) {\n            if (_this.stateCenter.streamUrlMap[seq]) {\n                _this.actionListener('pullStateChange', 1, _this.stateCenter.streamUrlMap[seq], -1);\n            }\n            else {\n                _this.logger.info('fsu.0 already stop play');\n            }\n        });\n        if (seq == -1) {\n            this.actionListener('pullStateChange', 1, streamid, -1);\n        }\n        else {\n            this.stateCenter.streamUrlMap[seq] = streamid;\n        }\n        this.logger.debug('fsu.0 call success');\n    }; //流更新信令\n    /*\n     *    \"usi.0\": \"ZegoClient.updateStreamInfo\",\n     */ ZegoClient.prototype.updateStreamInfo = function (streamid, cmd, stream_extra_info, error) {\n        this.logger.debug('usi.0 call');\n        var extra_info = '';\n        if (stream_extra_info != undefined && typeof stream_extra_info == 'string') {\n            extra_info = stream_extra_info;\n        }\n        var data = {\n            stream_id: streamid,\n            extra_info: extra_info,\n        };\n        var stream_msg = JSON.stringify(data);\n        var bodyData = {\n            sub_cmd: cmd,\n            stream_msg: stream_msg,\n        };\n        this.socketCenter.registerRouter('stream', function (_msg) { });\n        this.socketCenter.sendMessage('stream', bodyData, undefined, error);\n        this.logger.debug('usi.0 call success cmd ' + cmd);\n    };\n    /*\n     *    \"hsur.0\": \"ZegoClient.handleStreamUpdateRsp\",\n     */\n    //流更新回包\n    ZegoClient.prototype.handleStreamUpdateRsp = function (msg) {\n        if (!this.stateCenter.isLogin()) {\n            this.logger.info('hsur.0 not login');\n            return;\n        }\n        if (msg.body.err_code != 0) {\n            this.logger.info('hsur.0 stream update error ' + msg.body.err_code);\n            return;\n        }\n        this.logger.debug('hsur.0 stream seq ' + this.stateCenter.streamSeq + ' server seq ' + msg.body.stream_seq);\n        this.stateCenter.streamSeq = msg.body.stream_seq;\n        //流删除时，publishStreamList已经删除了\n        for (var i = 0; i < msg.body.stream_info.length; i++) {\n            var streamid = msg.body.stream_info[i].stream_id;\n            if (!this.stateCenter.publishStreamList[streamid]) {\n                this.logger.info('hsur.0 stream is not exist');\n                return;\n            }\n            if (this.stateCenter.publishStreamList[streamid].state == zego_entity_1.ENUM_PUBLISH_STREAM_STATE.update_info) {\n                this.stateCenter.publishStreamList[streamid].state = zego_entity_1.ENUM_PUBLISH_STREAM_STATE.publishing;\n                this.actionListener('publishStateChange', 0, streamid, 0);\n            }\n        }\n    };\n    // 播放流\n    ZegoClient.prototype.doPlayStream = function (streamid, streamUrls, sourceType) {\n        this.logger.debug('zc.p.dps.0 call');\n        /*\n                const streamUrls = null;\n                for (const i = 0; i < this.streamList.length; i++) {\n                    if (this.streamList[i].stream_id === streamid) {\n                        streamUrls = (this.streamList[i].urls_ws || []);\n                        break;\n                    }\n                }\n                */\n        if (!streamUrls || streamUrls.length <= 0) {\n            return false;\n        }\n        this.streamCenter.startPlayingStream(streamid, streamUrls, sourceType);\n        return true;\n    };\n    /*\n     *    \"hfspur.0\": \"ZegoClient.handleFetchStreamPublishUrlRsp\",\n     */\n    ZegoClient.prototype.handleFetchStreamPublishUrlRsp = function (msg) {\n        this.logger.debug('hfspur.0 call');\n        var requestStreamId = this.stateCenter.streamUrlMap[msg.header.seq];\n        if (requestStreamId) {\n            delete this.stateCenter.streamUrlMap[msg.header.seq];\n        }\n        if (msg.body.err_code !== 0) {\n            this.logger.info('hfspur.0 server error=', msg.body.err_code);\n            if (this.stateCenter.publishStreamList[requestStreamId]) {\n                this.actionListener('publishStateChange', 1, requestStreamId, msg.body.err_code + zego_entity_1.SERVER_ERROR_CODE);\n                this.streamCenter.stopPublishingStream(requestStreamId);\n            }\n            return;\n        }\n        if (msg.body.stream_url_info) {\n            var streamid = msg.body.stream_url_info.stream_id;\n            //return rtmp address\n            var urlsWS = msg.body.stream_url_info.urls_ws;\n            if (!this.stateCenter.publishStreamList[streamid]) {\n                this.logger.error('hfspur.0 cannot find stream');\n                return;\n            }\n            this.stateCenter.publishStreamList[streamid].url_rtmp = urlsWS;\n            this.stateCenter.publishStreamList[streamid].state = zego_entity_1.ENUM_PUBLISH_STREAM_STATE.tryPublish;\n            this.doPublishStream(streamid, urlsWS);\n        }\n    };\n    /*\n     *    \"hfsur.0\": \"ZegoClient.handleFetchStreamUrlRsp\",\n     */\n    ZegoClient.prototype.handleFetchStreamUrlRsp = function (msg) {\n        this.logger.debug('hfsur.0 call');\n        var requestStreamId = this.stateCenter.streamUrlMap[msg.header.seq];\n        if (requestStreamId) {\n            delete this.stateCenter.streamUrlMap[msg.header.seq];\n        }\n        if (msg.body.err_code !== 0) {\n            this.logger.debug('hfsur.0 server error=', msg.body.err_code);\n            //cann't get stream url, should callback\n            this.actionListener('pullStateChange', 1, requestStreamId, msg.body.err_code + zego_entity_1.SERVER_ERROR_CODE);\n            return;\n        }\n        if (msg.body.stream_url_infos && msg.body.stream_url_infos.length > 0) {\n            var streamid = msg.body.stream_url_infos[0].stream_id;\n            //return rtmp address\n            var urlsWS = msg.body.stream_url_infos[0].urls_ws;\n            var souceType = this.currentPlaySourceType;\n            // 修复当this.streamList为空时，没有对新增的流进行保存的问题，导致客户端收到新增的流，启动starPlayingStream不能播放问题\n            var found = false;\n            // 检查拉流streamid\n            for (var i = 0; i < this.stateCenter.streamList.length; i++) {\n                if (this.stateCenter.streamList[i].stream_id == streamid) {\n                    this.stateCenter.streamList[i].urltra_url_rtmp = urlsWS;\n                    found = true;\n                    break;\n                }\n            }\n            //检查混流streamid\n            if (!found && this.mixStreamList[streamid]) {\n                this.mixStreamList[streamid].urltra_url_rtmp = urlsWS;\n                souceType = zego_entity_1.ENUM_DISPATCH_TYPE.cdn;\n                found = true;\n            }\n            if (!found) {\n                this.logger.info('hfsur.0 cannot find streaminfo in existing stream list');\n                this.stateCenter.streamList.push({\n                    stream_id: streamid,\n                    urltra_url_rtmp: urlsWS,\n                });\n            }\n            this.doPlayStream(streamid, urlsWS, souceType);\n        }\n        this.logger.debug('hfsur.0 call success');\n    };\n    // 发布流\n    ZegoClient.prototype.doPublishStream = function (streamid, streamUrls) {\n        this.logger.debug('zc.p.dps.1 call');\n        if (!streamUrls || streamUrls.length <= 0) {\n            return false;\n        }\n        this.logger.info('zc.p.dps.1 streamid: ' + streamid + 'streamUrl: ' + streamUrls);\n        this.streamCenter.startPublishingStream(streamid, streamUrls, this.preferPublishSourceType);\n        this.logger.debug('zc.p.dps.1 call success');\n        return true;\n    };\n    // web独有  -空实现\n    ZegoClient.prototype.setCDNInfo = function (_streamInfo, _streamItem) { };\n    ZegoClient.prototype.loginBodyData = function () {\n        return {\n            id_name: this.stateCenter.idName,\n            nick_name: this.stateCenter.nickName,\n            role: this.stateCenter.role,\n            token: this.stateCenter.token,\n            version: zego_entity_1.PROTO_VERSION,\n            room_name: this.stateCenter.roomid,\n            user_state_flag: this.stateCenter.userStateUpdate ? 1 : 0,\n            room_create_flag: this.stateCenter.roomCreateFlag,\n            client_type: zego_entity_1.E_CLIENT_TYPE.ClientType_SmallPragram,\n            third_token: this.stateCenter.third_token,\n        };\n    };\n    ZegoClient.prototype.WebrtcOnPublishStateUpdateHandle = function (_type, _streamid, _error) { };\n    ZegoClient.isSupportLive = function (sucCall, errCall) {\n        return client_util_1.ClientUtil.isSupportLive(sucCall, errCall);\n    };\n    ZegoClient.prototype.onPublishStateUpdateHandle = function (type, streamid, error) {\n        var _this = this;\n        if (type == 0) {\n            //start publish\n            if (this.stateCenter.publishStreamList[streamid]) {\n                if (this.stateCenter.publishStreamList[streamid].state == zego_entity_1.ENUM_PUBLISH_STREAM_STATE.tryPublish) {\n                    this.stateCenter.publishStreamList[streamid].state = zego_entity_1.ENUM_PUBLISH_STREAM_STATE.update_info;\n                    this.streamHandler.updateStreamInfo(streamid, zego_entity_1.ENUM_STREAM_SUB_CMD.liveBegin, this.stateCenter.publishStreamList[streamid].extra_info, function (err) {\n                        if (_this.stateCenter.publishStreamList[streamid] &&\n                            _this.stateCenter.publishStreamList[streamid].state ==\n                                zego_entity_1.ENUM_PUBLISH_STREAM_STATE.update_info) {\n                            _this.stateCenter.publishStreamList[streamid].state = zego_entity_1.ENUM_PUBLISH_STREAM_STATE.stop;\n                            _this.actionListener('publishStateChange', 1, streamid, err);\n                            _this.streamCenter.stopPlayingStream(streamid);\n                        }\n                    });\n                }\n                else {\n                    this.WebrtcOnPublishStateUpdateHandle(type, streamid, error);\n                }\n                //当前状态为publishing时，如果小程序继续回调相同的开始推流状态码，不应该再返回推流成功的回调\n                // else if (this.stateCenter.publishStreamList[streamid].state == ENUM_PUBLISH_STREAM_STATE.publishing) {\n                //     this.onPublishStateUpdate(type, streamid, error);\n                // }\n            }\n        }\n        else {\n            this.actionListener('publishStateChange', type, streamid, error);\n            if (type == 1) {\n                this.stopPublish(streamid);\n            }\n        }\n    };\n    return ZegoClient;\n}(index_1.BaseCenter));\nexports.ZegoClient = ZegoClient;\n\n\n/***/ }),\n\n/***/ \"./sdk/wechatMini/zego.logger.wx.ts\":\n/*!******************************************!*\\\n  !*** ./sdk/wechatMini/zego.logger.wx.ts ***!\n  \\******************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar zego_logger_1 = __webpack_require__(/*! ../common/zego.logger */ \"./sdk/common/zego.logger.ts\");\nvar zego_webSocket_1 = __webpack_require__(/*! ./zego.webSocket */ \"./sdk/wechatMini/zego.webSocket.ts\");\nvar LoggerWechat = /** @class */ (function (_super) {\n    __extends(LoggerWechat, _super);\n    function LoggerWechat() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LoggerWechat.prototype.openWebSocketLogServer = function (url) {\n        if (this.url != url) {\n            this.url = url;\n            this.stopWebSocketServer();\n            if (!url)\n                return;\n            this.websocket = new zego_webSocket_1.ZegoWebSocket(url);\n            this.websocket.onopen = function (evt) { };\n            this.websocket.onclose = function (evt) { };\n            this.websocket.onmessage = function (evt) { };\n            this.websocket.onerror = function (err) {\n                console.error(\"open log websocket error:\" + err);\n            };\n        }\n    };\n    LoggerWechat.prototype.SendHttpsLog = function () {\n        var _this = this;\n        if (this.logCacheSend.length == 0) {\n            return;\n        }\n        var uploadData = this.logCacheSend.join('\\n');\n        wx.request({\n            url: this.url,\n            data: uploadData,\n            method: 'POST',\n            success: function (res) {\n                //console.log(res.data);\n                //check time interval\n                if (res.data.length == 0) {\n                    return;\n                }\n                var interval = res && res.data && res.data.interval;\n                if (typeof interval === 'number' && _this.logUploadInterval !== interval) {\n                    _this.timeInterval = interval;\n                    _this.openHttpsLogServer(_this.url);\n                }\n            },\n            fail: function (res) {\n                console.log('send failed ' + res.statusCode);\n            },\n        });\n        this.logCacheSend = [];\n    };\n    LoggerWechat.prototype.logReportParamList = function (level, logInfo) {\n        var t = new Date();\n        var stringTime = t.getFullYear() + '/';\n        stringTime += (zego_logger_1.D[t.getMonth() + 1] || t.getMonth() + 1) + '/';\n        stringTime += (zego_logger_1.D[t.getDate()] || t.getDate()) + ' ';\n        stringTime += (zego_logger_1.D[t.getHours()] || t.getHours()) + ':';\n        stringTime += (zego_logger_1.D[t.getMinutes()] || t.getMinutes()) + ':';\n        stringTime += zego_logger_1.D[t.getSeconds()] || t.getSeconds();\n        stringTime += '.' + (t.getTime() % 1000);\n        logInfo['time'] = stringTime;\n        logInfo['level'] = level;\n        logInfo['console'] = 'xcx';\n        logInfo['appid'] = this.appid;\n        logInfo['roomid'] = this.roomid;\n        logInfo['userid'] = this.userid;\n        logInfo['id_name'] = this.userid;\n        logInfo['userName'] = this.userName;\n        logInfo['sessionid'] = this.sessionid;\n        logInfo['version'] = this.version;\n        return [JSON.stringify(logInfo)];\n    };\n    return LoggerWechat;\n}(zego_logger_1.Logger));\nexports.LoggerWechat = LoggerWechat;\n\n\n/***/ }),\n\n/***/ \"./sdk/wechatMini/zego.play.wechat.ts\":\n/*!********************************************!*\\\n  !*** ./sdk/wechatMini/zego.play.wechat.ts ***!\n  \\********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ENUM_PLAY_STATE = { start: 0, playing: 1, stop: 2 };\n/**\n ZegoPlayer\n */\nvar ZegoPlayWechat = /** @class */ (function () {\n    function ZegoPlayWechat(logger, streamid, urls, params, reconnectLimit, streamcenter, sourceType, playerType, dataReport) {\n        this.playUrlIndex = 0;\n        this.playUrlTryCount = 0;\n        this.currentUrl = null;\n        this.reconnectCount = 0;\n        this.state = ENUM_PLAY_STATE.stop;\n        this.playerSeq = 0;\n        this.publishQualitySeq = 0;\n        this.publishQualityCount = 0;\n        this.publishQulaityMaxCount = 30;\n        this.everSuccess = false;\n        this.playerLogUploadTime = new Date().getTime();\n        this.streamid = streamid;\n        //url list\n        this.urls = urls;\n        this.reconnectLimit = reconnectLimit;\n        this.logger = logger;\n        this.streamCenter = streamcenter;\n        //this.stateTimeStamp = 0;\n        this.sourceType = sourceType;\n        this.playerType = playerType;\n        this.params = params;\n        this.dataReport = dataReport;\n    }\n    /*\n     *    \"zp.rpl.0\": \"ZegoPlayer.resetPlayer\",\n     */\n    ZegoPlayWechat.prototype.resetPlayer = function () {\n        this.state = ENUM_PLAY_STATE.stop;\n        //this.stateTimeStamp = Date.now();\n    };\n    ZegoPlayWechat.prototype.newPlayer = function () {\n        this.resetPlayer();\n        var url = this.getCurrentPlayerUrl();\n        var urlWithParams = url;\n        if (this.params.length != 0) {\n            urlWithParams = url + '?' + this.params;\n        }\n        if (url !== this.currentUrl) {\n            this.currentUrl = url;\n            this.streamCenter.onStreamUrlUpdate(this.streamid, urlWithParams, this.playerType);\n        }\n        else {\n            this.streamCenter.onPlayerRetry(this.streamid, this.playerType);\n        }\n        if (this.everSuccess == false) {\n            if (this.playerType == 0) {\n                this.dataReport.eventStart(this.playerSeq, 'PlayBegin');\n                this.dataReport.addEventInfo(this.playerSeq, 'PlayBegin', 'url', urlWithParams);\n            }\n            else {\n                this.dataReport.eventStart(this.playerSeq, 'PublishBegin');\n                this.dataReport.addEventInfo(this.playerSeq, 'PublishBegin', 'url', urlWithParams);\n            }\n        }\n        else {\n            if (this.playerType == 0) {\n                this.dataReport.addEventInfo(this.playerSeq, 'PlayRetry', 'url', urlWithParams);\n            }\n            else {\n                this.dataReport.addEventInfo(this.playerSeq, 'PublishRetry', 'url', urlWithParams);\n            }\n        }\n        this.state = ENUM_PLAY_STATE.start;\n        return true;\n    };\n    ZegoPlayWechat.prototype.stopPlayer = function () {\n        if (this.playerType == 0) {\n            this.dataReport.eventEndWithMsg(this.playerSeq, 'PlayStat', {\n                quality: this.playerInfo,\n            });\n        }\n        else {\n            this.dataReport.addEventInfo(this.playerSeq, 'PublishStat', 'quality', this.playerInfo);\n            this.dataReport.eventEndWithMsg(this.playerSeq, 'PublishStat', {\n                quality: this.playerInfo,\n            });\n        }\n    };\n    /*\n     *    \"zp.tsp.0\": \"ZegoPlayer.tryStartPlayer\",\n     */\n    ZegoPlayWechat.prototype.tryStartPlayer = function (errorCode) {\n        //当前播放器的备用播放地址可能有多条，可尝试多次\n        while (this.playUrlTryCount < this.urls.length) {\n            if (++this.reconnectCount > this.reconnectLimit) {\n                this.playUrlTryCount++;\n                this.playUrlIndex = (this.playUrlIndex + 1) % this.urls.length;\n                this.reconnectCount = 0;\n                continue;\n            }\n            this.logger.info('zp.tsp.0 index: ' + this.playUrlIndex + ', url: ' + this.getCurrentPlayerUrl());\n            if (this.newPlayer()) {\n                break;\n            }\n        }\n        if (this.playUrlTryCount >= this.urls.length) {\n            this.logger.info('zp.tsp.0 stream: ' + this.streamid);\n            this.resetPlayer();\n            var event_name = '';\n            if (this.playerType == 0) {\n                event_name = 'PlayEnd';\n            }\n            else if (this.playerType == 1) {\n                event_name = 'PublishEnd';\n                this.reportQualityStatics();\n            }\n            var info = {\n                error: errorCode,\n                reason: 'no url to retry',\n            };\n            this.dataReport.addEvent(this.playerSeq, event_name, info);\n            this.streamCenter.onPlayerStop(this.streamid, this.playerType, errorCode);\n        }\n    };\n    ZegoPlayWechat.prototype.shouldRetryPlay = function (event) {\n        var code = event.detail.code;\n        if (code == 3001 || code == 3002 || code == 3003 || code == 3005) {\n            return true;\n        }\n        return false;\n    };\n    ZegoPlayWechat.prototype.isPlayFailed = function (event) {\n        var code = event.detail.code;\n        if (code == -2301 || code == 2101 || code == 2102) {\n            return true;\n        }\n        return false;\n    };\n    ZegoPlayWechat.prototype.shouldRetryPublish = function (event) {\n        var code = event.detail.code;\n        if (code == 3001 || code == 3002 || code == 3003 || code == 3004 || code == 3005) {\n            return true;\n        }\n        return false;\n    };\n    ZegoPlayWechat.prototype.isPublishFailed = function (event) {\n        var code = event.detail.code;\n        if (code == -1301 ||\n            code == -1302 ||\n            code == -1303 ||\n            code == -1304 ||\n            code == -1305 ||\n            code == -1306 ||\n            code == -1307 ||\n            code == -1308 ||\n            code == -1309 ||\n            code == -1310 ||\n            code == -1311) {\n            return true;\n        }\n        return false;\n    };\n    /*\n     *    \"zp.tsp.0\": \"ZegoPlayer.updateEvent\",\n     */\n    ZegoPlayWechat.prototype.updateEvent = function (event) {\n        if (this.playerType == 0) {\n            //拉流\n            if (event.detail.code == 2004) {\n                if (this.everSuccess) {\n                    this.dataReport.eventEnd(this.playerSeq, 'PlayRetry');\n                }\n                else {\n                    this.everSuccess = true;\n                    this.dataReport.eventStart(this.playerSeq, 'PlayStat');\n                }\n                this.streamCenter.onPlayerStart(this.streamid, this.playerType);\n            }\n            else if (event.detail.code == 2009) {\n                //video size changed\n            }\n            else if (this.shouldRetryPlay(event)) {\n                //try to restart palyer\n                this.dataReport.eventStart(this.playerSeq, 'PlayRetry');\n                this.dataReport.addEventInfo(this.playerSeq, 'PlayRetry', 'error_code', event.detail.code);\n                // this.tryStartPlayer(event.detail.code);\n            }\n            else if (this.isPlayFailed(event)) {\n                this.logger.info('zp.ue.0 play error: ' + this.streamid);\n                this.resetPlayer();\n                var palyFailedInfo = {\n                    errorCode: event.detail.code,\n                };\n                this.dataReport.addEvent(this.playerSeq, 'PlayError', palyFailedInfo);\n                this.streamCenter.onPlayerStop(this.streamid, this.playerType, event.detail.code);\n            }\n            if (!this.everSuccess) {\n                this.dataReport.eventEnd(this.playerSeq, 'PlayBegin');\n            }\n        }\n        else if (this.playerType == 1) {\n            //推流\n            if (event.detail.code == 1002) {\n                if (this.everSuccess) {\n                    this.dataReport.eventEnd(this.playerSeq, 'PublishRetry');\n                }\n                else {\n                    this.everSuccess = true;\n                    this.dataReport.eventStart(this.playerSeq, 'PublishStat');\n                }\n                this.streamCenter.onPlayerStart(this.streamid, this.playerType);\n            }\n            else if (this.shouldRetryPublish(event)) {\n                //try to restart palyer\n                this.dataReport.eventStart(this.playerSeq, 'PublishRetry');\n                this.dataReport.addEventInfo(this.playerSeq, 'PublishRetry', 'error_code', event.detail.code);\n                //小程序内部retry\n                // this.tryStartPlayer(event.detail.code);\n            }\n            else if (this.isPublishFailed(event)) {\n                this.logger.info('zp.ue.0 publish error: ' + this.streamid);\n                this.resetPlayer();\n                var publishFailedInfo = {\n                    errorCode: event.detail.code,\n                };\n                this.dataReport.addEvent(this.playerSeq, 'PublishError', publishFailedInfo);\n                this.reportQualityStatics();\n                this.streamCenter.onPlayerStop(this.streamid, this.playerType, event.detail.code);\n            }\n            if (!this.everSuccess) {\n                this.dataReport.eventEnd(this.playerSeq, 'PublishBegin');\n            }\n        }\n    };\n    ZegoPlayWechat.prototype.updatePlayerNetStatus = function (event) {\n        var streamQuality = {\n            videoBitrate: event.detail.info.videoBitrate,\n            audioBitrate: event.detail.info.audioBitrate,\n            videoFPS: event.detail.info.videoFPS,\n            videoHeight: event.detail.info.videoHeight,\n            videoWidth: event.detail.info.videoWidth,\n        };\n        this.playerInfo = streamQuality;\n        if (this.playerType == 1) {\n            var qualityInfo = {\n                videoBitrate: event.detail.info.videoBitrate,\n                audioBitrate: event.detail.info.audioBitrate,\n                videoFPS: event.detail.info.videoFPS,\n                videoGOP: event.detail.info.videoGOP,\n                netSpeed: event.detail.info.netSpeed,\n                netJitter: event.detail.info.netJitter,\n                videoWidth: event.detail.info.videoWidth,\n                videoHeight: event.detail.info.videoHeight,\n            };\n            if (this.publishQualitySeq == 0) {\n                this.publishQualitySeq = ++this.streamCenter.eventSeq;\n                this.dataReport.newReport(this.publishQualitySeq);\n                this.dataReport.addMsgExt(this.publishQualitySeq, {\n                    stream: this.streamid,\n                });\n            }\n            this.dataReport.addEvent(this.publishQualitySeq, 'PublishQuality', qualityInfo);\n            this.publishQualityCount += 1;\n            if (this.publishQualityCount >= this.publishQulaityMaxCount) {\n                var _now = new Date().getTime();\n                if (_now - this.playerLogUploadTime > 45000) {\n                    this.reportQualityStatics();\n                    this.playerLogUploadTime = new Date().getTime();\n                }\n            }\n        }\n        this.streamCenter.onPlayerQuality(this.streamid, streamQuality, this.playerType);\n    };\n    ZegoPlayWechat.prototype.getCurrentPlayerUrl = function () {\n        return this.urls[this.playUrlIndex % this.urls.length];\n    };\n    ZegoPlayWechat.prototype.reportQualityStatics = function () {\n        //report\n        this.dataReport.uploadReport(this.publishQualitySeq, 'WXPublishStateUpdate');\n        this.publishQualityCount = 0;\n        this.publishQualitySeq = 0;\n    };\n    return ZegoPlayWechat;\n}());\nexports.ZegoPlayWechat = ZegoPlayWechat;\n\n\n/***/ }),\n\n/***/ \"./sdk/wechatMini/zego.streamcenter.wechat.ts\":\n/*!****************************************************!*\\\n  !*** ./sdk/wechatMini/zego.streamcenter.wechat.ts ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n/**\n ZegoStreamCenter\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ZegoStreamCenter_1 = __webpack_require__(/*! ../common/ZegoStreamCenter */ \"./sdk/common/ZegoStreamCenter.ts\");\nvar zego_datareport_1 = __webpack_require__(/*! ../common/zego.datareport */ \"./sdk/common/zego.datareport.ts\");\nvar zego_play_wechat_1 = __webpack_require__(/*! ./zego.play.wechat */ \"./sdk/wechatMini/zego.play.wechat.ts\");\nvar ENUM_PLAY_STATE_UPDATE = {\n    start: 0,\n    stop: 1,\n    retry: 2\n};\nvar ENUM_PLAYER_TYPE = {\n    play: 0,\n    publish: 1\n};\nvar ZegoStreamCenterWechat = /** @class */ (function (_super) {\n    __extends(ZegoStreamCenterWechat, _super);\n    function ZegoStreamCenterWechat(log, stateCenter) {\n        var _this = _super.call(this, log, stateCenter) || this;\n        _this.playerList = {};\n        _this.playerCount = 0;\n        _this.playingList = [];\n        _this.publishingList = [];\n        _this.eventSeq = 0;\n        _this.streamEventMap = {};\n        _this.playerWaitingList = [];\n        _this.playerStatistics = {};\n        _this.logger = log;\n        _this.dataReport = new zego_datareport_1.ZegoDataReport(_this.logger);\n        return _this;\n    }\n    //更新拉流信息\n    //ZegoClient调用StartPlayingStream/StopPlayingStream时更新状态\n    ZegoStreamCenterWechat.prototype.updatePlayingState = function (streamid, streamParams, start) {\n        if (streamid == undefined) {\n            return;\n        }\n        this.updateStreamState(streamid, start, streamParams, this.playingList);\n        if (start) {\n            //start a report\n            this.eventSeq += 1;\n            this.streamEventMap[streamid] = this.eventSeq;\n            this.dataReport.newReport(this.eventSeq);\n            //GetPublishInfo begin\n            this.dataReport.eventStart(this.eventSeq, 'GotPlayInfo');\n        }\n        else {\n            //retport\n            this.reportPlayEvent(streamid);\n        }\n    };\n    //更新推流信息\n    //ZegoClient调用StartPublishingStream/StopPublishingStream时更新状态\n    ZegoStreamCenterWechat.prototype.updatePublishingState = function (streamid, streamParams, start) {\n        if (streamParams === void 0) { streamParams = ''; }\n        if (start === void 0) { start = false; }\n        if (streamid == undefined) {\n            return;\n        }\n        this.updateStreamState(streamid, start, streamParams, this.publishingList);\n        if (start) {\n            //start a report\n            this.eventSeq += 1;\n            this.streamEventMap[streamid] = this.eventSeq;\n            this.dataReport.newReport(this.eventSeq);\n            //GetPublishInfo begin\n            this.dataReport.eventStart(this.eventSeq, 'GotPublishInfo');\n        }\n        else {\n            this.reportPublishEvent(streamid);\n        }\n    };\n    ZegoStreamCenterWechat.prototype.updateStreamState = function (streamid, start, streamParams, streamList) {\n        if (!streamid) {\n            return;\n        }\n        if (!streamParams || typeof streamParams != 'string') {\n            streamParams = '';\n        }\n        if (start == true) {\n            streamList.push({\n                streamid: streamid,\n                params: streamParams\n            });\n        }\n        else {\n            for (var i = 0; i < streamList.length; i++) {\n                if (streamList[i].streamid == streamid) {\n                    streamList.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    };\n    //当前是否在拉流\n    ZegoStreamCenterWechat.prototype.isPlaying = function () {\n        if (this.playingList.length != 0) {\n            return true;\n        }\n        return false;\n    };\n    //当前是否正在推流\n    ZegoStreamCenterWechat.prototype.isPublishing = function () {\n        if (this.publishingList.length != 0) {\n            return true;\n        }\n        return false;\n    };\n    /*\n     *    \"zpc.sps.0\": \"ZegoStreamCenter.startPlayingStream\",\n     */\n    //拉流开始(从本地或server获取到推拉流URL)\n    ZegoStreamCenterWechat.prototype.startPlayingStream = function (streamid, streamUrlList, dispatchType) {\n        this.logger.debug('zpc.sps.0 call');\n        //获取到URL信息\n        var seq = this.streamEventMap[streamid];\n        if (seq) {\n            var type = '';\n            if (dispatchType == 0) {\n                type = 'cdn';\n            }\n            else if (dispatchType == 1) {\n                type = 'ultra_src';\n            }\n            this.dataReport.eventEndWithMsg(seq, 'GotPlayInfo', {\n                type: type,\n                urls: streamUrlList\n            });\n        }\n        return this.startPlayer(streamid, streamUrlList, dispatchType, ENUM_PLAYER_TYPE.play);\n    };\n    /*\n     *    \"zpc.sp.0\": \"ZegoStreamCenter.startPlayer\",\n     */\n    ZegoStreamCenterWechat.prototype.startPlayer = function (streamid, streamUrlList, dispatchType, playerType) {\n        var player = this.playerList[streamid];\n        if (player) {\n            return true;\n        }\n        //检查是否需要开始推拉流\n        var streamList = [];\n        if (playerType == ENUM_PLAYER_TYPE.play) {\n            streamList = this.playingList;\n        }\n        else if (playerType == ENUM_PLAYER_TYPE.publish) {\n            streamList = this.publishingList;\n        }\n        var found = false;\n        var params = '';\n        for (var i = 0; i < streamList.length; i++) {\n            if (streamList[i].streamid == streamid) {\n                found = true;\n                params = streamList[i].params;\n                break;\n            }\n        }\n        if (!found) {\n            this.logger.warn('zpc.sp.0 should not start');\n            return false;\n        }\n        // 开始拉流，调用canvas，并存储起来 存进  this.playerList中\n        player = this.playerList[streamid] = new zego_play_wechat_1.ZegoPlayWechat(this.logger, streamid, streamUrlList, params, this.getReconnectLimit(dispatchType), this, dispatchType, playerType, this.dataReport);\n        player.playerSeq = this.streamEventMap[streamid];\n        // 拉流失败则返回不做操作\n        if (!player) {\n            this.logger.info('zpc.sp.0 new player failed');\n            return false;\n        }\n        // 拉流成功，播放器数量加1\n        ++this.playerCount;\n        var result = player.tryStartPlayer(0);\n        this.logger.debug('zpc.sp.0 call result:', result);\n        return result;\n    };\n    /*\n     *    \"zpc.sps.1.0\": \"ZegoStreamCenter.stopPlayingStream\",//拉流结束\n     */\n    ZegoStreamCenterWechat.prototype.stopPlayingStream = function (streamid) {\n        this.logger.debug('zpc.sps.1.0 call');\n        if (streamid == undefined) {\n            return;\n        }\n        this.stopPlayer(streamid);\n        this.updatePlayingState(streamid);\n    };\n    /*\n     *    \"zpc.sp.1.0\": \"ZegoStreamCenter.stopPlayer\",\n     */\n    ZegoStreamCenterWechat.prototype.stopPlayer = function (streamid) {\n        var player = this.playerList[streamid];\n        if (player) {\n            player.stopPlayer();\n            delete this.playerList[streamid];\n            --this.playerCount;\n            //this.onPlayStateUpdate(ENUM_PLAY_STATE_UPDATE.stop, player.streamid);\n        }\n        this.logger.debug('zpc.sp.1.0 call success');\n    };\n    /*\n     *    \"zpc.sps.1\": \"ZegoStreamCenter.startPublishingStream\",//推流开始\n     */\n    ZegoStreamCenterWechat.prototype.startPublishingStream = function (streamid, streamUrlList, dispatchType) {\n        this.logger.debug('zpc.sps.1 call');\n        var seq = this.streamEventMap[streamid];\n        if (seq) {\n            var type = '';\n            if (dispatchType == 0) {\n                type = 'cdn';\n            }\n            else if (dispatchType == 1) {\n                type = 'ultra_src';\n            }\n            this.dataReport.eventEndWithMsg(seq, 'GotPublishInfo', {\n                type: type,\n                urls: streamUrlList\n            });\n        }\n        return this.startPlayer(streamid, streamUrlList, dispatchType, ENUM_PLAYER_TYPE.publish);\n    };\n    /*\n     *    \"zpc.sps.1.1\": \"ZegoStreamCenter.stopPublishingStream\",//推流结束\n     */\n    ZegoStreamCenterWechat.prototype.stopPublishingStream = function (streamid) {\n        this.logger.debug('zpc.sps.1.1 call');\n        if (streamid == undefined) {\n            return;\n        }\n        this.stopPlayer(streamid);\n        this.updatePublishingState(streamid, '', false);\n    };\n    /*\n     *    \"zpc.upe.1.0\": \"ZegoStreamCenter.updatePlayerEvent\",//推拉流状态\n     */\n    ZegoStreamCenterWechat.prototype.updatePlayerState = function (streamid, event) {\n        var player = this.playerList[streamid];\n        if (player) {\n            player.updateEvent(event);\n        }\n        else {\n            this.logger.warn('zpc.upe.1.0 no player ' + streamid);\n        }\n        this.logger.debug('zpc.upe.1.0 updatePlayerEvent success');\n    };\n    /*\n     *    \"zpc.upns.1.0\": \"ZegoStreamCenter.updatePlayerNetStatus\",//推拉流质量\n     */\n    ZegoStreamCenterWechat.prototype.updatePlayerNetStatus = function (streamid, event) {\n        var player = this.playerList[streamid];\n        if (player) {\n            player.updatePlayerNetStatus(event);\n        }\n        else {\n            this.logger.warn('zpc.upns.1.0 no player ' + streamid);\n        }\n        this.logger.debug('zpc.upns.1.0 updatePlayerNetStatus success');\n    };\n    /*\n     *    \"zpc.r.0\": \"ZegoStreamCenter.reset\",\n     */\n    ZegoStreamCenterWechat.prototype.reset = function () {\n        this.logger.debug('zpc.r.0 call');\n        for (var i = 0; i < this.playingList.length; i++) {\n            this.stopPlayingStream(this.playingList[i]);\n        }\n        for (var j = 0; j < this.publishingList.length; j++) {\n            this.stopPublishingStream(this.publishingList[j]);\n        }\n        this.playerCount = 0;\n        this.playerList = {};\n        this.playerWaitingList = [];\n        this.playerStatistics = {};\n        this.streamEventMap = {};\n        this.logger.debug('zpc.r.0 call success');\n    };\n    ZegoStreamCenterWechat.prototype.reportPublishEvent = function (streamid, error) {\n        if (!this.streamEventMap[streamid]) {\n            return;\n        }\n        var seq = this.streamEventMap[streamid];\n        //report\n        this.dataReport.addMsgExt(seq, {\n            stream: streamid,\n            error: error\n        });\n        this.dataReport.uploadReport(seq, 'WXPublishStream');\n        delete this.streamEventMap[streamid];\n    };\n    ZegoStreamCenterWechat.prototype.reportPlayEvent = function (streamid, error) {\n        if (!this.streamEventMap[streamid]) {\n            return;\n        }\n        var seq = this.streamEventMap[streamid];\n        this.dataReport.addMsgExt(seq, {\n            stream: streamid,\n            error: error\n        });\n        this.dataReport.uploadReport(seq, 'WXPlayStream');\n        delete this.streamEventMap[streamid];\n    };\n    ZegoStreamCenterWechat.prototype.onPlayStateUpdate = function (type, streamid, error) { };\n    ZegoStreamCenterWechat.prototype.onPlayQualityUpdate = function (streamid, streamQuality) { };\n    ZegoStreamCenterWechat.prototype.onPublishStateUpdate = function (type, streamid, error) { };\n    ZegoStreamCenterWechat.prototype.onPublishQualityUpdate = function (streamid, streamQuality) { };\n    ZegoStreamCenterWechat.prototype.onPublisherStreamUrlUpdate = function (streamid, url) { };\n    ZegoStreamCenterWechat.prototype.onPlayerStreamUrlUpdate = function (streamid, url) { };\n    ZegoStreamCenterWechat.prototype.getReconnectLimit = function (sourceType) {\n        //switch(sourceType) in future\n        return 1;\n    };\n    /*\n     *    \"ops.0\": \"ZegoStreamCenter.onPlayStart\",\n     */\n    ZegoStreamCenterWechat.prototype.onPlayerStart = function (streamid, playerType) {\n        this.logger.debug('ops.0 call');\n        //callback\n        if (playerType == ENUM_PLAYER_TYPE.play)\n            this.onPlayStateUpdate(ENUM_PLAY_STATE_UPDATE.start, streamid, 0);\n        else if (playerType == ENUM_PLAYER_TYPE.publish)\n            this.onPublishStateUpdate(ENUM_PLAY_STATE_UPDATE.start, streamid, 0);\n    };\n    /*\n     *    \"ops.1\": \"ZegoStreamCenter.onPlayStop\",\n     */\n    ZegoStreamCenterWechat.prototype.onPlayerStop = function (streamid, playerType, error) {\n        this.logger.debug('ops.1 call');\n        if (playerType == ENUM_PLAYER_TYPE.play) {\n            // this.stopPlayingStream(streamid);\n            //callback\n            this.reportPlayEvent(streamid, error);\n            this.logger.warn('ops.1 play error');\n            this.onPlayStateUpdate(ENUM_PLAY_STATE_UPDATE.stop, streamid, error);\n        }\n        else if (playerType == ENUM_PLAYER_TYPE.publish) {\n            // this.stopPublishingStream(streamid);\n            this.reportPublishEvent(streamid, error);\n            this.logger.warn('ops.1 publish error');\n            this.onPublishStateUpdate(ENUM_PLAY_STATE_UPDATE.stop, streamid, error);\n        }\n    };\n    /*\n     *    \"opr.0\": \"ZegoStreamCenter.onPlayStop\",\n     */\n    ZegoStreamCenterWechat.prototype.onPlayerRetry = function (streamid, playerType) {\n        this.logger.debug('opr.0 call');\n        if (playerType == ENUM_PLAYER_TYPE.play)\n            this.onPlayStateUpdate(ENUM_PLAY_STATE_UPDATE.retry, streamid, 0);\n        else if (playerType == ENUM_PLAYER_TYPE.publish)\n            this.onPublishStateUpdate(ENUM_PLAY_STATE_UPDATE.retry, streamid, 0);\n    };\n    ZegoStreamCenterWechat.prototype.onPlayerQuality = function (streamid, streamQuality, playerType) {\n        if (playerType == ENUM_PLAYER_TYPE.play)\n            this.onPlayQualityUpdate(streamid, streamQuality);\n        else if (playerType == ENUM_PLAYER_TYPE.publish)\n            this.onPublishQualityUpdate(streamid, streamQuality);\n    };\n    /*\n     *    \"opuu.0\": \"ZegoStreamCenter.onPlayUrlUpdated\",\n     */\n    ZegoStreamCenterWechat.prototype.onStreamUrlUpdate = function (streamid, url, playerType) {\n        this.logger.debug('opuu.0 call');\n        //callback\n        if (playerType == 0) {\n            this.onPlayerStreamUrlUpdate(streamid, url);\n        }\n        else {\n            this.onPublisherStreamUrlUpdate(streamid, url);\n        }\n    };\n    ZegoStreamCenterWechat.prototype.getStats = function (callBack) {\n        var _this = this;\n        this.onPlayQualityUpdate = function (streamid, streamQuality) {\n            _this.setStats(streamid, streamQuality, 0, callBack);\n        };\n        this.onPublishQualityUpdate = function (streamid, streamQuality) {\n            _this.setStats(streamid, streamQuality, 1, callBack);\n        };\n    };\n    ZegoStreamCenterWechat.prototype.setStats = function (streamId, streamQuality, type, callBack) {\n        var stats = {\n            video: {\n                videoBitrate: streamQuality.videoBitrate,\n                videoFPS: streamQuality.videoFPS,\n                videoWidth: streamQuality.videoWidth,\n                videoHeight: streamQuality.videoHeight\n            },\n            audio: {\n                audioBitrate: streamQuality.audioBitrate\n            },\n            streamId: streamId,\n            type: type,\n            roomId: ''\n        };\n        callBack(stats);\n    };\n    return ZegoStreamCenterWechat;\n}(ZegoStreamCenter_1.ZegoStreamCenter));\nexports.ZegoStreamCenterWechat = ZegoStreamCenterWechat;\n\n\n/***/ }),\n\n/***/ \"./sdk/wechatMini/zego.webSocket.ts\":\n/*!******************************************!*\\\n  !*** ./sdk/wechatMini/zego.webSocket.ts ***!\n  \\******************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ZegoWebSocket = /** @class */ (function () {\n    function ZegoWebSocket(url, protocol) {\n        this.url = url;\n        this.protocol = protocol || null;\n        this.readyState = 3;\n        this._websocket = wx.connectSocket({\n            url: url,\n        });\n        this.init();\n    }\n    ZegoWebSocket.prototype.init = function () {\n        var _this = this;\n        if (this._websocket) {\n            this.readyState = 0;\n            this._websocket.onOpen(function (e) {\n                _this.readyState = _this._websocket.readyState;\n                if (typeof _this.onopen === 'function') {\n                    _this.onopen(e);\n                    _this._websocket.onClose(function (e) {\n                        _this.readyState = _this._websocket.readyState;\n                        if (typeof _this.onclose === 'function') {\n                            _this.onclose(e);\n                        }\n                    });\n                    _this._websocket.onMessage(function (data) {\n                        if (typeof _this.onmessage === 'function') {\n                            _this.onmessage(data);\n                        }\n                    });\n                }\n            });\n            this._websocket.onError(function (e) {\n                _this.readyState = _this._websocket.readyState;\n                if (typeof _this.onerror === 'function') {\n                    _this.onerror(e);\n                }\n            });\n        }\n    };\n    ZegoWebSocket.prototype.onopen = function (e) { };\n    ZegoWebSocket.prototype.onerror = function (e) { };\n    ZegoWebSocket.prototype.onclose = function (e) { };\n    ZegoWebSocket.prototype.onmessage = function (e) { };\n    ZegoWebSocket.prototype.send = function (msg) {\n        this._websocket &&\n            this._websocket.send({\n                data: msg,\n            });\n    };\n    ZegoWebSocket.prototype.close = function () {\n        this._websocket && this._websocket.close();\n    };\n    return ZegoWebSocket;\n}());\nexports.ZegoWebSocket = ZegoWebSocket;\n\n\n/***/ })\n\n/******/ });\n});"]}